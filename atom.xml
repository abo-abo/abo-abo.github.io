<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>(or emacs</title>
 <link href="http://oremacs.com/atom.xml" rel="self"/>
 <link href="http://oremacs.com/"/>
 <updated>2015-03-23T19:22:14+01:00</updated>
 <id>http://oremacs.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Transform region into ASCII art</title>
   <link href="http://oremacs.com/2015/03/23/region-to-toilet/"/>
   <updated>2015-03-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/23/region-to-toilet</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a command that I&amp;#39;ve found laying around my config that you might find interesting:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-figlet-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-on-region&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;toilet&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can install the &lt;code&gt;toilet&lt;/code&gt; shell utility from your package manager.
Here&amp;#39;s an example result:&lt;/p&gt;

&lt;pre&gt;
    #&quot;
   m&quot;    mmm    m mm          mmm   mmmmm   mmm    mmm    mmm
   #    #&quot; &quot;#   #&quot;  &quot;        #&quot;  #  # # #  &quot;   #  #&quot;  &quot;  #   &quot;
   #    #   #   #            #&quot;&quot;&quot;&quot;  # # #  m&quot;&quot;&quot;#  #       &quot;&quot;&quot;m
    #   &quot;#m#&quot;   #            &quot;#mm&quot;  # # #  &quot;mm&quot;#  &quot;#mm&quot;  &quot;mmm&quot;
     &quot;
&lt;/pre&gt;

&lt;p&gt;If you don&amp;#39;t mind the strange name, the output looks quite nice.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra 0.12.0 is out</title>
   <link href="http://oremacs.com/2015/03/22/hydra-0.12.0/"/>
   <updated>2015-03-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/22/hydra-0.12.0</id>
   <content type="html">&lt;p&gt;With a month&amp;#39;s time and almost 50 commits since that last one, a new version of Hydra has emerged.
As usual, I&amp;#39;ll just re-state the
&lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.12.0&quot;&gt;release notes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Handling of heads with duplicate &lt;code&gt;cmd&lt;/code&gt; was improved.&lt;/li&gt;
&lt;li&gt;Don&amp;#39;t bind &lt;code&gt;nil&lt;/code&gt; in outside keymaps.&lt;/li&gt;
&lt;li&gt;Work-around &lt;code&gt;golden-ratio-mode&lt;/code&gt; in &lt;code&gt;lv-window&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-g&lt;/kbd&gt; (&lt;code&gt;hydra-keyboard-quit&lt;/code&gt;) should run &lt;code&gt;:post&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Bind &lt;code&gt;[switch-frame]&lt;/code&gt; to &lt;code&gt;hydra-keyboard-quit&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:post&lt;/code&gt; is called for &lt;code&gt;:timeout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hydra-key-format-spec&lt;/code&gt; is a new defcustom for the keys format in the docstring. It&amp;#39;s &lt;code&gt;&amp;quot;%s&amp;quot;&lt;/code&gt; by
default, but you can set it to e.g. &lt;code&gt;&amp;quot;%-4s&amp;quot;&lt;/code&gt; if you like.&lt;/li&gt;
&lt;li&gt;The key regex was extended to include most common key binding characters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hydra-repeat&lt;/code&gt; is a hydra-specific &lt;code&gt;repeat&lt;/code&gt; function. It behaves as you would expect &lt;code&gt;repeat&lt;/code&gt; to behave.&lt;/li&gt;
&lt;li&gt;New body option - &lt;code&gt;:timeout&lt;/code&gt;. Use e.g. &lt;code&gt;:timeout 2.0&lt;/code&gt; to set the timer. After the first head is called,
a timer is started to disable the hydra. Each new head call resets this timer, so the hydra won&amp;#39;t disappear as long as you keep typing.&lt;/li&gt;
&lt;li&gt;Lines are truncated in &lt;code&gt;lv-message&lt;/code&gt;. This is useful for large docstring not to become misaligned when the window
becomes too small.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;allow-for-a-%s(test)-spec-in-the-docstring&quot;&gt;Allow for a &lt;code&gt;%s(test)&lt;/code&gt; spec in the docstring&lt;/h3&gt;

&lt;p&gt;The spec that&amp;#39;s used for e.g. &lt;code&gt;(test)&lt;/code&gt; is &lt;code&gt;%S&lt;/code&gt;. So if &lt;code&gt;(test)&lt;/code&gt; returns a string, it will be quoted.
This may not be desired, hence the new feature.
Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-marked-items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Number of marked items: %(length (dired-get-marked-files))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Directory size: %s(shell-command-to-string \&amp;quot;du -hs\&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mark&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-pink/amaranth-override-is-set-recursively&quot;&gt;The pink/amaranth override is set recursively&lt;/h3&gt;

&lt;p&gt;This fixes the issue in this hydra:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amaranth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fo&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yay&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before, pressing e.g. &lt;kbd&gt;fp&lt;/kbd&gt; would not issue a warning, since &lt;kbd&gt;f&lt;/kbd&gt; started its own
keymap. This is now fixed.&lt;/p&gt;

&lt;h3 id=&quot;an-option-to-specify-the-hint-for-all-heads-in-body&quot;&gt;An option to specify the hint for all heads in body&lt;/h3&gt;

&lt;p&gt;When you write a large docstring, you usually pass &lt;code&gt;nil&lt;/code&gt; as the hint for most heads.
Now you can omit it, if you set &lt;code&gt;:hint nil&lt;/code&gt; in body.
Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-org-template&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:hint&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_c_enter  _q_uote    _L_aTeX:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_l_atex   _e_xample  _i_ndex:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_a_scii   _v_erse    _I_NCLUDE:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_s_rc     ^ ^        _H_TML:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_h_tml    ^ ^        _A_SCII:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;h&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self-insert-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;emulate-org-mode-export-dispatch-with-hydra-ox&quot;&gt;Emulate org-mode export dispatch with hydra-ox&lt;/h3&gt;

&lt;p&gt;You can also look at that code to see how nested hydras work.  Several other examples were added to
hydra-examples.el.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you enjoy all the new features/fixes, and thanks to all the people that contributed to
them. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some fun with Hydra</title>
   <link href="http://oremacs.com/2015/03/21/some-fun-with-hydra/"/>
   <updated>2015-03-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/21/some-fun-with-hydra</id>
   <content type="html">&lt;p&gt;The code from this post has very little application. But it&amp;#39;s kind of fun, so I&amp;#39;ll post it.  Star
Trek: TNG is one of my favorite shows, so I&amp;#39;ve added some TNG characters to one of the Hydra
features that I&amp;#39;m testing.&lt;/p&gt;

&lt;h2 id=&quot;defhydradio-statement&quot;&gt;&lt;code&gt;defhydradio&lt;/code&gt; statement&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;defhydradio&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picard&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_p_ Captain Jean Luc Picard:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;riker&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_r_ Commander William Riker:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_d_ Lieutenant Commander Data:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;worf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_w_ Worf:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;la-forge&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_f_ Geordi La Forge:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;troi&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_t_ Deanna Troi:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dr-crusher&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_c_ Doctor Beverly Crusher:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;phaser&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_h_ Set phasers to &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[stun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kill]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;defhydradio&lt;/code&gt; macro is akin to a namespace construct that defines multiple variables that can
assume only certain values (either &lt;code&gt;t&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; by default), and functions to cycle those values.&lt;/p&gt;

&lt;h2 id=&quot;defhydradio-implementation&quot;&gt;&lt;code&gt;defhydradio&lt;/code&gt; implementation&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what you may see after a &lt;code&gt;macroexpand&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;_p_ Captain Jean Luc Picard:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;[nil&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra--cycle-radio&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;_r_ Commander William Riker:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;[nil&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;t]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra--cycle-radio&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/names&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;hydra-tng/data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/worf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/la-forge&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;hydra-tng/troi&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/dr-crusher&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, each list passed to &lt;code&gt;defhydradio&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;gets a prefixed variable definition&lt;/li&gt;
&lt;li&gt;gets a &lt;code&gt;range&lt;/code&gt; property for the prefixed symbol&lt;/li&gt;
&lt;li&gt;gets a prefixed function definition that cycles the variable value based on the &lt;code&gt;range&lt;/code&gt; property&lt;/li&gt;
&lt;li&gt;gets added to &lt;code&gt;hydra-tng/names&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;defhydra-statement&quot;&gt;&lt;code&gt;defhydra&lt;/code&gt; statement&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:foreign-keys&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:hint&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra--table&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/names&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;  % -30s %% -3`%s&amp;quot;&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&amp;quot;%s %%`%s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;\n\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/worf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/la-forge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/troi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/dr-crusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/phaser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beam-down&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beam down&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-reset-radios&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-tng/names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;reset&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The interesting statement in place of the docstring will actually evaluate to this docstring:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;  _p_ Captain Jean Luc Picard:   % -3`hydra-tng/picard^^^^    _h_ Set phasers to  %`hydra-tng/phaser&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _r_ Commander William Riker:   % -3`hydra-tng/riker^^^^^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _d_ Lieutenant Commander Data: % -3`hydra-tng/data^^^^^^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _w_ Worf:                      % -3`hydra-tng/worf^^^^^^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _f_ Geordi La Forge:           % -3`hydra-tng/la-forge^^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _t_ Deanna Troi:               % -3`hydra-tng/troi^^^^^^&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  _c_ Doctor Beverly Crusher:    % -3`hydra-tng/dr-crusher&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first line overflows a bit, but it&amp;#39;s clear what it is. There&amp;#39;s some flexibility in using
&lt;code&gt;hydra--table&lt;/code&gt;, since you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;redefine the row-column format (e.g. from 7x2 to 5x3)&lt;/li&gt;
&lt;li&gt;add more variables to &lt;code&gt;hydra-tng/names&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note also, that since &lt;code&gt;hydra-tng/names&lt;/code&gt; holds all the names, and all the names know their default
values through &lt;code&gt;range&lt;/code&gt;, it&amp;#39;s possible to reset them all at once with &lt;code&gt;hydra-reset-radios&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s a simple implementation of &lt;code&gt;beam-down&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beam-down&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;Beaming down: %s.&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;#&amp;#39;identity&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delq&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-value&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-tng/picard&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/riker&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/data&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/worf&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/la-forge&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/troi&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;hydra-tng/dr-crusher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;, and &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-tng/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;And that&amp;#39;s it. There actually is an application of &lt;code&gt;defhydradio&lt;/code&gt; in
&lt;a href=&quot;https://github.com/abo-abo/hydra/blob/master/hydra-ox.el&quot;&gt;hydra-ox.el&lt;/a&gt;.  It&amp;#39;s not fully finished,
but you can already try it as an alternative to &lt;code&gt;org-mode&lt;/code&gt; export dispatch widget, most things are
working.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Emacs package management</title>
   <link href="http://oremacs.com/2015/03/20/managing-emacs-packages/"/>
   <updated>2015-03-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/20/managing-emacs-packages</id>
   <content type="html">&lt;p&gt;Lately, I&amp;#39;ve been spending some time to automate and publish my Emacs config.  Being able to quickly
reproduce your config has many advantages, the main one being that you no longer have to spend time
to make your config reproducible.&lt;/p&gt;

&lt;p&gt;Happily, most of my config is already published in many packages, I only have to figure out a nice
layer to glue them together. Below, I&amp;#39;ll show some automation for the packages managed by
&lt;code&gt;package.el&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-1:-get-the-main-directory&quot;&gt;Step 1: get the main directory&lt;/h2&gt;

&lt;p&gt;This is an important step that many other peoples&amp;#39; configs miss, even the ones that are designed to
be distributed. You can&amp;#39;t just assume that the config will be located in &lt;code&gt;~/.emacs.d&lt;/code&gt; and rely on
Emacs defaults. Instead, it&amp;#39;s nice to be able to clone the config into a random directory and launch
an Emacs from there, without messing with the currently installed Emacs.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also useful for having multiple repositories for different versions of Emacs. ELPA packages are
byte-compiled, and the byte code can be incompatible between versions (for instance, 24.3 and 24.4).
Having two independent checkouts with ELPA directory auto-generated really helps in that case.&lt;/p&gt;

&lt;p&gt;So here is the code to get the main directory and define an ELPA directory with respect to that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-d&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file-name-directory&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-chase-links&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;load-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;The giant turtle on which the world rests.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-user-dir&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;elpa&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-2:-decide-what-you-like&quot;&gt;Step 2: decide what you like&lt;/h2&gt;

&lt;p&gt;Next, I initialize the package and define some of the packages that I like, omitting the
dependencies that they bring. Note that the code of the whole post is stored in a separate file
&lt;code&gt;packages.el&lt;/code&gt; that is not intended to be loaded on start up, so it&amp;#39;s fine to call
&lt;code&gt;package-refresh-contents&lt;/code&gt; here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package-archives&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gnu&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://elpa.gnu.org/packages/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-refresh-contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-packages&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;auto-compile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auto-yasnippet&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;company&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eclipse-theme&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;flx-ido&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;function-args&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;headlong&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-occasional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-vertical-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;magit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;smex&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;swiper&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guide-key&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;powerline&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;projectile&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;slime&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cider&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;worf&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;org-download&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make-it-so&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ukrainian-holidays&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;netherlands-holidays&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;j-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;List of packages that I like.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-3:-install-and-upgrade&quot;&gt;Step 3: install and upgrade&lt;/h2&gt;

&lt;p&gt;The install step is pretty straightforward: install a package unless it&amp;#39;s already installed.
I tried to do something fancier for the upgrade, but in the end it was much more simple to
just call the interactive interface. The last two lines are basically equivalent to pressing
&lt;kbd&gt;Uxy&lt;/kbd&gt; interactively:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; install required&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-installed-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-install&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;; upgrade installed&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;save-window-excursion&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-list-packages&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-menu-mark-upgrades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;package-menu-execute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-4:-make-it-callable&quot;&gt;Step 4: make it callable&lt;/h2&gt;

&lt;p&gt;Finally, I just create a Makefile with the following contents:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;emacs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?=&lt;/span&gt; emacs
&lt;span class=&quot;nf&quot;&gt;upgrade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;emacs&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch -l packages.el

&lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;emacs&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -Q -l init.el

&lt;span class=&quot;nf&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thanks to the first line, I can issue stuff like this on the shell:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;emacs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;emacs24 make up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will use the &lt;code&gt;emacs24&lt;/code&gt; executable, instead of whatever &lt;code&gt;emacs&lt;/code&gt; points to.  Since the &lt;code&gt;up&lt;/code&gt;
target depends on &lt;code&gt;upgrade&lt;/code&gt; and &lt;code&gt;run&lt;/code&gt; targets, they will be executed in that order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the &lt;code&gt;upgrade&lt;/code&gt; will install / upgrade all packages in a non-interactive Emacs&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;run&lt;/code&gt; target will start an interactive Emacs with already updated packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really like putting stuff in Makefiles, since they are very flexible, yet so easy to call.  In the
very same Makefile, I have a &lt;code&gt;profile&lt;/code&gt; target from
&lt;a href=&quot;http://oremacs.com/2015/02/24/emacs-speed-test/&quot;&gt;the post on profiling Emacs start up&lt;/a&gt;.  I also
wrote two packages related to Makefiles: &lt;a href=&quot;https://github.com/abo-abo/helm-make&quot;&gt;helm-make&lt;/a&gt; and
&lt;a href=&quot;https://github.com/abo-abo/make-it-so&quot;&gt;make-it-so&lt;/a&gt;. The latter one is actually very interesting and
deserves its own post, I should maybe just clean it up a bit.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll just cite Gall&amp;#39;s law here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A complex system that works is invariably found to have evolved from a simple system that
worked. A complex system designed from scratch never works and cannot be patched up to make it
work. You have to start over with a working simple system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it applies from both sides w.r.t. my Emacs config: it kind of works, but I really wish it
was reproducible from the start, before making it complex.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A new Swiper demo on Youtube</title>
   <link href="http://oremacs.com/2015/03/19/swiper-on-youtubes/"/>
   <updated>2015-03-19T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/19/swiper-on-youtubes</id>
   <content type="html">&lt;h2 id=&quot;youtube-video&quot;&gt;Youtube video&lt;/h2&gt;

&lt;p&gt;Today, I&amp;#39;ve fixed a few bugs in both &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;swiper&lt;/a&gt; and &lt;code&gt;ivy&lt;/code&gt;.
Finally, the number of candidates display has also been added.  You can see the whole thing in the
&lt;a href=&quot;https://www.youtube.com/watch?v=s3qwiAtKjuA&quot;&gt;one minute video demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the bindings that I&amp;#39;m using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-r&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;swiper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-s&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;swiper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;integration-tests&quot;&gt;Integration tests&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve also added some &lt;a href=&quot;https://github.com/abo-abo/swiper/blob/master/ivy-test.el&quot;&gt;integration tests&lt;/a&gt;,
if you&amp;#39;re interested. I didn&amp;#39;t know how to do exactly this type of testing before (when there&amp;#39;s input from minibuffer).
Turns out, it&amp;#39;s pretty easy to do using &lt;code&gt;execute-kbd-macro&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-expr&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Holds a test expression to evaluate with `ivy-eval&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-result&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Holds the eval result of `ivy-expr&amp;#39; by `ivy-eval&amp;#39;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Evaluate `ivy-expr&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Evaluate EXPR followed by KEYS.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-expr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;execute-kbd-macro&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vconcat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ivy-result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ert-deftest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;quot;42&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;C-m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;y C-m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;y DEL b C-m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;z C-m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Give the package a try, if you haven&amp;#39;t yet. You can get it from &lt;a href=&quot;http://melpa.org/#/swiper&quot;&gt;MELPA&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Find file in a Git repo with ivy</title>
   <link href="http://oremacs.com/2015/03/18/ivy-git/"/>
   <updated>2015-03-18T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/18/ivy-git</id>
   <content type="html">&lt;p&gt;I&amp;#39;m really enjoying using &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;ivy&lt;/a&gt; for matching stuff.&lt;/p&gt;

&lt;p&gt;Here is today&amp;#39;s &lt;a href=&quot;https://github.com/abo-abo/swiper/blob/master/counsel.el&quot;&gt;addition&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;couns-git&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Find file in the current Git repository.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;locate-dominating-file&lt;/span&gt;
                             &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cands&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-string&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-to-string&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;git ls-files --full-name --&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Find file: &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cands&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one will allow you to find a file in your Git repository.
I&amp;#39;ve bound it like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;couns-git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how it looks like for selecting a file in the Emacs repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/couns-git.png&quot; alt=&quot;couns-git.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;The speed isn&amp;#39;t an issue for 3500 candidates, although I should try to add the number of candidates
display pretty soon. It&amp;#39;s just that there isn&amp;#39;t a good spot in the minibuffer to show that.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve also updated &lt;code&gt;ivy-next-line&lt;/code&gt; and &lt;code&gt;ivy-previous-line&lt;/code&gt; to switch to the previous history element
in case &lt;code&gt;ivy-text&lt;/code&gt; is empty. This is the exact behavior of &lt;code&gt;isearch&lt;/code&gt;, so if you bind &lt;code&gt;swiper&lt;/code&gt; to &lt;kbd&gt;C-s&lt;/kbd&gt;
and &lt;kbd&gt;C-r&lt;/kbd&gt; like I do, you&amp;#39;ll find that &lt;kbd&gt;C-s C-s&lt;/kbd&gt; and &lt;kbd&gt;C-r C-r&lt;/kbd&gt; work as expected.
Thanks to &lt;a href=&quot;https://github.com/johnmastro&quot;&gt;@johnmastro&lt;/a&gt; for the suggestion.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the current state of the keymap:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-minibuffer-map&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-sparse-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-m&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SPC&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;self-insert-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-backward-delete-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-beginning-of-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-end-of-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-next-history-element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ivy-previous-history-element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;minibuffer-keyboard-quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Keymap used in the minibuffer.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also try &lt;code&gt;counsel&lt;/code&gt; for completing Elisp and &lt;code&gt;couns-clj&lt;/code&gt; for completing Clojure.  As you can
see, the implementation is very simple: you just get a list of strings, and you&amp;#39;re done.&lt;/p&gt;

&lt;p&gt;If you want to implement some &lt;code&gt;ivy&lt;/code&gt; completion for your favorite mode, I recommend to find the
corresponding &lt;code&gt;ac-source&lt;/code&gt; and see where it gets its list of strings.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More Info</title>
   <link href="http://oremacs.com/2015/03/17/more-info/"/>
   <updated>2015-03-17T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/17/more-info</id>
   <content type="html">&lt;p&gt;I really liked Marcin Borkowski&amp;#39;s post on &lt;a href=&quot;http://mbork.pl/2014-12-27_Info_dispatch&quot;&gt;Info dispatch&lt;/a&gt;,
where he describes how to open several &lt;code&gt;*info*&lt;/code&gt; buffers for the most commonly used manuals.
However, as I tried to call one of these functions today, I forgot the key binding.&lt;/p&gt;

&lt;h2 id=&quot;hydra-to-the-rescue!&quot;&gt;Hydra to the rescue!&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what I&amp;#39;ve come up with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-open-info&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Open info on TOPIC in BNAME.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;switch-to-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-current-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Info-goto-node&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(%s)&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;info&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-info-to&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:hint&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;teal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_o_rg e_l_isp _e_macs _h_yperspec&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ora-open-info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*org info*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ora-open-info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;elisp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*elisp info*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ora-open-info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;emacs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*emacs info*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ora-open-info&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;gcl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*hyperspec*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-info-to/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;the-plan&quot;&gt;The Plan&lt;/h3&gt;

&lt;p&gt;I already have the &lt;kbd&gt;&amp;lt;f1&amp;gt; i&lt;/kbd&gt; key binding hard wired to my fingers. So after I&amp;#39;m in
&lt;em&gt;any&lt;/em&gt; Info buffer, I plan to press &lt;kbd&gt;t&lt;/kbd&gt; and get this dispatch:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-info-dispatch.png&quot; alt=&quot;hydra-info-dispatch.png&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-the-hyperspec&quot;&gt;Getting the Hyperspec&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve heard people lauding HTML while dumping on Info.
I&amp;#39;d suggest them to compare the &lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Front/index.htm&quot;&gt;Common Lisp Hyperspec&lt;/a&gt; web site
to this &lt;a href=&quot;http://ftp.gnu.org/gnu/gcl/gcl.info.tgz&quot;&gt;info file&lt;/a&gt; extracted from there.
Their contents are identical, but it&amp;#39;s easier and more pleasant to use Info.&lt;/p&gt;

&lt;p&gt;After I downloaded the file, I extracted it to &lt;code&gt;./etc/info/gcl.info&lt;/code&gt;, where &lt;code&gt;.&lt;/code&gt; is my &lt;code&gt;emacs-d&lt;/code&gt;.
Then I just added this directory to the Info path:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-additional-directory-list&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;etc/info/&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Reading Info is pleasant and educational. In case you&amp;#39;re new to Info, there&amp;#39;s Info for Info. In Info
format! Just press &lt;kbd&gt;&amp;lt;f1&amp;gt; i h&lt;/kbd&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Try J</title>
   <link href="http://oremacs.com/2015/03/16/try-j/"/>
   <updated>2015-03-16T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/16/try-j</id>
   <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;I imagine that if you&amp;#39;re reading this blog, you like to tinker with Emacs.  And people who like to
tinker with stuff probably also like to learn new programming languages, just for fun.  In that
case, if you ever want to learn a non-mainstream language, I highly recommend J.&lt;/p&gt;

&lt;p&gt;From its homepage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;J is a modern, high-level, general-purpose, high-performance programming language. J is portable
and runs on Windows, Unix, Mac, both as a GUI and in a console. J systems can be installed and
distributed for free.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-appetizer&quot;&gt;The Appetizer&lt;/h2&gt;

&lt;p&gt;Things J has going for it that are high on my list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jsoftware.com/download/j701_b_source.tar.gz&quot;&gt;GPL licensed source&lt;/a&gt;
(although it&amp;#39;s gibberish to read)&lt;/li&gt;
&lt;li&gt;a REPL&lt;/li&gt;
&lt;li&gt;short code&lt;/li&gt;
&lt;li&gt;high performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What attracted me to J in the first place is that it consistently has the shortest solutions (and
fast-running) on &lt;a href=&quot;https://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;.  What kept me going after the initial
wow-effect, was the extremely elegant standard functions implementation dividing things into
&lt;a href=&quot;http://www.jsoftware.com/docs/help701/dictionary/partsofspeech.htm&quot;&gt;verbs, adverbs, and conjunctions&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;something-impressive:-a-sudoku-solver&quot;&gt;Something impressive: a Sudoku solver&lt;/h3&gt;

&lt;p&gt;This code is taken from the &lt;a href=&quot;http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-J.html&quot;&gt;ob-J&lt;/a&gt; page that I wrote some
time ago (you can find a lot of additional info there):&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_src J :exports both
&lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;,&lt;/span&gt;((&lt;span class=&quot;j-verb&quot;&gt;,|:&lt;/span&gt;)&lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;9 9)&lt;span class=&quot;j-verb&quot;&gt;,,.&lt;/span&gt;&lt;span class=&quot;j-adverb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;,.&lt;/span&gt;&lt;span class=&quot;j-adverb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;4&lt;span class=&quot;j-verb&quot;&gt;$&lt;/span&gt;3
&lt;span class=&quot;variable-name&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; (&lt;span class=&quot;j-verb&quot;&gt;#=[:#~.&lt;/span&gt;)&lt;span class=&quot;j-conjunction&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;-.&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;&amp;amp;&lt;/span&gt;0
&lt;span class=&quot;variable-name&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;[:&lt;/span&gt;((&lt;span class=&quot;j-verb&quot;&gt;[:*&lt;/span&gt;&lt;span class=&quot;j-adverb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;_9:&lt;/span&gt;c&lt;span class=&quot;j-adverb&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;]&lt;/span&gt;)&lt;span class=&quot;j-conjunction&quot;&gt;&quot;&lt;/span&gt;1&lt;span class=&quot;j-verb&quot;&gt;#]&lt;/span&gt;)i&lt;span class=&quot;j-conjunction&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;{+&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;&quot;&lt;/span&gt;1 1(&lt;span class=&quot;j-verb&quot;&gt;&amp;gt;:i.&lt;/span&gt;9)&lt;span class=&quot;j-verb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;j-adverb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;[:&lt;/span&gt;i&lt;span class=&quot;j-conjunction&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;=i.&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;&amp;amp;&lt;/span&gt;0
&lt;span class=&quot;variable-name&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;[:,&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;$:&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;@.&lt;/span&gt;(0&lt;span class=&quot;j-verb&quot;&gt;:e.,&lt;/span&gt;)&lt;span class=&quot;j-verb&quot;&gt;[:;&lt;/span&gt;(&lt;span class=&quot;j-verb&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;@&lt;/span&gt;t)&lt;span class=&quot;j-conjunction&quot;&gt;&quot;&lt;/span&gt;1
&lt;span class=&quot;variable-name&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; 9 9&lt;span class=&quot;j-conjunction&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;@&lt;/span&gt;r&lt;span class=&quot;j-conjunction&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;j-verb&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;variable-name&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;j-other&quot;&gt;=:&lt;/span&gt; 9 9 &lt;span class=&quot;j-verb&quot;&gt;$&quot;.&lt;/span&gt;&lt;span class=&quot;j-conjunction&quot;&gt;&quot;&lt;/span&gt;0&lt;span class=&quot;string&quot;&gt;'200370009009200007001004002050000800008000900006000040900100500800007600400089001'&lt;/span&gt;
s m
&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_src
&lt;/span&gt;
&lt;span class=&quot;org-meta-line&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_example
&lt;/span&gt;&lt;span class=&quot;org-block&quot;&gt;2 0 0 3 7 0 0 0 9
0 0 9 2 0 0 0 0 7
0 0 1 0 0 4 0 0 2
0 5 0 0 0 0 8 0 0
0 0 8 0 0 0 9 0 0
0 0 6 0 0 0 0 4 0
9 0 0 1 0 0 5 0 0
8 0 0 0 0 7 6 0 0
4 0 0 0 8 9 0 0 1

2 8 4 3 7 5 1 6 9
6 3 9 2 1 8 4 5 7
5 7 1 9 6 4 3 8 2
1 5 2 4 9 6 8 7 3
3 4 8 7 5 2 9 1 6
7 9 6 8 3 1 2 4 5
9 6 7 1 4 3 5 2 8
8 1 3 5 2 7 6 9 4
4 2 5 6 8 9 7 3 1
&lt;/span&gt;&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_example
&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;It&amp;#39;s pretty amazing that the whole implementation, not counting the example input matrix, takes only
169 characters. You can also see how functional the language is.&lt;/p&gt;

&lt;h3 id=&quot;something-simpler:-a-factorial&quot;&gt;Something simpler: a factorial&lt;/h3&gt;

&lt;p&gt;To have a more simple example, here&amp;#39;s how to write down incrementally the factorial of 20:&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_src J
&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;20
&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_src
&lt;/span&gt;
&lt;span class=&quot;org-meta-line&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span class=&quot;org-code&quot;&gt;: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
&lt;/span&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_src J
&lt;/span&gt;1 &lt;span class=&quot;j-verb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;20
&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_src
&lt;/span&gt;
&lt;span class=&quot;org-meta-line&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span class=&quot;org-code&quot;&gt;: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
&lt;/span&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_src J
&lt;/span&gt;&lt;span class=&quot;j-verb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;j-adverb&quot;&gt;/&lt;/span&gt; 1 &lt;span class=&quot;j-verb&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;20
&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_src
&lt;/span&gt;
&lt;span class=&quot;org-meta-line&quot;&gt;#+RESULTS:&lt;/span&gt;
&lt;span class=&quot;org-code&quot;&gt;: 2432902008176640000
&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;The spaces are optional, I&amp;#39;ve only included them to make the code more clear.&lt;/p&gt;

&lt;h3 id=&quot;something-visual:-a-sine-plot&quot;&gt;Something visual: a sine plot&lt;/h3&gt;

&lt;pre&gt;
&lt;span class=&quot;org-block-begin-line&quot;&gt;#+begin_src J
&lt;/span&gt;load &lt;span class=&quot;string&quot;&gt;'plot'&lt;/span&gt;
plot 1 &lt;span class=&quot;j-verb&quot;&gt;o.&lt;/span&gt; 0&lt;span class=&quot;j-adverb&quot;&gt;.&lt;/span&gt;1 &lt;span class=&quot;j-verb&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;j-verb&quot;&gt;i.&lt;/span&gt;200
&lt;span class=&quot;org-block-end-line&quot;&gt;#+end_src
&lt;/span&gt;
&lt;/pre&gt;

&lt;p&gt;By simply pressing &lt;kbd&gt;C-c C-c&lt;/kbd&gt; on this source block you get this image generated and opened in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/ob-J-sine.png&quot; alt=&quot;ob-J-sine.png&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-emacs-tooling&quot;&gt;The Emacs Tooling&lt;/h2&gt;

&lt;p&gt;As mentioned above, there&amp;#39;s &lt;code&gt;org-mode&lt;/code&gt; babel support for J, including session interaction.  More
importantly, there is &lt;a href=&quot;https://github.com/zellio/j-mode&quot;&gt;j-mode&lt;/a&gt;.  The same package also provides a
REPL via &lt;code&gt;jconsole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, I wrote down a learning/assisting tool
&lt;a href=&quot;https://github.com/abo-abo/helm-j-cheatsheet&quot;&gt;helm-j-cheatsheet&lt;/a&gt;.
Here&amp;#39;s one of the screenshots:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/f3da93fe7c2fb30ffa9b1a4106dd41a6d8ee88a0/68747470733a2f2f7261772e6769746875622e636f6d2f61626f2d61626f2f68656c6d2d6a2d636865617473686565742f6d61737465722f646f632f73637265656e73686f742d322e706e67&quot; alt=&quot;helm-j-cheatsheet&quot;&gt;&lt;/p&gt;

&lt;p&gt;It allows to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;insert a function by English name&lt;/li&gt;
&lt;li&gt;look up the English name of the function by symbol&lt;/li&gt;
&lt;li&gt;open the &lt;a href=&quot;http://www.jsoftware.com/docs/help701/dictionary/d010.htm&quot;&gt;J documentation&lt;/a&gt; for a function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;J is a very cool language to try and I hope you give it a go. I haven&amp;#39;t yet managed to find a nice
use for it, but you could say that, just as learning LISP, learning J can make you better at other
languages.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Search for things with apropos</title>
   <link href="http://oremacs.com/2015/03/15/search-with-apropos/"/>
   <updated>2015-03-15T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/15/search-with-apropos</id>
   <content type="html">&lt;p&gt;Until recently, I didn&amp;#39;t even know that &lt;code&gt;apropos&lt;/code&gt; was an actual word. I thought that it was just
some gibberish that Emacs hackers invented to name a command. Turns out, it actually has a very
appropriate meaning:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;apropos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;preposition&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;with reference to; concerning.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;h2 id=&quot;an-apropos-hydra&quot;&gt;An apropos Hydra&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve just added this one to &lt;a href=&quot;https://github.com/abo-abo/hydra/blob/master/hydra-examples.el&quot;&gt;hydra-examples.el&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-apropos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;
                         &lt;span class=&quot;nb&quot;&gt;:hint&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_a_propos        _c_ommand&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_d_ocumentation  _l_ibrary&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_v_ariable       _u_ser-option&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;^ ^          valu_e_&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-documentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-user-option&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;apropos-value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I recommend to bind it like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c h&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-apropos/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Customary screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-apropos.png&quot; alt=&quot;hydra-apropos.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;As you can see, there are a total of 7 apropos functions available.  The most useful ones are
&lt;code&gt;apropos&lt;/code&gt;, &lt;code&gt;apropos-command&lt;/code&gt; and &lt;code&gt;apropos-variable&lt;/code&gt;.  But &lt;code&gt;apropos-value&lt;/code&gt; is very interesting as
well: it will not match an object name with the input, but instead search for all objects whose
contents match input. So, for instance, if you see something like &lt;code&gt;&amp;quot;error 42&amp;quot;&lt;/code&gt; come up, and you
don&amp;#39;t know where it&amp;#39;s coming from, it&amp;#39;s likely that some variable holds the value &lt;code&gt;42&lt;/code&gt;.  And that&amp;#39;s
when you use &lt;code&gt;apropos-variable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Apropos is like old-school googling, and I find it highly useful in finding the Emacs information
that I need. I hope that you will find it useful as well. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>More on swiper and ivy</title>
   <link href="http://oremacs.com/2015/03/14/more-swiper-ivy-stuff/"/>
   <updated>2015-03-14T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/14/more-swiper-ivy-stuff</id>
   <content type="html">&lt;p&gt;I&amp;#39;ll describe two new things in &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;swiper&lt;/a&gt; and &lt;code&gt;ivy&lt;/code&gt; that happened
within the day. Although you can install them separately from MELPA, they still live in a single git
repository.&lt;/p&gt;

&lt;h2 id=&quot;swiper-/-ivy-faces-now-inherit-the-standard-ones&quot;&gt;&lt;code&gt;swiper&lt;/code&gt; / &lt;code&gt;ivy&lt;/code&gt; faces now inherit the standard ones&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s a good idea by &lt;a href=&quot;https://github.com/purcell&quot;&gt;@purcell&lt;/a&gt;, and I tend to agree. So now, there are
six faces that inherit &lt;code&gt;highlight&lt;/code&gt;, &lt;code&gt;isearch-lazy-highlight-face&lt;/code&gt;, &lt;code&gt;isearch&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; faces
between them.  The advantage is that most themes re-define the above four faces as they see fit, so
the swiper faces will fit in better without customization.&lt;/p&gt;

&lt;p&gt;Still, I really enjoy the previous faces that were derived from the Swiper sprite. You can have them
as part of &lt;a href=&quot;https://github.com/abo-abo/eclipse-theme&quot;&gt;eclipse-theme&lt;/a&gt;. The theme creators can just
copy them verbatim to a light theme if they so choose.&lt;/p&gt;

&lt;p&gt;By the way, it seems that not all Emacs users are aware that you can customize faces.  You can do so
interactively for most popular packages. For example, after &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;customize-group&lt;/code&gt;
&lt;code&gt;swiper&lt;/code&gt;, you get a GUI for selecting most configurable things for &lt;code&gt;swiper&lt;/code&gt;, including the faces.&lt;/p&gt;

&lt;p&gt;The GUI will generate the code that looks something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;custom-set-faces&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-current-match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:background&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#e5b7c0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;elisp-completion-with-ivy&quot;&gt;Elisp completion with &lt;code&gt;ivy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The code to complete Elisp code at point is very simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;counsel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Elisp completion at point.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-substring-no-properties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all-completions&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;obarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ivy-read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pattern (%s): &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only function above that isn&amp;#39;t one of the familiar primitives is &lt;code&gt;ivy-read&lt;/code&gt;.  But even that one
has a similar interface to that of &lt;code&gt;completing-read&lt;/code&gt; or &lt;code&gt;ido-completing-read&lt;/code&gt;.  I was using
&lt;code&gt;helm-lisp-completion-at-point&lt;/code&gt; before, but &lt;code&gt;counsel&lt;/code&gt; is much less obtrusive, while offering
comparable speed and convenience:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/counsel-1.png&quot; alt=&quot;counsel-1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;The default minibuffer height for &lt;code&gt;ivy&lt;/code&gt; is set to 10 via &lt;code&gt;ivy-height&lt;/code&gt;.  It&amp;#39;s quite reasonable all-around, but
for &lt;code&gt;counsel&lt;/code&gt; I&amp;#39;ve set it to 7 via a let binding.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Swiper now has an ivy back end</title>
   <link href="http://oremacs.com/2015/03/13/introducing-ivy/"/>
   <updated>2015-03-13T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/13/introducing-ivy</id>
   <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Just three days ago, I wrote &lt;code&gt;swiper&lt;/code&gt; and introduced it in
&lt;a href=&quot;http://oremacs.com/2015/03/10/no-swiping/&quot;&gt;a post&lt;/a&gt;.
And while &lt;code&gt;swiper&lt;/code&gt; solved the problem of &lt;a href=&quot;https://github.com/ShingoFukuyama/helm-swoop&quot;&gt;helm-swoop&lt;/a&gt;
being awkward for me to use, &lt;code&gt;swiper&lt;/code&gt;&amp;#39;s code itself is pretty awkward, since even after using &lt;code&gt;helm&lt;/code&gt;
a dozen times in my packages, I&amp;#39;m still not well-versed in its internals.&lt;/p&gt;

&lt;p&gt;And, apparently, there are people who don&amp;#39;t like &lt;code&gt;helm&lt;/code&gt; because it updates a lot.  I don&amp;#39;t know if
it counts as a viable complaint, but I do agree that the &lt;code&gt;helm&lt;/code&gt; update time is quite long.  So I
wrote down an alternative completion back end for &lt;code&gt;swiper&lt;/code&gt;. It looks quite similar to
&lt;code&gt;ido-vertical-mode&lt;/code&gt;, although it is completely unrelated to &lt;code&gt;ido&lt;/code&gt;. In fact, the matching algorithm
currently is similar to &lt;code&gt;helm-match-plugin&lt;/code&gt;: &lt;code&gt;&amp;quot;for example&amp;quot;&lt;/code&gt; is transformed into
&lt;code&gt;&amp;quot;\\(for\\).*\\(example\\)&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/swiper-ivy.png&quot; alt=&quot;swiper-ivy.png&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-details&quot;&gt;The Details&lt;/h2&gt;

&lt;p&gt;Currently, in the &lt;code&gt;ivy&lt;/code&gt; version of &lt;code&gt;swiper&lt;/code&gt; only the anchoring algorithm is missing.  Anchoring is
what I call the process of selecting a close candidate when the number of candidates changes.  It
seems that &lt;code&gt;helm&lt;/code&gt; doesn&amp;#39;t implement an anchoring algorithm, so both &lt;code&gt;helm-swoop&lt;/code&gt; and &lt;code&gt;swiper&lt;/code&gt;
implement their own. I don&amp;#39;t know how easy it would be to write down the proper generic thing, my
current implementation for the &lt;code&gt;helm&lt;/code&gt; version of &lt;code&gt;swiper&lt;/code&gt; is quite hacky.&lt;/p&gt;

&lt;p&gt;Just to explain to you what needs to be done. Suppose there&amp;#39;s an input &amp;quot;ab&amp;quot; that matches 50
candidates, and the candidate number 42 is the current one. Now, if the user types one char to make
the input into &amp;quot;abc&amp;quot;, the number of candidates has changed to 10, and the candidate that was current
previously doesn&amp;#39;t match any more. It is up to the matcher code to decide which of the 10 candidates
has to be current now. Usually it doesn&amp;#39;t matter much, but in the case of &lt;code&gt;swiper&lt;/code&gt; it matters since
the point will be moved to the current candidate in the original window.&lt;/p&gt;

&lt;p&gt;In any case, there&amp;#39;s still a lot of things that have to be done for &lt;code&gt;ivy&lt;/code&gt;, but I think that
it&amp;#39;s quite usable now. Actually, I&amp;#39;ve already added it to my bindings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-s&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;swiper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/ivy-swiper-1.png&quot; alt=&quot;ivy-swiper-1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;#39;s an example of completion in &lt;code&gt;dired&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/ivy-swiper-2.png&quot; alt=&quot;ivy-swiper-2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;You need to have Emacs 24.4 in order to get a nicer highlight in the minibuffer that uses
&lt;code&gt;add-face-text-property&lt;/code&gt; instead of the old &lt;code&gt;propertize&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s a custom variable that decides the height of the minibuffer window, you can set it as you
like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ivy-height&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Number of lines for the minibuffer window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Give the new back end &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;a go&lt;/a&gt;, see if you like it. It looks quite pretty and minimalist to me, but I&amp;#39;m
biased since I made it.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ace-window display mode</title>
   <link href="http://oremacs.com/2015/03/12/ace-window-display-mode/"/>
   <updated>2015-03-12T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/12/ace-window-display-mode</id>
   <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Today, I&amp;#39;ll describe a quite recent addition to &lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt;,
which comes from the idea by &lt;a href=&quot;https://github.com/deftsp&quot;&gt;@deftsp&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why not show the &lt;code&gt;ace-window&lt;/code&gt; dispatch keys in the mode line all the time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Certainly, there&amp;#39;s no reason not to have this option, and it actually makes the whole interface
better, since it becomes less feedback-based:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You glance at a window that you want.&lt;/li&gt;
&lt;li&gt;You know which key you have to press &lt;em&gt;before&lt;/em&gt; you call &lt;code&gt;ace-window&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You make a single-step call instead of:

&lt;ul&gt;
&lt;li&gt;press &lt;code&gt;ace-window&lt;/code&gt; shortcut,&lt;/li&gt;
&lt;li&gt;read the dispatch char,&lt;/li&gt;
&lt;li&gt;press the dispatch char.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The feature is implemented as &lt;code&gt;ace-window-display-mode&lt;/code&gt; - a minor mode that you can toggle on or
off whenever you feel like it.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/ace-window-display-mode.png&quot; alt=&quot;ace-window-display-mode.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I&amp;#39;ve made &lt;code&gt;aw-keys&lt;/code&gt; list short on purpose, just to show you that the full path
will be displayed. See, for instance, the &lt;code&gt;*scratch*&lt;/code&gt; window: its path is &lt;code&gt;gf&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;Since the implementation is quite short, I&amp;#39;ll post it here and go over a few things that might
interest people who write Elisp (on some level, please don&amp;#39;t mock me for being obvious).&lt;/p&gt;

&lt;p&gt;As per request of a curious reader, I&amp;#39;ve updated the code with the comments from below.  Don&amp;#39;t try
this at home, excessive commenting is bad style.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; Something that modifies the Emacs behavior should&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; preferrably be implemented as a minor mode.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;define-minor-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window-display-mode&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Minor mode for showing the ace window key in the mode line.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; And since this minor mode isn&amp;#39;t tied to a particular&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; buffer, I declare it as global.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; An interesting quirk is that I have to put *something*&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; between the docstring and the body, otherwise it won&amp;#39;t&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; work.&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:global&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; Dispatch on the variable symbol of the mode -&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; `ace-window-display-mode`.  `define-minor-mode&amp;#39; will&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; define both a variable and function symbol.&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window-display-mode&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; Update the window parameters&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw-update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; Since `mode-line-format&amp;#39; is a buffer-local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; variable, I set it with `set-default&amp;#39;, in order&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; for the change to not just happen in the current&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; buffer.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-default&lt;/span&gt;
         &lt;span class=&quot;ss&quot;&gt;&amp;#39;mode-line-format&lt;/span&gt;
         &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window-display-mode&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;window-parameter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selected-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                     &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;,@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default-value&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;mode-line-format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;force-mode-line-update&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; Each time a window is created or deleted, Emacs&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; will run the `window-configuration-change-hook&amp;#39; -&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;;; exactly what I need to update `mode-line-format&amp;#39;.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;window-configuration-change-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aw-update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-default&lt;/span&gt;
     &lt;span class=&quot;ss&quot;&gt;&amp;#39;mode-line-format&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;assq-delete-all&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-display-mode&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default-value&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;mode-line-format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remove-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;window-configuration-change-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aw-update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-update&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Update ace-window-path window parameter for all windows.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-traverse&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw-window-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;;; Use `set-window-parameter&amp;#39; to store a variable for&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;;; each window.  Buffer local variables would not work&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;;; here, since one buffer can be displayed in multiple&lt;/span&gt;
     &lt;span class=&quot;c1&quot;&gt;;; windows, and those would need a different key each.&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-window-parameter&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-path&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;propertize&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;ss&quot;&gt;&amp;#39;face&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aw-mode-line-face&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since I&amp;#39;m writing something that modifies Emacs behavior when it&amp;#39;s enabled, I first try to implement
it as a minor mode. And since this minor mode isn&amp;#39;t tied to a particular buffer, I declare it as
global.&lt;/p&gt;

&lt;p&gt;An interesting quirk is that I have to put &lt;em&gt;something&lt;/em&gt; between the docstring and the body, otherwise
it won&amp;#39;t work. In this case, I put &lt;code&gt;:global t&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, follows that standard dispatch on the variable symbol of the mode - &lt;code&gt;ace-window-display-mode&lt;/code&gt;.
The &lt;code&gt;define-minor-mode&lt;/code&gt; macro will make both variable and function definition for the symbol it&amp;#39;s
given:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the variable is used to check if the mode is on.&lt;/li&gt;
&lt;li&gt;the function is used to turn the mode on / off.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the use of &lt;code&gt;assq-delete-all&lt;/code&gt;: this is for when some other package modifies the
&lt;code&gt;mode-line-format&lt;/code&gt; after &lt;code&gt;ace-window&lt;/code&gt; does. In that case, &lt;code&gt;ace-window&lt;/code&gt;&amp;#39;s entry wouldn&amp;#39;t be the first
one any more.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;mode-line-format&lt;/code&gt; is a buffer-local variable, I set it with &lt;code&gt;set-default&lt;/code&gt;, in order for the
change to not just happen in the current buffer.&lt;/p&gt;

&lt;p&gt;Each time a window is created or deleted, Emacs will run the &lt;code&gt;window-configuration-change-hook&lt;/code&gt; -
exactly what I need to update &lt;code&gt;mode-line-format&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One final trick is to use &lt;code&gt;set-window-parameter&lt;/code&gt; to store a variable for each window.  Buffer local
variables would not work here, since one buffer can be displayed in multiple windows, and those
would need a different key each.&lt;/p&gt;

&lt;p&gt;I really like how the &lt;code&gt;avy-tree&lt;/code&gt; / &lt;code&gt;avy-traverse&lt;/code&gt; interface ended up as: the same functions are used
for selecting window and setting &lt;code&gt;mode-line-format&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you enjoy the update, and keep those interesting ideas coming!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Some git / magit / github tricks</title>
   <link href="http://oremacs.com/2015/03/11/git-tricks/"/>
   <updated>2015-03-11T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/11/git-tricks</id>
   <content type="html">&lt;p&gt;Of course, I mean &lt;em&gt;illusions&lt;/em&gt; not tricks.&lt;/p&gt;

&lt;h2 id=&quot;illusion-1:-jump-to-a-magit-repository&quot;&gt;Illusion 1: jump to a magit repository&lt;/h2&gt;

&lt;p&gt;This is just a copy-paste of the code from
&lt;a href=&quot;http://iqbalansari.github.io/blog/2014/02/22/switching-repositories-with-magit/&quot;&gt;this post&lt;/a&gt; by
Iqbal Ansari.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;magit-repo-dirs&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;substring&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cl-remove-if-not&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-remote-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file-directory-p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/.git/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;projectile-relevant-known-projects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Basically it&amp;#39;s just taking &lt;code&gt;projectile&lt;/code&gt;&amp;#39;s record of known projects, and then filtering it by whether
that project has &lt;code&gt;.git&lt;/code&gt; in its root.&lt;/p&gt;

&lt;p&gt;To get a selection of repositories, call with &lt;kbd&gt;C-u M-x&lt;/kbd&gt; &lt;code&gt;magit-status&lt;/code&gt;.
And don&amp;#39;t forget to choose &lt;code&gt;ido&lt;/code&gt; completion:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;magit-completing-read-function&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;magit-ido-completing-read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s how I use this in a dispatch:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-helm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;helm&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;projectile-find-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-org-wiki&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wiki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-prefix-arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-interactively&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;magit-status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-locate&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;locate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;κ&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-helm/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re wondering what the letter in &lt;code&gt;global-set-key&lt;/code&gt; is, it&amp;#39;s the Greek letter &lt;code&gt;kappa&lt;/code&gt;
(see &lt;a href=&quot;http://oremacs.com/2015/02/14/semi-xmodmap/&quot;&gt;the post on my Xmodmap setup&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;illusion-2:-quickly-get-github-pull-requests-on-your-system&quot;&gt;Illusion 2: quickly get Github pull requests on your system&lt;/h2&gt;

&lt;p&gt;I learned this from some HN post that I can&amp;#39;t find now. Basically, you have to open
your &lt;code&gt;.git/config&lt;/code&gt; file and find the following contents:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[remote &amp;quot;origin&amp;quot;]
    url = git@github.com:abo-abo/hydra.git
    fetch = +refs/heads/*:refs/remotes/origin/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, modify it by adding one line (same for all repositories):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[remote &amp;quot;origin&amp;quot;]
    url = git@github.com:abo-abo/hydra.git
    fetch = +refs/heads/*:refs/remotes/origin/*
    fetch = +refs/pull/*/head:refs/pull/origin/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, if you issue:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git fetch --all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can operate on your pull requests like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git merge refs/pull/origin/20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;20&lt;/code&gt; is the issue number. And after merging I finally get access to &lt;code&gt;magit&lt;/code&gt; and &lt;code&gt;ediff&lt;/code&gt; and
all that jazz to see what the change is actually about.  Before I learned this, I had to manually
add remotes with &lt;code&gt;magit-add-remote&lt;/code&gt;.  And even before that, I was just clicking the merge button
after thoughtfully browsing the diff in Firefox. Trust me, &lt;code&gt;ediff&lt;/code&gt; is orders of magnitude better.&lt;/p&gt;

&lt;h2 id=&quot;illusion-3:-edit-a-github-wiki-in-emacs&quot;&gt;Illusion 3: edit a Github wiki in Emacs&lt;/h2&gt;

&lt;p&gt;Of course, I was always editing it in Emacs with
&lt;a href=&quot;https://addons.mozilla.org/en-us/firefox/addon/its-all-text/&quot;&gt;It&amp;#39;s All Text&lt;/a&gt; Firefox plugin.
But when I wanted to add an image, I actually read the manual and found out that you can simply
clone the wiki:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone https://github.com/abo-abo/hydra.wiki.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or with the ssh style, in order to not type the user name and password on pushing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;git clone git@github.com:abo-abo/hydra.wiki.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By the way, today I&amp;#39;ve made a very large overhaul of &lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra&lt;/a&gt;&amp;#39;s
README.md. So if you wanted to start writing your own hydras, but were hesitant because of the lack
of documentation, now is the time to start.&lt;/p&gt;

&lt;p&gt;If you figure out something that you think is worth documenting, you can immediately leave it on the
&lt;a href=&quot;https://github.com/abo-abo/hydra/wiki&quot;&gt;wiki&lt;/a&gt;.
By the way, here&amp;#39;s the syntax for including an image, if you were wondering:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;![hydra-helm](images/hydra-helm-unite.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You upload a file simply by adding it to the repository. Look Ma, no Imgur!&lt;/p&gt;

&lt;p&gt;This is actually an issue that I ran into, when I was less experienced. I included some one megabyte
gifs in the &lt;code&gt;lispy&lt;/code&gt; repository to refer to them in &lt;code&gt;README.md&lt;/code&gt;. Just a few of them resulted in a
very uncomfortable cloning time, which is an issue for Travis CI and, you know, humans.  Finally, I
had to resort to &lt;a href=&quot;http://rtyley.github.io/bfg-repo-cleaner/&quot;&gt;bfg-repo-cleaner&lt;/a&gt; to remove the gifs
from the repo history. It could all be avoided if I just posted all images on the wiki and linked to
them in &lt;code&gt;README.md&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you find these illusions useful to make you a better Emacs magician. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing Swiper</title>
   <link href="http://oremacs.com/2015/03/10/no-swiping/"/>
   <updated>2015-03-10T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/10/no-swiping</id>
   <content type="html">&lt;p&gt;I like the idea of
&lt;a href=&quot;https://github.com/ShingoFukuyama/helm-swoop&quot;&gt;helm-swoop&lt;/a&gt;, but it
somehow has minor annoyances that stop me from using it, like
automatic &lt;code&gt;helm-input&lt;/code&gt;, and especially the circular candidates. Or maybe it&amp;#39;s just NIH talking.
Anyway, I&amp;#39;m rolling my own, and it&amp;#39;s called &lt;a href=&quot;https://github.com/abo-abo/swiper&quot;&gt;swiper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/swiper.png&quot; alt=&quot;swiper.png&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;swiper-in-action&quot;&gt;Swiper in action&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/swiper-1.png&quot; alt=&quot;swiper-1.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the search string &lt;code&gt;&amp;quot;dec fun pro&amp;quot;&lt;/code&gt; is transformed into
a regex &lt;code&gt;&amp;quot;\\(dec\\).*\\(fun\\).*\\(pro\\)&amp;quot;&lt;/code&gt;, and each group in the
matches is highlighted with a different face.  This is quite similar
to the way &lt;code&gt;re-builder&lt;/code&gt; does it. In fact it&amp;#39;s possible to use &lt;code&gt;swiper&lt;/code&gt;
as a poor man&amp;#39;s &lt;code&gt;re-builder&lt;/code&gt; (since it matches only single lines).&lt;/p&gt;

&lt;p&gt;I&amp;#39;m doing my own matching this time, as the part-swapping behavior of
&lt;code&gt;helm-match-plugin&lt;/code&gt; is more annoying than useful.&lt;/p&gt;

&lt;p&gt;Also note that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The whole &lt;code&gt;*swiper*&lt;/code&gt; buffer is fully syntax highlighted.&lt;/li&gt;
&lt;li&gt;The appropriate parts of the matches are highlighted as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;swiper-in-a-dired-buffer&quot;&gt;Swiper in a &lt;code&gt;dired&lt;/code&gt; buffer&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s another screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/swiper-2.png&quot; alt=&quot;swiper-2.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;It appears that &lt;code&gt;helm&lt;/code&gt; is ignoring the display of file attributes, since they have
a sort of &lt;code&gt;invisible&lt;/code&gt; property set. I kind of like this behavior.&lt;/p&gt;

&lt;h2 id=&quot;see-how-the-faces-are-recycled&quot;&gt;See how the faces are recycled&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve defined only 4 faces currently (foxes aren&amp;#39;t unicorns, the
palette is quite limited), so they loop about if you have many groups:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/swiper-3.png&quot; alt=&quot;swiper-3.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;Yup, the technology is there. Although a &lt;code&gt;powerline&lt;/code&gt; theme for the
&lt;code&gt;helm&lt;/code&gt; mode line is still missing.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lispy point history</title>
   <link href="http://oremacs.com/2015/03/09/lispy-point-history/"/>
   <updated>2015-03-09T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/09/lispy-point-history</id>
   <content type="html">&lt;p&gt;It was kind of disappointing to summarize in
&lt;a href=&quot;/2015/03/08/lispy.0.24.0-is-out/&quot;&gt;the last post&lt;/a&gt;
that there weren&amp;#39;t many new features for
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy 0.24.0&lt;/a&gt;. So I thought long and hard and came up with something
quite obvious: since &lt;code&gt;lispy&lt;/code&gt; offers commands to quickly manipulate point and mark, it should offer one
to quickly restore them.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the bulk of the new code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Ring for point and mark position history.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy--remember&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Store the current point and mark in history.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--bounds-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-ref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-ref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-back&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Move point to a previous position&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zerop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;user-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;At beginning of point history&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-remove&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-pos-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--mark&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, I&amp;#39;m using &lt;code&gt;lispy-pos-ring&lt;/code&gt; made with &lt;code&gt;make-ring&lt;/code&gt; to store the
last 200 point and mark positions. In Elisp, a ring is basically a stack backed by a vector.
When the vector space overflows, the older stuff is overwritten.&lt;/p&gt;

&lt;p&gt;In this ring I store each time either the point, or a cons of the
point and mark if the region is active. This way possible to restore
the region even if it was deactivated several movement commands ago.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve put &lt;code&gt;lispy--remember&lt;/code&gt; into the most used navigation commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; - &lt;code&gt;lispy-down&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;k&lt;/kbd&gt; - &lt;code&gt;lispy-up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;h&lt;/kbd&gt; - &lt;code&gt;lispy-left&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;l&lt;/kbd&gt; - &lt;code&gt;lispy-right&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; - &lt;code&gt;lispy-flow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-mark-car&lt;/code&gt; (when the region is active)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;a&lt;/kbd&gt; - &lt;code&gt;lispy-ace-paren&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And &lt;code&gt;lispy-back&lt;/code&gt; is now bound to &lt;kbd&gt;b&lt;/kbd&gt;. The previous binding of
&lt;kbd&gt;b&lt;/kbd&gt; - &lt;code&gt;lispy-store-region-and-buffer&lt;/code&gt; is now bound to
&lt;kbd&gt;xB&lt;/kbd&gt; (quite close to &lt;kbd&gt;B&lt;/kbd&gt; - the binding for
&lt;code&gt;lispy-ediff-regions&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I really like the new command, it&amp;#39;s especially useful to reverse
&lt;kbd&gt;h&lt;/kbd&gt; and &lt;kbd&gt;l&lt;/kbd&gt;.  Previously, they could be reversed
with &lt;kbd&gt;f&lt;/kbd&gt;, but that can get annoying if you have to press it
many times. This results in a much more relaxed editing - I know that
whatever I press, I can restore the point position quickly if needed.&lt;/p&gt;

&lt;p&gt;This feature is added to the already present list of safeguards:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;k&lt;/kbd&gt; are guaranteed not to exit the parent list.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; and &lt;kbd&gt;&amp;lt;&lt;/kbd&gt; are guaranteed not to exit the parent list.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C&lt;/kbd&gt; reverses itself.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s a recipe to copy the third item of the current list and move
the point back: &lt;kbd&gt;4mnb&lt;/kbd&gt;. You can use it to copy a function&amp;#39;s
docstring if you&amp;#39;re in Elisp.  You&amp;#39;ll need &lt;kbd&gt;3mnb&lt;/kbd&gt; for
Clojure, since it weirdly has the docstring &lt;em&gt;before&lt;/em&gt; the arguments.  I
think it&amp;#39;s pretty cool: by typing &lt;kbd&gt;3mnb&lt;/kbd&gt; I&amp;#39;m basically
calling &lt;code&gt;(kill-new (caddr (current-sexp)))&lt;/code&gt; on my own code.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lispy 0.24.0 is out</title>
   <link href="http://oremacs.com/2015/03/08/lispy.0.24.0-is-out/"/>
   <updated>2015-03-08T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/08/lispy.0.24.0-is-out</id>
   <content type="html">&lt;p&gt;The last release was a month ago, and there have been 70 commits to
master since then.  If you&amp;#39;re not familiar with &lt;code&gt;lispy&lt;/code&gt;, see
&lt;a href=&quot;/2015/01/19/lispy.0.21.0-is-out/&quot;&gt;my intro post for version 0.21.0&lt;/a&gt;.
I&amp;#39;ll just copy &lt;a href=&quot;https://github.com/abo-abo/lispy/releases/tag/0.24.0&quot;&gt;the release notes&lt;/a&gt; here,
while adding a few things.&lt;/p&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;DEL&lt;/kbd&gt; behaves properly after a string and one space.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-k&lt;/kbd&gt; works better for expressions preceded with &amp;quot;#&amp;quot;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;3 &lt;/kbd&gt; should not add a space when there is one already.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;#&lt;/kbd&gt; will not add a space after a comma.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-j&lt;/kbd&gt; works better in comments after a quote.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lispy--eval-elisp-form&lt;/code&gt; first arg is now named &lt;code&gt;lispy-form&lt;/code&gt; instead of &lt;code&gt;form&lt;/code&gt;. It was impossible
to evaluate an unrelated &lt;code&gt;form&lt;/code&gt; variable with the previous behavior.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;F&lt;/kbd&gt; again works properly when jumping to a jar (e.g. to &lt;code&gt;defn&lt;/code&gt;) from Clojure source.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-k&lt;/kbd&gt; won&amp;#39;t call &lt;code&gt;delete-region&lt;/code&gt; in some obscure branches.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;P&lt;/kbd&gt; (&lt;code&gt;lispy-paste&lt;/code&gt;) will add a newline when called from start of line.  This way,
&lt;kbd&gt;nP&lt;/kbd&gt; becomes equivalent to &lt;kbd&gt;c&lt;/kbd&gt; (&lt;code&gt;lispy-clone&lt;/code&gt;). Of course, it&amp;#39;s more flexible: you
can do e.g. &lt;kbd&gt;nkP&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;xb&lt;/kbd&gt; (&lt;code&gt;lispy-bind-variable&lt;/code&gt;) now works on regions as well. Use it to bind the current
sexp or region as a let-bound variable: it will put you in &lt;code&gt;iedit&lt;/code&gt;. When you&amp;#39;re done with &lt;code&gt;iedit&lt;/code&gt;, press
&lt;kbd&gt;M-m&lt;/kbd&gt; (&lt;code&gt;lispy-mark-symbol&lt;/code&gt;) to exit &lt;code&gt;iedit&lt;/code&gt;. If you need to move the let binding around, use
a combination of &lt;kbd&gt;C&lt;/kbd&gt; (&lt;code&gt;lispy-convolute&lt;/code&gt;) and &lt;kbd&gt;h&lt;/kbd&gt; (&lt;code&gt;lispy-left&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt; will ignore &lt;code&gt;loaddefs.el&lt;/code&gt; for Elisp.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-m&lt;/kbd&gt; works better in unbalanced buffers, which should be an rare thing.&lt;/li&gt;
&lt;li&gt;add &lt;code&gt;defhydra&lt;/code&gt; to &lt;code&gt;lispy-tag-arity&lt;/code&gt;: now &lt;kbd&gt;g&lt;/kbd&gt; will recognize &lt;code&gt;defhydra&lt;/code&gt; statements.&lt;/li&gt;
&lt;li&gt;The tag logic was improved to do less parsing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lispy-outline&lt;/code&gt; was updated to match the standard &lt;code&gt;^;;;&lt;/code&gt; outline regex. Try pressing &lt;kbd&gt;I&lt;/kbd&gt;
in e.g. org.el, it&amp;#39;s quite beautiful.&lt;/li&gt;
&lt;li&gt;All &lt;code&gt;lispy-eval&lt;/code&gt; functions will preserve the match data.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; will delete the extra whitespace while slurping.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;undercover&lt;/code&gt;/Coveralls test coverage report.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;H&lt;/kbd&gt; (&lt;code&gt;lispy-ace-symbol-replace&lt;/code&gt;) is now a Hydra: type &lt;kbd&gt;h&lt;/kbd&gt; to delete more, type
&lt;kbd&gt;u&lt;/kbd&gt; to undo.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Q&lt;/kbd&gt; (&lt;code&gt;lispy-ace-char&lt;/code&gt;) now uses &lt;code&gt;avy&lt;/code&gt; to jump. This change allows to cover this
function with a test.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;p-can-now-iterate-dolist-variables-in-elisp.&quot;&gt;&lt;kbd&gt;p&lt;/kbd&gt; can now iterate &lt;code&gt;dolist&lt;/code&gt; variables in Elisp.&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cl&quot; data-lang=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;called range&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;i=%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pressing &lt;kbd&gt;p&lt;/kbd&gt; with point where &lt;code&gt;|&lt;/code&gt; is, will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;call &lt;code&gt;range&lt;/code&gt; and set &lt;code&gt;i&lt;/code&gt; to 1&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;i&lt;/code&gt; to 2&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;i&lt;/code&gt; to 3&lt;/li&gt;
&lt;li&gt;set &lt;code&gt;i&lt;/code&gt; to nil&lt;/li&gt;
&lt;li&gt;call &lt;code&gt;range&lt;/code&gt; and set &lt;code&gt;i&lt;/code&gt; to 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is another step toward &lt;code&gt;edebug&lt;/code&gt;-less debugging, adding to special behavior for &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;cond&lt;/code&gt;
and &lt;code&gt;labels&lt;/code&gt;. Remember that you can drop out of &lt;code&gt;edebug&lt;/code&gt; with &lt;kbd&gt;Z&lt;/kbd&gt; (&lt;code&gt;lispy-edebug-stop&lt;/code&gt;).
This function will take the current function arguments that &lt;code&gt;edebug&lt;/code&gt; provides, store them in
top-level, and exit &lt;code&gt;edebug&lt;/code&gt;.
This is really cool for setting up entry conditions for a function that you want to debug,
or even a function with an empty body that you want to write. Why am I so eager to exit &lt;code&gt;edebug&lt;/code&gt;?
Because it puts the code in read-only mode, which is quite restrictive.&lt;/p&gt;

&lt;h2 id=&quot;incompatible-changes&quot;&gt;Incompatible changes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lispy-helm-columns&lt;/code&gt; is now a list &lt;code&gt;&amp;#39;(60 80)&lt;/code&gt;. The first number is
the width of the tag name column, the second number is the width of
both tag name and tag file. The tag name column is left-aligned, while the file column is right-aligned.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;k&lt;/kbd&gt; should now move to outline when at
beginning of comment. The previous behavior was to look for the first
sexp in the direction. You can still do that with &lt;kbd&gt;f&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;I&lt;/kbd&gt; (&lt;code&gt;lispy-shiftab&lt;/code&gt;) is now a two-way cycle, instead of
three-way, like &lt;code&gt;org-mode&lt;/code&gt;.  The contents can be obtained with
&lt;kbd&gt;C-u I&lt;/kbd&gt; or &lt;kbd&gt;C-u C-TAB&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;It seems that &lt;code&gt;lispy&lt;/code&gt; is winding down feature-wise, which is a good
thing, because I&amp;#39;m almost out of keys - there&amp;#39;s only &lt;kbd&gt;Y&lt;/kbd&gt; and
&lt;kbd&gt;U&lt;/kbd&gt; left.&lt;/p&gt;

&lt;p&gt;Possible next steps would be to improve the test coverage (currently
48%) and the documentation.  Perhaps I&amp;#39;ll try to implement some
automation for generating
&lt;a href=&quot;http://oremacs.com/lispy/&quot;&gt;the function reference&lt;/a&gt;, or learn some
texinfo and write an actual manual, see how &lt;code&gt;ox-texinfo&lt;/code&gt; holds up.&lt;/p&gt;

&lt;p&gt;I hope that you&amp;#39;ll grow to enjoy &lt;code&gt;lispy&lt;/code&gt; as much as I do. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>org-mode block templates in Hydra</title>
   <link href="http://oremacs.com/2015/03/07/hydra-org-templates/"/>
   <updated>2015-03-07T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/07/hydra-org-templates</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a new Hydra for you:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-org-template&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:hint&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_c_enter  _q_uote    _L_aTeX:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_l_atex   _e_xample  _i_ndex:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_a_scii   _v_erse    _I_NCLUDE:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_s_rc     ^ ^        _H_TML:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_h_tml    ^ ^        _A_SCII:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;h&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;H&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;H&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;self-insert-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hot-expand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Expand org template.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-try-structure-completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I bind it for myself like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-org-template/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;self-insert-command&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that when I press &lt;kbd&gt;&amp;lt;&lt;/kbd&gt; from the start of the
line, a Hydra will be called instead of inserting &lt;code&gt;&amp;lt;&lt;/code&gt;, otherwise &lt;code&gt;&amp;lt;&lt;/code&gt;
will be inserted.&lt;/p&gt;

&lt;p&gt;As the default insert method for &lt;code&gt;org-mode&lt;/code&gt; blocks is already pretty
convenient, this Hydra is more of an illustration than anything,
especially of the new &lt;code&gt;:hint nil&lt;/code&gt; feature.&lt;/p&gt;

&lt;p&gt;Just to remind you, each head has four placeholders:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key binding&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;li&gt;hint&lt;/li&gt;
&lt;li&gt;plist&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a Hydra is active, it will show its doc in the echo area in the
bottom of the frame.  This doc is composed of two parts: the body doc
and the heads&amp;#39; doc.  The body doc you specify yourself, the heads&amp;#39; doc
is built by concatenating the key binding and the hint for each head
into a (single) line.&lt;/p&gt;

&lt;p&gt;If you don&amp;#39;t specify a hint for a head, it&amp;#39;s assumed to be &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;; this
head&amp;#39;s binding will still be in the heads&amp;#39; doc. If you don&amp;#39;t want a
head&amp;#39;s binding to be in the heads&amp;#39; doc, set the hint to nil.  This is
commonly done because a head is already documented in the body doc.
It can sometimes become tedious to set all the hints to nil, for
instance in the Hydra above, I would need to do it 13 times. Hence
the &lt;code&gt;:hint nil&lt;/code&gt; shortcut.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-org-template.png&quot; alt=&quot;hydra-org-template.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not a Scrabble pro: &lt;code&gt;clash&lt;/code&gt; for word score 10 is my result, although
a longer word would break the nice column layout.
The first two columns contain &lt;code&gt;begin&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; templates, while the
third one contains the one-line templates.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Select the previous window with ace-window</title>
   <link href="http://oremacs.com/2015/03/06/ace-window-toggle/"/>
   <updated>2015-03-06T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/06/ace-window-toggle</id>
   <content type="html">&lt;p&gt;It&amp;#39;s strange that I haven&amp;#39;t implemented this feature before, as it&amp;#39;s
quite a common usage pattern:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You select a window with &lt;code&gt;ace-window&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You do some stuff there.&lt;/li&gt;
&lt;li&gt;You want to return the previous window.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;aw-flip-window&quot;&gt;&lt;code&gt;aw-flip-window&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;In the step 3, you have to go though the whole &lt;code&gt;aw-keys&lt;/code&gt; dispatch,
only to select a window which can be pre-determined. Not any more, if
you call &lt;code&gt;aw-flip-window&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-flip-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Switch to the window you were previously in.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw-switch-to-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw--pop-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now, you could have a grid of 10 windows, select one of them with
&lt;code&gt;ace-window&lt;/code&gt;, and switch indefinitely between it and the previous
window with &lt;code&gt;ace-flip-window&lt;/code&gt;, while ignoring the other 8.&lt;/p&gt;

&lt;h2 id=&quot;aw-ignored-buffers&quot;&gt;&lt;code&gt;aw-ignored-buffers&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Remember that if you have some window that you never want to switch to
with &lt;code&gt;ace-window&lt;/code&gt;, you can add it to &lt;code&gt;aw-ignored-buffers&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-ignored-buffers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*Calc Trail*&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*LV*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;List of buffers to ignore when selecting window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s not a big deal, but it&amp;#39;s convenient at least for this scenario:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I start with one active window.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;calc&lt;/code&gt;; now I have three windows.&lt;/li&gt;
&lt;li&gt;I can toggle back and forth between &lt;code&gt;calc&lt;/code&gt; and the main window with
&lt;code&gt;ace-window&lt;/code&gt; without having to type &lt;code&gt;aw-keys&lt;/code&gt;, since &lt;code&gt;*Calc Trail*&lt;/code&gt; is
ignored, so that makes only two total windows.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;selecting-last-window-during-the-ace-window-dispatch&quot;&gt;Selecting last window during the &lt;code&gt;ace-window&lt;/code&gt; dispatch&lt;/h2&gt;

&lt;p&gt;This is a really cool feature, in my opinion: for all three actions -
&lt;code&gt;aw-select-window&lt;/code&gt;, &lt;code&gt;aw-swap-window&lt;/code&gt;, and &lt;code&gt;aw-delete-window&lt;/code&gt;, you can
select the previous window as a target with the same key &lt;kbd&gt;n&lt;/kbd&gt;.
This is, of course, customizable:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-flip-keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Keys which should select the last window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sym&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sym&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw--flip-keys&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you could have a whole list of bindings that select the previous
window during the &lt;code&gt;aw-keys&lt;/code&gt; dispatch. This is cool because there&amp;#39;s no
visual feedback necessary, so this binding can be easily added to the
muscle memory. The bindings don&amp;#39;t necessarily need to be single keys,
anything with one chord, e.g. &lt;kbd&gt;C-f&lt;/kbd&gt;, is acceptable.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how I&amp;#39;ve set it up for myself:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ν&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-flip-keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ν&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I can select the previous window with &lt;kbd&gt;νν&lt;/kbd&gt; - a double call to &lt;code&gt;ace-window&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I can swap with the previous window with &lt;kbd&gt;ψνν&lt;/kbd&gt;, &lt;kbd&gt;ψ&lt;/kbd&gt; calls &lt;code&gt;universal-argument&lt;/code&gt; for me.&lt;/li&gt;
&lt;li&gt;I can delete the previous window with &lt;kbd&gt;ψψνν&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/luciferasm&quot;&gt;@luciferasm&lt;/a&gt; for the idea, I
hope you&amp;#39;ll enjoy the new feature.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Testing your .emacs sanity</title>
   <link href="http://oremacs.com/2015/03/05/testing-init-sanity/"/>
   <updated>2015-03-05T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/05/testing-init-sanity</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a little snippet that came up as a Stack Overflow answer once:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-test-emacs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;async-start&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-to-string&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;&amp;quot;emacs --batch --eval \&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;(condition-case e&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;    (progn&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      (load \\\&amp;quot;~/.emacs\\\&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;      (message \\\&amp;quot;-OK-\\\&amp;quot;))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  (error&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   (message \\\&amp;quot;ERROR!\\\&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;   (signal (car e) (cdr e))))\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-OK-&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;called-interactively-p&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;All is well&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*startup error*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search-backward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ERROR!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function will quietly run a batch Emacs with your current config
to see if it errors out or not.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in case that there were no start up errors, it will echo &amp;quot;All is well&amp;quot;&lt;/li&gt;
&lt;li&gt;when there&amp;#39;s an error, it will pop to a &lt;code&gt;*startup error*&lt;/code&gt; buffer with the error description&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The nice thing about this is that in case of an error you have a
functional Emacs to fix that error, since fixing errors with &lt;code&gt;emacs
-Q&lt;/code&gt; is quite painful.&lt;/p&gt;

&lt;p&gt;Another approach could be to just start a new Emacs instance, and
close the window in case there isn&amp;#39;t an error.  So all that the code
above does is automate closing the window (sort of, since the window
never opens). Still, I think it&amp;#39;s pretty cool. And you could attach it
to the &lt;code&gt;after-save-hook&lt;/code&gt; of your .emacs, or a timer.&lt;/p&gt;

&lt;p&gt;You could even configure Emacs to send you an email in case it notices
that there will be an error on the next start up. Or add the test to
&lt;code&gt;before-save-hook&lt;/code&gt; and abort the save in case it results in an
error. That&amp;#39;s some HAL 9000 level stuff right there:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#39;m sorry Dave, I&amp;#39;m afraid I can&amp;#39;t do that.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Eclipse theme</title>
   <link href="http://oremacs.com/2015/03/04/eclipse-theme/"/>
   <updated>2015-03-04T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/04/eclipse-theme</id>
   <content type="html">&lt;p&gt;I started using Emacs around 2010-2011 when I needed an environment
for C++ and LaTeX.  The default color theme was horrendous (it still
is), and I don&amp;#39;t fancy myself a designer, so I just copied a color
theme of the thing that I was using previously: Eclipse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/abo-abo/eclipse-theme&quot;&gt;This theme&lt;/a&gt; modifies almost
nothing except the font lock faces, and looks reasonable while called
with &lt;code&gt;-nw&lt;/code&gt;, although I don&amp;#39;t see why anyone wouldn&amp;#39;t want to take
advantage of what graphical Emacs has to offer.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a sampler:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/eclipse-theme.png&quot; alt=&quot;eclipse-theme.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s shown together with my fork of
&lt;a href=&quot;https://github.com/abo-abo/powerline&quot;&gt;powerline&lt;/a&gt;.  I&amp;#39;ll try to merge
it as a theme eventually, I&amp;#39;m delaying it because &lt;code&gt;powerline&lt;/code&gt; isn&amp;#39;t
very easy to understand/modify.&lt;/p&gt;

&lt;p&gt;Eclipse theme should be on MELPA soon, I hope you&amp;#39;ll enjoy it. I&amp;#39;ve
tried probably 30 themes on MELPA, but I just can&amp;#39;t part with
&lt;code&gt;eclipse-theme&lt;/code&gt;. I&amp;#39;m guessing that it&amp;#39;s a feeling that most theme creators share.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ace-window full path</title>
   <link href="http://oremacs.com/2015/03/03/ace-window-full-path/"/>
   <updated>2015-03-03T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/03/ace-window-full-path</id>
   <content type="html">&lt;p&gt;I just closed a really helpful
&lt;a href=&quot;https://github.com/abo-abo/ace-window/issues/21&quot;&gt;issue&lt;/a&gt; for
&lt;code&gt;ace-window&lt;/code&gt;.  Turns out that there&amp;#39;s a plugin for vim called
Easymotion that&amp;#39;s very similar to &lt;code&gt;ace-jump-mode&lt;/code&gt;.  And that plugin
doesn&amp;#39;t highlight the leading chars one by one, but instead gives them
all at once.  Which is a pretty good idea, since it&amp;#39;s more convenient
to read the whole path at once and type it in at once rather than:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;read one char&lt;/li&gt;
&lt;li&gt;type one char&lt;/li&gt;
&lt;li&gt;read one more char&lt;/li&gt;
&lt;li&gt;type one more char&lt;/li&gt;
&lt;li&gt;... (maybe more steps)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To turn on the new behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-leading-char-style&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Although this will only have an effect once you have more than 10 windows.
But this method really improves the functions from avy-jump.el.
I&amp;#39;ve added some more commands and renamed the old ones since yesterday.&lt;/p&gt;

&lt;h2 id=&quot;avy-jump-demos&quot;&gt;avy-jump demos&lt;/h2&gt;

&lt;h3 id=&quot;avi-goto-char-2&quot;&gt;&lt;code&gt;avi-goto-char-2&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s how I like to bind &lt;code&gt;avi-goto-char-2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avi-goto-char-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s the result of &lt;kbd&gt;C-&amp;#39; bu&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avi-goto-char-2.png&quot; alt=&quot;avi-goto-char-2&quot;&gt;&lt;/p&gt;

&lt;p&gt;As you can see, nothing is overwritten by the overlay - it&amp;#39;s appended
after the search chars. In the screenshot above, I have &lt;code&gt;avi-background&lt;/code&gt; at nil; you can set it to
t if you want a gray background.&lt;/p&gt;

&lt;h3 id=&quot;avi-goto-char&quot;&gt;&lt;code&gt;avi-goto-char&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;After binding &lt;code&gt;avi-goto-char&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;π&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avi-goto-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s the result of &lt;kbd&gt;π b&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avi-goto-char.png&quot; alt=&quot;avi-goto-char&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;avi-goto-line&quot;&gt;&lt;code&gt;avi-goto-line&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;After binding &lt;code&gt;avi-goto-line&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avi-goto-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s the result of &lt;kbd&gt;M-g f&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avi-goto-line.png&quot; alt=&quot;avi-goto-line&quot;&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve also added:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;avi-copy-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avi-move-line&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;avi-copy-region&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These functions use the method of &lt;code&gt;avi-goto-line&lt;/code&gt; to copy/move stuff.
It might be useful for line-based text.&lt;/p&gt;

&lt;h3 id=&quot;avi-goto-word-0&quot;&gt;&lt;code&gt;avi-goto-word-0&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s the simple definition and the binding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avi-goto-word-0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to a word start in current window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi-keys&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--regex-candidates&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b\\sw&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--goto&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--overlay-pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g e&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avi-goto-word-0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There might be quite a lot of candidates for this one, but there&amp;#39;s no call to &lt;code&gt;read-char&lt;/code&gt;.
Here&amp;#39;s what happens after &lt;kbd&gt;M-g e&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avi-goto-word-0.png&quot; alt=&quot;avi-goto-word-0&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;avi-goto-word-1&quot;&gt;&lt;code&gt;avi-goto-word-1&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s a version of it that reads one char:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avi-goto-word-1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to a word start in current window.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Read one char with which the word should start.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--regex-candidates&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
                      &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-char&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--goto&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avi--overlay-pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avi-goto-word-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s what happens after &lt;kbd&gt;M-g w b&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avi-goto-word-1.png&quot; alt=&quot;avi-goto-word-1&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Give the new functions a go and see if you like them. New ideas are
welcome, especially pertaining to ripping off vim plugins. I did the
vimtutor once, but I have no idea how vim plugins work. But it turns
out that I like Easymotion.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ace-window without ace</title>
   <link href="http://oremacs.com/2015/03/02/ace-window-without-ace/"/>
   <updated>2015-03-02T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/03/02/ace-window-without-ace</id>
   <content type="html">&lt;p&gt;Today, &lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; is dropping
the dependency on &lt;code&gt;ace-jump-mode&lt;/code&gt;. Most of the dependency was already
dropped in &lt;code&gt;0.7.0&lt;/code&gt;, when I had to fix &lt;code&gt;ace-window&lt;/code&gt; to work better with
&lt;code&gt;defhydra&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The change will not be user-visible, unless you relied on some
customizations of &lt;code&gt;ace-jump-mode&lt;/code&gt; to transfer to &lt;code&gt;ace-window&lt;/code&gt;. You&amp;#39;ll
be able to transfer your customizations to similarly named variables.&lt;/p&gt;

&lt;p&gt;The reason for the move is that, due to the implementation of
&lt;code&gt;ace-jump-mode&lt;/code&gt;, it&amp;#39;s hard to wrap its calls, since the function exits
before any of the red chars are selected by the user. Also,
&lt;code&gt;ace-jump-mode&lt;/code&gt; uses its own &lt;code&gt;defstruct&lt;/code&gt;s for candidates while I&amp;#39;d
rather have plain lists, but that&amp;#39;s a minor issue.&lt;/p&gt;

&lt;h2 id=&quot;new-back-end:-avy.el&quot;&gt;New back end: avy.el&lt;/h2&gt;

&lt;p&gt;I tried to pinpoint the most generic algorithm that &lt;code&gt;ace-jump-mode&lt;/code&gt; implements and wrote it down
in &lt;code&gt;avy&lt;/code&gt;. Here&amp;#39;s the core of the implementation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Distribute N in B terms in a balanced way.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;floor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;append&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-list&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-tree&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Coerce LST into a balanced tree.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The degree of the tree is the length of KEYS.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;KEYS are placed appropriately on internal nodes.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-labels&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cl-pairlis&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;leaf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copy-sequence&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;leaf&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-multipop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
                         &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nreverse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lst&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first function, &lt;code&gt;avy-subdiv&lt;/code&gt;, tries to split a number in terms of the base in a way that
the most leaves have the lowest level:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;=&amp;gt; (5 5 5 5 22)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;=&amp;gt; (4 6 16 16)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;=&amp;gt; (9 9 24)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-subdiv&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;=&amp;gt; (16 26)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s an example of what &lt;code&gt;avy-tree&lt;/code&gt; produces:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy-tree&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Acid green&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aero blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Almond&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Amaranth&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;Amber&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Amethyst&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Apple green&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aqua&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;Aquamarine&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Auburn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aureolin&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Azure&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;Beige&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bronze&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Burgundy&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Candy apple red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;=&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Acid green&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aero blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Almond&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Amaranth&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Amber&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Amethyst&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Apple green&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aqua&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aquamarine&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Auburn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Aureolin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Azure&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Beige&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Black&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bronze&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Burgundy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;leaf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Candy apple red&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think the library turned out to be pretty clean, since it knows
nothing of points, buffers or overlays, and imposes no restrictions on
the type of leaf items and keys.&lt;/p&gt;

&lt;h2 id=&quot;some-cool-avy-based-commands&quot;&gt;Some cool &lt;code&gt;avy&lt;/code&gt;-based commands&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll list them together with the code, so it&amp;#39;s easier to see what they do.
The basic customizable variable is this one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?k&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Keys for jumping.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that, while &lt;code&gt;ace-jump-mode&lt;/code&gt; has 52 selection chars by default, I
prefer to have only the 8 chars on the home row. This means that I&amp;#39;ll
usually have to go around one level deeper, but the characters are
easy to find and press.&lt;/p&gt;

&lt;h3 id=&quot;avy-jump-double-char&quot;&gt;&lt;code&gt;avy-jump-double-char&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-jump-double-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Read two chars and jump to them in current window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--regex-candidates&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-char&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char 1: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-char&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char 2: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selected-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--goto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one will read two chars and then offer avy-selection for the
matches. This is a pretty sensible approach for a pool of 8 keys,
since usually 3 chars total will be necessary, with the first two
being in natural succession.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a screenshot of me typing in a natural two-char sequence &amp;quot;do&amp;quot;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avy-jump-double-char.png&quot; alt=&quot;avy-jump-double-char&quot;&gt;&lt;/p&gt;

&lt;p&gt;As you see, with 8 keys, 8 candidates will have depth 1, and another 8
candidates will have depth 2. The sorting preference is for the first
candidates to have lower depth.&lt;/p&gt;

&lt;h3 id=&quot;avy-jump-line&quot;&gt;&lt;code&gt;avy-jump-line&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Elisp&quot; data-lang=&quot;Elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-jump-line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to a line start in current buffer.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;we&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;window-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;window-start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;selected-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
              &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nreverse&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--goto&lt;/span&gt;
                  &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is quite nice, since I always have less than &lt;code&gt;8*8=64&lt;/code&gt; lines in any window.
Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avy-jump-line.png&quot; alt=&quot;avy-jump-line&quot;&gt;&lt;/p&gt;

&lt;p&gt;I removed the gray background, since the leading chars are always in an expected position.&lt;/p&gt;

&lt;h3 id=&quot;avy-jump-isearch&quot;&gt;&lt;code&gt;avy-jump-isearch&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Saving the most clever one for last:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;avy-jump-isearch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to one of the current isearch candidates.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--regex-candidates&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isearch-string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;candidates&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;avy--goto&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;isearch-done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isearch-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;avy-jump-isearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t mind not being able to &lt;code&gt;isearch-forward-regexp&lt;/code&gt; for a single
quote without using &lt;kbd&gt;C-q&lt;/kbd&gt; (&lt;code&gt;quoted-insert&lt;/code&gt;).  In return, I
get the ability to &lt;em&gt;very&lt;/em&gt; quickly jump to a search candidate on
screen. I like this command the most. In case when there&amp;#39;s only one match, it&amp;#39;s a faster way
to call &lt;code&gt;isearch-done&lt;/code&gt; (than &lt;kbd&gt;C-m&lt;/kbd&gt;).
Here&amp;#39;s the result of &lt;kbd&gt;C-s&lt;/kbd&gt; &lt;code&gt;sen&lt;/code&gt; &lt;kbd&gt;&amp;#39;&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/avy-jump-isearch.png&quot; alt=&quot;avy-jump-isearch&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve used the new functionality for a few days already, so it
shouldn&amp;#39;t be fragile. If the newest MELPA version bugs out for you,
you can fall back to version &lt;code&gt;0.7.1&lt;/code&gt; on
&lt;a href=&quot;http://stable.melpa.org/#/ace-window&quot;&gt;MELPA Stable&lt;/a&gt; and post
&lt;a href=&quot;https://github.com/abo-abo/ace-window/issues&quot;&gt;an issue&lt;/a&gt;.  Finally, I
hope that some people will take advantage of avy.el simplicity and
come up with some cool new commands to share with me. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra-repeat</title>
   <link href="http://oremacs.com/2015/02/28/hydra-repeat/"/>
   <updated>2015-02-28T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/28/hydra-repeat</id>
   <content type="html">&lt;p&gt;Did you know that you can repeat the most recent Emacs command with &lt;code&gt;repeat&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Repeat most recently executed command.
If REPEAT-ARG is non-nil (interactively, with a prefix argument),
supply a prefix argument to that command.  Otherwise, give the
command the same prefix argument it was given before, if any.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The default binding to repeat is &lt;kbd&gt;C-x z&lt;/kbd&gt;. You can then
continue with just &lt;kbd&gt;z&lt;/kbd&gt;: &lt;kbd&gt;C-x zzzzzzzz&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately, since &lt;code&gt;defhydra&lt;/code&gt; defines new command names based on the
ones that you give it, passing &lt;code&gt;repeat&lt;/code&gt; as one of the heads will not
work. So I&amp;#39;ve added &lt;code&gt;hydra-repeat&lt;/code&gt; that&amp;#39;s supposed to work in the same way.&lt;/p&gt;

&lt;p&gt;So now, I can define a Hydra like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-vi/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And if I press &lt;kbd&gt;C-v 4l..&lt;/kbd&gt;, it will result in movement forward (&lt;code&gt;forward-char&lt;/code&gt;) by 4 chars 3 times:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;first time from &lt;kbd&gt;4l&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;other two times, with the same prefix 4, from &lt;kbd&gt;..&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Customizing ace-window leading char</title>
   <link href="http://oremacs.com/2015/02/27/ace-window-leading-char/"/>
   <updated>2015-02-27T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/27/ace-window-leading-char</id>
   <content type="html">&lt;p&gt;With a recent change, it&amp;#39;s now possible to customize
&lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;custom-set-faces&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw-leading-char-face&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:inherit&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-jump-face-foreground&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:height&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how it will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/ace-window-lead.png&quot; alt=&quot;ace-window-lead.png&quot;&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s slightly annoying that the buffer contents have to shift to
accommodate for a larger character, but there&amp;#39;s no way around it.
Besides, you can customize the face features other than height, like
foreground and background colors etc.&lt;/p&gt;

&lt;p&gt;Note that in the screenshot, I&amp;#39;m using my usual &lt;code&gt;ace-window&lt;/code&gt; setup,
i.e. home row keys and no background:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:init&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-keys&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?s&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?f&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?g&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?h&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?j&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?k&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw-background&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Compilation-style check-declare-file</title>
   <link href="http://oremacs.com/2015/02/26/compilation-check-declare/"/>
   <updated>2015-02-26T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/26/compilation-check-declare</id>
   <content type="html">&lt;p&gt;As a follow-up to my older post on &lt;a href=&quot;/2015/02/13/elisp-linting/&quot;&gt;Elisp linting options&lt;/a&gt;,
I&amp;#39;ve made &lt;code&gt;check-declare-file&lt;/code&gt; and &lt;code&gt;check-declare-directory&lt;/code&gt; give out warnings similar to those
that e.g. &lt;code&gt;byte-compile-file&lt;/code&gt; gives:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;each warning now has a location in a file-line-column format&lt;/li&gt;
&lt;li&gt;you can click on the link to jump to the warning location&lt;/li&gt;
&lt;li&gt;&lt;code&gt;first-error&lt;/code&gt; / &lt;code&gt;next-error&lt;/code&gt; / &lt;code&gt;previous-error&lt;/code&gt; work as well&lt;/li&gt;
&lt;li&gt;the warning line blinks momentarily with each jump&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s how it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/check-declare.png&quot; alt=&quot;check-declare&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can already use this feature if you&amp;#39;re on Emacs trunk, otherwise
you&amp;#39;ll have to wait for 25.1 to come out.&lt;/p&gt;

&lt;p&gt;There&amp;#39;s also a new custom variable that you can set to get a more strict check:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;check-declare-ext-errors&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unless you set it, the standard behavior is to issue a &lt;code&gt;&amp;quot;skipping
external file&amp;quot;&lt;/code&gt; message when checking a statement like the one above.
The reason is that the external package might not be loaded or
something.  As long as I&amp;#39;m checking, I prefer to check everything, so
there&amp;#39;s no reason not to have &lt;code&gt;check-declare-ext-errors&lt;/code&gt; always true.&lt;/p&gt;

&lt;h2 id=&quot;a-trick-to-actually-load-slime-repl&quot;&gt;A trick to actually load &lt;code&gt;slime-repl&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s the Makefile target for &lt;code&gt;check-declare&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;check-declare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -l check-declare.elt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here are the contents of check-declare.elt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;check-declare-ext-errors&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lispy.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;lispy-inline.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-clojure.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-scheme.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-lisp.el&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-to-list&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;load-path&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file-name-directory&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;locate-library&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;slime&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;contrib/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;slime-repl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;check-declare-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, I first find where slime.el is located using &lt;code&gt;locate-library&lt;/code&gt;, and then add the
contrib sub-directory to the &lt;code&gt;load-path&lt;/code&gt;. After this, it&amp;#39;s finally possible to &lt;code&gt;(require &amp;#39;slime-repl)&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rectangle-mode Hydra</title>
   <link href="http://oremacs.com/2015/02/25/rectangle-hydra/"/>
   <updated>2015-02-25T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/25/rectangle-hydra</id>
   <content type="html">&lt;p&gt;Today, I&amp;#39;ll show a very useful hydra that I found yesterday on the
&lt;a href=&quot;https://github.com/abo-abo/hydra/wiki/Rectangle-Operations&quot;&gt;hydra wiki&lt;/a&gt;.
The idea is by &lt;a href=&quot;https://github.com/zhaojiangbin&quot;&gt;@zhaojiangbin&lt;/a&gt;, I&amp;#39;ve
made some minor changes to get the arrows to work the way that I like,
and made all keys into plain letters.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-ex-point-mark&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;rectangle-mark-mode&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exchange-point-and-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rectangle-mark-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-rectangle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:body-pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rectangle-mark-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pink&lt;/span&gt;
                           &lt;span class=&quot;nb&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  ^_k_^     _d_elete    _s_tring     |\\     _,,,--,,_&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_h_   _l_   _o_k        _y_ank       /,`.-&amp;#39;`&amp;#39;   ._  \-;;,_&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  ^_j_^     _n_ew-copy  _r_eset     |,4-  ) )_   .;.(  `&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;^^^^        _e_xchange  _u_ndo     &amp;#39;---&amp;#39;&amp;#39;(_/._)-&amp;#39;(_\_)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;^^^^        ^ ^         _p_aste&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-ex-point-mark&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;copy-rectangle-as-kill&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete-rectangle&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rectangle-mark-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;yank-rectangle&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;undo&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string-rectangle&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kill-rectangle&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-x SPC&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-rectangle/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There was a lot of screen estate left over, so I added some ASCII-art. I wanted something
related to syrup, or at least pancakes, but instead I found a cat. Apparently, it&amp;#39;s very
easy to find pictures of cats on the internet. Who knew.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how it looks like in-action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-rectangle.png&quot; alt=&quot;hydra-rectangle&quot;&gt;&lt;/p&gt;

&lt;p&gt;The pink variation is pretty useful here, since it doesn&amp;#39;t get in the
way of e.g. &lt;kbd&gt;DEL&lt;/kbd&gt; or &lt;kbd&gt;C-n&lt;/kbd&gt; or &lt;kbd&gt;C-e&lt;/kbd&gt; or inserting spaces.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been using it today for editing some table data in &lt;code&gt;org-mode&lt;/code&gt;,
and it feels pretty efficient.&lt;/p&gt;

&lt;h2 id=&quot;some-explanations&quot;&gt;Some explanations&lt;/h2&gt;

&lt;p&gt;What does what:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;d&lt;/kbd&gt; deletes rectangle; it&amp;#39;s similar to &lt;kbd&gt;C-d&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;n&lt;/kbd&gt; copies rectangle; it&amp;#39;s similar to &lt;kbd&gt;M-w&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;o&lt;/kbd&gt; exits; it&amp;#39;s very easy to press.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;e&lt;/kbd&gt; exchanges the point and mark; it&amp;#39;s also quite useful to re-activate the region
if you disabled it with &lt;kbd&gt;n&lt;/kbd&gt; or &lt;kbd&gt;r&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt; fills the selected rectangle with a string.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;y&lt;/kbd&gt; yanks the rectangle that you saved before with &lt;kbd&gt;n&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt; deactivates or activates the rectangle at point.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;u&lt;/kbd&gt; calls &lt;code&gt;undo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;p&lt;/kbd&gt; kills the rectangle; it&amp;#39;s similar to &lt;kbd&gt;C-w&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Profile your Emacs start-up time</title>
   <link href="http://oremacs.com/2015/02/24/emacs-speed-test/"/>
   <updated>2015-02-24T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/24/emacs-speed-test</id>
   <content type="html">&lt;p&gt;I bet I could compete for the shortest &lt;code&gt;~/.emacs&lt;/code&gt; ever:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(load &amp;quot;~/Dropbox/source/site-lisp/init&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it being one line doesn&amp;#39;t make it start up any faster.
Here&amp;#39;s what I have in my Makefile beside &lt;code&gt;init.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    emacs -Q -l git/profile-dotemacs/profile-dotemacs.el &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --eval &lt;span class=&quot;s2&quot;&gt;&amp;quot;(setq profile-dotemacs-file \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;        (setq load-file-name \&amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;abspath init.el&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;\&amp;quot;))&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    -f profile-dotemacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The package that I&amp;#39;m using,
&lt;a href=&quot;http://randomsample.de/profile-dotemacs.el&quot;&gt;profile-dotemacs.el&lt;/a&gt;
comes from David Engster, one of the major contributors to CEDET, so
you know it&amp;#39;s got to be good.  Once you launch it as I showed above,
it will give you the times that various sections took to load in an
overlay.&lt;/p&gt;

&lt;p&gt;On very sunny days I can almost get Emacs to start under one second,
although when I checked just now, it turned out to be &lt;code&gt;1.20s&lt;/code&gt;.  I
value short start up time very highly, since due to my messing with
Elisp, the Emacs global state can become so messed up that it&amp;#39;s a lot
faster to just restart it, rather than spend 10 minutes surgically
restoring the state. And, of course, it&amp;#39;s a bonus for using Emacs on a
laptop, which I do at home.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve used two methods to shorten the boot time, I&amp;#39;ll describe them below.&lt;/p&gt;

&lt;h2 id=&quot;use-package-:idle-option&quot;&gt;&lt;code&gt;use-package&lt;/code&gt; &lt;code&gt;:idle&lt;/code&gt; option&lt;/h2&gt;

&lt;p&gt;This one is a big time saver, since &lt;code&gt;org-mode&lt;/code&gt; just takes so long to load:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:defer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:idle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh/org&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m cautious not to abuse &lt;code&gt;:idle&lt;/code&gt;, since if it happens that I start
Emacs and start frantically typing all over the place, Emacs will
never get to be idle and the &lt;code&gt;:idle&lt;/code&gt; statements won&amp;#39;t load.  So I only
use it for &lt;code&gt;org&lt;/code&gt; and one or two other things.&lt;/p&gt;

&lt;h2 id=&quot;autoloading-stuff&quot;&gt;autoloading stuff&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s some helper code for this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;update-all-autoloads&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;generated-autoload-file&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;loaddefs.el&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;file-exists-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;generated-autoload-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file-noselect&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;generated-autoload-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;update-directory-autoloads&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oleh&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oleh/modes&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;emacs-d&lt;/code&gt; is the directory of my &lt;code&gt;init.el&lt;/code&gt;.
The directory &lt;code&gt;modes&lt;/code&gt; contains 44 Elisp files for each major mode or package that I customize.&lt;/p&gt;

&lt;p&gt;For instance, here are the contents of &lt;code&gt;Info.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ora-para-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ora-para-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;recenter-top-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;forward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;beginning-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;end-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;beginning-of-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;E&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;end-of-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-Info-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is one of the simpler ones, I think it would take around a week
of posts to cover what I have in &lt;code&gt;magit.el&lt;/code&gt;. The file &lt;code&gt;Info.el&lt;/code&gt; never
gets loaded until I open a buffer in &lt;code&gt;Info-mode&lt;/code&gt;.
Here&amp;#39;s what gets loaded every time:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;emacs-d&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;loaddefs.el&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;Info-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-Info-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My &lt;code&gt;loaddefs.el&lt;/code&gt; is just over 1000 lines and is automatically
generated by &lt;code&gt;update-all-autoloads&lt;/code&gt;. And here are the lines in
&lt;code&gt;loaddefs.el&lt;/code&gt; responsible for loading &lt;code&gt;Info.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;autoload&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-Info-hook&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;oleh/modes/Info&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&lt;/span&gt;


&lt;span class=&quot;s&quot;&gt;\(fn)&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So the statements above are cheap to load.  Actually, the largest
chunk of my start up time, 28 percent, is taken by:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eclipse-theme&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t know why it takes so long to call &lt;code&gt;custom-theme-set-faces&lt;/code&gt;, it&amp;#39;s a mystery.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra 0.11.0 is out</title>
   <link href="http://oremacs.com/2015/02/23/hydra-0.11.0/"/>
   <updated>2015-02-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/23/hydra-0.11.0</id>
   <content type="html">&lt;p&gt;As usual, I&amp;#39;ll just re-state the
&lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.11.0&quot;&gt;release notes&lt;/a&gt;
and add some more notes in the end.&lt;/p&gt;

&lt;h2 id=&quot;fixes&quot;&gt;Fixes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs 24.3 (and maybe earlier versions) compatibility added&lt;/li&gt;
&lt;li&gt;(hydra-cleanup): Should not delete buffer first when window is dedicated.&lt;/li&gt;
&lt;li&gt;(lv-message): Should not deactivate mark.&lt;/li&gt;
&lt;li&gt;quit signals are intercepted, so that proper clean-up is done.&lt;/li&gt;
&lt;li&gt;no defuns with the same name will be generated in case some heads&amp;#39; cmd parts coincide&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New Features&lt;/h2&gt;

&lt;h3 id=&quot;pink-body-color&quot;&gt;Pink body color&lt;/h3&gt;

&lt;p&gt;When body color is pink, and hydra intercepts a binding which isn&amp;#39;t a head, instead of quitting the
hydra and executing the binding (default red behavior), it will execute the binding and &lt;strong&gt;not quit&lt;/strong&gt;
the hydra. This type of hydra is very similar to &lt;code&gt;define-minor-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So now, pink and amaranth are body colors that are a flavor of the default red that, instead of
quitting when a non-head binding is intercepted, respectively run the binding or issue a warning.&lt;/p&gt;

&lt;h3 id=&quot;teal-body-color&quot;&gt;Teal body color&lt;/h3&gt;

&lt;p&gt;Teal color behaves similarly to amaranth (issues a warning when intercepting foreign bindings),
but the default behavior for each head is to quit.&lt;/p&gt;

&lt;p&gt;The following evaluates to true:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amaranth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;teal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if you want to write less, use teal color in this case.&lt;/p&gt;

&lt;h3 id=&quot;alternative-color-less-syntax&quot;&gt;Alternative color-less syntax&lt;/h3&gt;

&lt;p&gt;The color syntax is working quite well, since I was able to keep an almost full backward-compatibility:
once you pinpoint a color it will have that behavior, all the new behaviors will be released under a new color.&lt;/p&gt;

&lt;p&gt;Some might prefer an alternative set of switches rather than colors. New compat switches are:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;- &amp;quot;:exit nil&amp;quot; for &amp;quot;:color red&amp;quot;; You don&amp;#39;t have to specify either
  option in the body, since they are the default behavior that was
  available on Hydra release
- &amp;quot;:exit t&amp;quot; for &amp;quot;:color blue&amp;quot;
- &amp;quot;:foreign-keys warn&amp;quot; for &amp;quot;:color amaranth&amp;quot;
- &amp;quot;:foreign-keys warn :exit t&amp;quot; for &amp;quot;:color teal&amp;quot;
- &amp;quot;:foreign-keys run&amp;quot; for &amp;quot;:color pink&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The property &lt;code&gt;:exit&lt;/code&gt; can be inherited and overridden in the same way as &lt;code&gt;:color&lt;/code&gt; red or blue.&lt;/p&gt;

&lt;p&gt;The following evaluates to true:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following two are exactly the same as the two above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;macroexpand&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-a&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun-f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;ruby-style-string-interpolation-in-docstrings&quot;&gt;Ruby-style string interpolation in docstrings&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-marked-items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Number of marked items: %(length (dired-get-marked-files))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Auto-revert mode is:    %`auto-revert-mode&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mark&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To enable this behavior, the docstring has to start with a newline (which will be stripped).  This
makes sense, since you usually want to align extensive docstrings, like I did this one.  The escape
syntax for variables is such that you can auto-complete them with &lt;code&gt;company-mode&lt;/code&gt;.  Both variables
and sexps can use &lt;code&gt;format&lt;/code&gt; style width specifiers. See the documentation of &lt;code&gt;format&lt;/code&gt; for more
details.&lt;/p&gt;

&lt;h3 id=&quot;examples-7-9-added-to-hydra-examples.el&quot;&gt;Examples 7-9 added to hydra-examples.el&lt;/h3&gt;

&lt;p&gt;These examples explain Ruby-style interpolation.&lt;/p&gt;

&lt;h3 id=&quot;updated-faces&quot;&gt;Updated faces&lt;/h3&gt;

&lt;p&gt;I&amp;#39;ve updated each face to match their color by default. Remember, that you can customize each
face interactively with &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;customize-group&lt;/code&gt; &lt;code&gt;hydra&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;alternative-grey-scale-or-custom-faces&quot;&gt;Alternative grey-scale or custom faces&lt;/h3&gt;

&lt;p&gt;If you don&amp;#39;t want colors for some reason, you can customize &lt;code&gt;hydra-fontify-head-function&lt;/code&gt; to your
taste.&lt;/p&gt;

&lt;p&gt;As an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-fontify-head-function&lt;/span&gt;
      &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-fontify-head-greyscale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function is already defined in hydra.el, but you could define a similar one on your own:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-fontify-head-greyscale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Produce a pretty string from HEAD and BODY.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;HEAD&amp;#39;s binding is returned as a string wrapped with [] or {}.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra--head-color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;[%s]&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&amp;quot;(%s)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;new-switch-:body-pre&quot;&gt;New switch :body-pre&lt;/h3&gt;

&lt;p&gt;This sexp or function will be prepended to the prefix/body function.
Here&amp;#39;s an example of use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi/init-pos&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:body-pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi/init-pos&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; arrows&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; exit points&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi/init-pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ins&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;C-p&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:exit&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, upon entering the hydra, the point position will be saved. And upon quitting, it will be
restored.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you&amp;#39;re enjoying the new updates as much as I do.
Since the last release, there are two new blog posts about using hydra that I&amp;#39;m aware of:
by &lt;a href=&quot;http://howardism.org/Technical/Emacs/lists-and-key-sequences.html&quot;&gt;Howard Abrams&lt;/a&gt; and
&lt;a href=&quot;http://kitchingroup.cheme.cmu.edu/blog/2015/02/22/org-mode-links-meet-hydra/&quot;&gt;John Kitchin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, &lt;a href=&quot;https://github.com/hura&quot;&gt;@hura&lt;/a&gt;,
&lt;a href=&quot;https://github.com/kaushalmodi&quot;&gt;@kaushalmodi&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/glucas&quot;&gt;@glucas&lt;/a&gt; have made some additions to the
&lt;a href=&quot;https://github.com/abo-abo/hydra/wiki&quot;&gt;Hydra wiki&lt;/a&gt;. Anyone is welcome
to share their useful hydras there. Thanks a lot and happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Saving match data in-between Elisp evals</title>
   <link href="http://oremacs.com/2015/02/22/saving-match-data/"/>
   <updated>2015-02-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/22/saving-match-data</id>
   <content type="html">&lt;p&gt;This is a new feature I&amp;#39;ve added recently to &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt;
that&amp;#39;s useful when debugging regex-related code.&lt;/p&gt;

&lt;p&gt;The gist of it is that the match data is a single global object in Emacs.
So if you call &lt;code&gt;string-match&lt;/code&gt; with your &lt;kbd&gt;C-x C-e&lt;/kbd&gt;, there&amp;#39;s no
guarantee that e.g. &lt;code&gt;match-beginning&lt;/code&gt; will return the proper thing with another &lt;kbd&gt;C-x C-e&lt;/kbd&gt;,
since any package running in your Emacs could mess with the match data (packages that use timers
or post-command hooks etc.).&lt;/p&gt;

&lt;p&gt;After getting annoyed by this a few times, I&amp;#39;ve finally added a
fail-safe to &lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;lispy-eval&lt;/code&gt;) and &lt;kbd&gt;p&lt;/kbd&gt;
(&lt;code&gt;lispy-eval-other-window&lt;/code&gt;). Here&amp;#39;s how it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-eval-match-data&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy--eval-elisp-form&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lexical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Eval FORM and return its value.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;If LEXICAL is t, evaluate using lexical scoping.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Restore and save `lispy-eval-match-data&amp;#39; appropriately,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;so that no other packages disturb the match data.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fset&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;\,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;identity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-match-data&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-eval-match-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lexical&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-eval-match-data&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fset&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;\,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There&amp;#39;s also a little dance of ignoring comma operators in the rare
case when I want to eval &lt;em&gt;inside&lt;/em&gt; a backquoted list.  The two
functions that you can take away from this exercise are &lt;code&gt;match-data&lt;/code&gt;
and &lt;code&gt;set-match-data&lt;/code&gt; which appropriately return and store a list of
integers. Keeping the string separate from the regex match is a neat
way to improve performance.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Embedding sexps in Hydra docstrings</title>
   <link href="http://oremacs.com/2015/02/21/hydra-docstring-sexp/"/>
   <updated>2015-02-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/21/hydra-docstring-sexp</id>
   <content type="html">&lt;p&gt;In &lt;a href=&quot;/2015/02/20/buffer-menu-hydra/&quot;&gt;yesterday&amp;#39;s post&lt;/a&gt;
I showed how to embed variable values into the docstring, among other
things. Today, I&amp;#39;ve extended this approach to work with s-expressions.
Here&amp;#39;s how it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-marked-items&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Number of marked items: %(length (dired-get-marked-files))&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mark&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This piece of code will remind you how many files you&amp;#39;ve marked so far each
time you press &lt;kbd&gt;m&lt;/kbd&gt;.
By the way, this is the 64th post on the blog; I found out by pressing
&lt;kbd&gt;tm&lt;/kbd&gt; in &lt;code&gt;dired&lt;/code&gt; buffer or the &lt;code&gt;_posts&lt;/code&gt; directory.
Also, I don&amp;#39;t think that I&amp;#39;ve showed passing &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; as the keyboard prefix parameter
before. Apparently, it works and just translates to this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-marked-items/dired-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s how it looks like:
&lt;img src=&quot;/download/hydra-docstring-sexp.png&quot; alt=&quot;hydra-docstring-sexp&quot;&gt;&lt;/p&gt;

&lt;p&gt;There&amp;#39;s no need for a quitting key, it will auto-vanish when you press
anything other than &lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra for Buffer-menu</title>
   <link href="http://oremacs.com/2015/02/20/buffer-menu-hydra/"/>
   <updated>2015-02-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/20/buffer-menu-hydra</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a little code I&amp;#39;ve made today for &lt;code&gt;Buffer-menu-mode&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;small&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-buffer-menu&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  Mark               Unmark             Actions            Search&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;-------------------------------------------------------------------------&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_s_: save          _U_: unmark up     _b_: bury          _I_: isearch&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_d_: delete                           _g_: refresh       _O_: multi-occur&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_D_: delete up                        _T_: files only: %`Buffer-menu-files-only&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_~_: modified&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-mark&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-unmark&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;U&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-backup-unmark&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-delete&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;D&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-delete-backwards&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-save&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-not-modified&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-execute&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-bury&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;revert-buffer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-toggle-files-only&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;O&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-multi-occur&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-isearch-buffers&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;R&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-isearch-buffers-regexp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-select&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;select&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-other-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;other-window&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;quit-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-buffer-menu/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/small&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can change the color on the top to your taste: either red or pink or amaranth will work.
For extensive Hydras I tend to pick pink, since I don&amp;#39;t want to quit by accident, while still keeping
the non-head bindings. For small ones, red is better.
Here&amp;#39;s how the result looks like:
&lt;img src=&quot;/download/hydra-buffer-menu.png&quot; alt=&quot;hydra-buffer-menu&quot;&gt;&lt;/p&gt;

&lt;p&gt;You can install the cow with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;apt-get moo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I didn&amp;#39;t list it in the source, since Jekyll would wrap the long lines. The source is already in &lt;a href=&quot;https://github.com/abo-abo/hydra/blob/master/hydra-examples.el#L191&quot;&gt;hydra-examples.el&lt;/a&gt;.
You only have to:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Buffer-menu-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-buffer-menu/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;ve been hearing some opinions lately that the growing number of
Hydra options makes it intimidating or unclear. I hope that&amp;#39;s not the
majority&amp;#39;s feeling and that the gentle repetitiveness of this example
proves otherwise.&lt;/p&gt;

&lt;p&gt;On the other hand, I&amp;#39;ve started reading &amp;quot;The Reasoned Schemer&amp;quot; this
week. Now that&amp;#39;s intimidating.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Two new Hydra colors - pink and teal</title>
   <link href="http://oremacs.com/2015/02/19/hydra-colors-reloaded/"/>
   <updated>2015-02-19T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/19/hydra-colors-reloaded</id>
   <content type="html">&lt;p&gt;Two new colors are being added up to a total of five: red, blue,
amaranth, pink and teal.
I should carefully restate what they do to avoid confusion.&lt;/p&gt;

&lt;h2 id=&quot;the-three-rules-of-hydratics&quot;&gt;The three rules of Hydratics&lt;/h2&gt;

&lt;p&gt;&lt;strike&gt;1. A hydra may not injure a human being or, through inaction, allow a human being to come to harm.&lt;/strike&gt;&lt;/p&gt;

&lt;p&gt;Seriously though, see below.&lt;/p&gt;

&lt;h3 id=&quot;rule-1:-hydra-heads-are-either-red-or-blue&quot;&gt;Rule 1: Hydra heads are either red or blue&lt;/h3&gt;

&lt;p&gt;Once you&amp;#39;re in a Hydra state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;calling a red head will call the command and continue the state&lt;/li&gt;
&lt;li&gt;calling a blue head will call the command and stop the state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They may have a reddish or a bluish face that isn&amp;#39;t exactly red or
blue, but that&amp;#39;s what they are underneath. I hope you get what I mean.&lt;/p&gt;

&lt;h3 id=&quot;rule-2:-red-or-blue-is-inherited-from-the-body-color&quot;&gt;Rule 2: red or blue is inherited from the body color&lt;/h3&gt;

&lt;p&gt;This is merely a convenience, you can still explicitly override each
head to be blue or red:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if the body is red, amaranth or pink, the heads inherit red&lt;/li&gt;
&lt;li&gt;if the body is blue or teal, the heads inherit blue&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rule-3:&quot;&gt;Rule 3:&lt;/h3&gt;

&lt;p&gt;When you call a binding which isn&amp;#39;t a head:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;amaranth, teal and pink Hydras will intercept it&lt;/li&gt;
&lt;li&gt;red and blue Hydras will quit and let Emacs execute your binding&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, on intercepting a non-head, amaranth and teal will issue a
warning and do nothing without quitting. And pink will try to call the
intercepted command without quitting. Currently only non-prefix
bindings can be called, since I haven&amp;#39;t figured out how to do it for prefixes.&lt;/p&gt;

&lt;h3 id=&quot;a-nice-table-to-sum-things-up&quot;&gt;A nice table to sum things up&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/kaushalmodi&quot;&gt;@kaushalmodi&lt;/a&gt; for pointing me in this direction:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;|----------+-----------+-----------------------+-----------------|
| Body     | Head      | Executing NON-HEADS   | Executing HEADS |
| Color    | Inherited |                       |                 |
|          | Color     |                       |                 |
|----------+-----------+-----------------------+-----------------|
| amaranth | red       | Disallow and Continue | Continue        |
| teal     | blue      | Disallow and Continue | Quit            |
| pink     | red       | Allow and Continue    | Continue        |
| red      | red       | Allow and Quit        | Continue        |
| blue     | blue      | Allow and Quit        | Quit            |
|----------+-----------+-----------------------+-----------------|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-extra-awesome-ruby-style-hydra-docstrings&quot;&gt;The extra-awesome Ruby-style Hydra docstrings&lt;/h2&gt;

&lt;p&gt;Turns out learning Ruby wasn&amp;#39;t a complete waste of time, at least I
learned about string interpolation. And now I&amp;#39;m sticking it into Elisp
packages, first &lt;a href=&quot;https://github.com/abo-abo/tiny&quot;&gt;tiny&lt;/a&gt;, and now
&lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How it works:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_a_ abbrev-mode:       %`abbrev-mode&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_d_ debug-on-error:    %`debug-on-error&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_f_ auto-fill-mode:    %`auto-fill-function&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_g_ golden-ratio-mode: %`golden-ratio-mode&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_t_ truncate-lines:    %`truncate-lines&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;_w_ whitespace-mode:   %`whitespace-mode&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auto-fill-mode&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;golden-ratio-mode&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;whitespace-mode&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-toggle/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, using e.g. &lt;code&gt;&amp;quot;_a_&amp;quot;&lt;/code&gt; translates to &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; with proper face.  More
interestingly, e.g.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;foobar %`abbrev-mode&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;translates roughly to&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;foobar %S&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means that you actually see the state of the mode that you&amp;#39;re
changing.  The escape syntax was chosen with another intent in mind:
because of the backquote, if you have &lt;code&gt;company-mode&lt;/code&gt; on, you can
complete the symbols while in string.&lt;/p&gt;

&lt;p&gt;See how it looks like in action:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-toggle-pink.png&quot; alt=&quot;hydra-toggle-pink&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;small-note-on-pink-hydras&quot;&gt;Small note on pink Hydras&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s useful for instance it the above example, when I don&amp;#39;t care about
self-inserting, but I still want to do navigation. Basically pink
Hydra is the closest thing to an actual minor mode. Thanks to
&lt;a href=&quot;https://github.com/angelic-sedition&quot;&gt;@angelic-sedition&lt;/a&gt; for the idea.&lt;/p&gt;

&lt;h2 id=&quot;small-note-on-teal-hydras&quot;&gt;Small note on teal Hydras&lt;/h2&gt;

&lt;p&gt;It provides an interface similar to &lt;code&gt;magit&lt;/code&gt; dispatch: pressing
appropriate keys does things and pressing the wrong keys issues a
warning. The only difference between teal and amaranth is the color
inheritance, otherwise they behave exactly the same.  This means that
if you want a non-quitting Hydra that will end up with more blue
heads, start with teal, otherwise, start with amaranth.
Thanks to &lt;a href=&quot;https://github.com/ffevotte&quot;&gt;@ffevotte&lt;/a&gt; for the idea.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;It feels like things are finally falling into place with this package.
I hope that you like the new changes and find new cool uses for the added abilities.
Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Reverting nonsense</title>
   <link href="http://oremacs.com/2015/02/18/undo-nonsense/"/>
   <updated>2015-02-18T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/18/undo-nonsense</id>
   <content type="html">&lt;p&gt;It happens to me frequently when making a demo, or just experimenting
around that I want to revert the buffer to the last saved
state. Obviously such a command exists in Emacs, and it&amp;#39;s
unsurprisingly called &lt;code&gt;revert-buffer&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Replace current buffer text with the text of the visited file on disk.
This undoes all changes since the file was visited or saved.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But the poor old &lt;code&gt;revert-buffer&lt;/code&gt; isn&amp;#39;t bound by default in Emacs. The perfect binding for it is &lt;kbd&gt;C-x C-r&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-x C-r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;revert-buffer&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I believe the lambda is used to get the &amp;quot;no questions asked&amp;quot;
treatment.  Anyway, by default Emacs binds &lt;kbd&gt;C-x C-r&lt;/kbd&gt; to
&lt;code&gt;find-file-read-only&lt;/code&gt;, which really is a trash-tier command.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why is &lt;code&gt;find-file-read-only&lt;/code&gt; useless?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because &lt;kbd&gt;C-x C-q&lt;/kbd&gt; is bound to &lt;code&gt;read-only-mode&lt;/code&gt; - a really
good command (made even better with &lt;code&gt;wdired&lt;/code&gt; and &lt;code&gt;wgrep&lt;/code&gt;).  So
&lt;code&gt;find-file-read-only&lt;/code&gt; is just &lt;kbd&gt;C-x C-f C-x C-q&lt;/kbd&gt;. And I don&amp;#39;t
ever recall needing to use that, since &lt;kbd&gt;v&lt;/kbd&gt;
(&lt;code&gt;dired-view-file&lt;/code&gt;) is almost equivalent if not better.&lt;/p&gt;

&lt;p&gt;As a bonus, &lt;kbd&gt;C-x C-r&lt;/kbd&gt; is mnemonic for &amp;quot;revert&amp;quot;.&lt;/p&gt;

&lt;h2 id=&quot;auto-reverting&quot;&gt;Auto-reverting&lt;/h2&gt;

&lt;p&gt;While on the topic, let me mention &lt;code&gt;auto-revert-mode&lt;/code&gt;. I have this in my config:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-auto-revert-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way, if any opened and saved file was modified outside of Emacs, it will be updated
in a short while. I was able to use this to a great advantage when writing the SVG picture
for the &lt;a href=&quot;/2015/02/14/semi-xmodmap/&quot;&gt;Xmodmap post&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I opened the SVG in the default image mode in one Emacs instance&lt;/li&gt;
&lt;li&gt;and opened the same document in XML mode in another (mode is toggled with &lt;kbd&gt;C-c C-c&lt;/kbd&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that setup, I was able to see the picture update as I was inputting the XML.
Here&amp;#39;s some Elisp for XML generation, if you&amp;#39;re interested&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;make-row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;row-str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;iy&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;g&amp;gt;&amp;lt;text x=\&amp;quot;%d\&amp;quot; y=\&amp;quot;%d\&amp;quot; style=\&amp;quot;font-size:10px;fill:%s;font-family:Deja Vu Sans Mono\&amp;quot;&amp;gt;%s&amp;lt;/text&amp;gt;&amp;lt;/g&amp;gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;iy&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;fill&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;elt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row-str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-string&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;row-str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make-row&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;QWERTYUIOP&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;140&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;#2b2828&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The last statement would generate:
&lt;g&gt;&lt;text x=&quot;95&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;Q&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;125&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;W&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;155&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;E&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;185&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;R&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;215&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;T&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;245&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;Y&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;275&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;U&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;305&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;I&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;335&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;O&lt;/text&gt;&lt;/g&gt;
&lt;g&gt;&lt;text x=&quot;365&quot; y=&quot;140&quot; style=&quot;font-size:10px;fill:#2b2828;font-family:Deja Vu Sans Mono&quot;&gt;P&lt;/text&gt;&lt;/g&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra 0.10.0 is out</title>
   <link href="http://oremacs.com/2015/02/17/hydra-0.10.0/"/>
   <updated>2015-02-17T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/17/hydra-0.10.0</id>
   <content type="html">&lt;p&gt;As usual, I&amp;#39;ll just re-state the
&lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.10.0&quot;&gt;release notes&lt;/a&gt;,
while maybe adding a bit of flavor.&lt;/p&gt;

&lt;h2 id=&quot;new-features&quot;&gt;New features&lt;/h2&gt;

&lt;h3 id=&quot;define-hydra-heads-that-don&amp;#39;t-show-up-in-the-hint-at-all&quot;&gt;Define Hydra heads that don&amp;#39;t show up in the hint at all&lt;/h3&gt;

&lt;p&gt;This can be done by setting the head&amp;#39;s hint explicitly to &lt;code&gt;nil&lt;/code&gt;, instead of the usual string. For
instance, if you always tend to bind the arrows to &lt;kbd&gt;hjkl&lt;/kbd&gt;, there&amp;#39;s no point to show a hint
for them.&lt;/p&gt;

&lt;h3 id=&quot;use-a-dedicated-window-for-hydra-hints&quot;&gt;Use a dedicated window for Hydra hints&lt;/h3&gt;

&lt;p&gt;Since version &lt;code&gt;0.10.0&lt;/code&gt;, setting &lt;code&gt;hydra-lv&lt;/code&gt; to &lt;code&gt;t&lt;/code&gt; (the default setting) will make it use a dedicated
window right above the Echo Area for hints. This has the advantage that you can immediately see any
&lt;code&gt;message&lt;/code&gt; output from the functions that you call, since Hydra no longer uses &lt;code&gt;message&lt;/code&gt; to display
the hint. You can still have the old behavior by setting &lt;code&gt;hydra-lv&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How it looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-lv.png&quot; alt=&quot;hydra-lv&quot;&gt;&lt;/p&gt;

&lt;p&gt;Here, an error was triggered by &lt;code&gt;previous-line&lt;/code&gt; and the message is displayed without interrupting
the hint.&lt;/p&gt;

&lt;h3 id=&quot;allow-duplicate-functions-in-heads&quot;&gt;Allow duplicate functions in heads&lt;/h3&gt;

&lt;p&gt;Duplicate functions will be concatenated in the hint.
This was already covered in &lt;a href=&quot;/2015/02/16/hydra-multi/&quot;&gt;yesterday&amp;#39;s post&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-option-to-font-lock-defhydra&quot;&gt;Add option to font-lock &lt;code&gt;defhydra&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;If you want to nicely font-lock your &lt;code&gt;defhydra&lt;/code&gt; statements, just add this to your config:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-add-font-lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Additionally, &lt;code&gt;defhydra&lt;/code&gt; is now to be indented as a &lt;code&gt;defun&lt;/code&gt;, so it will be indented like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-goto-line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g&amp;quot;&lt;/span&gt;
                           &lt;span class=&quot;nb&quot;&gt;:pre&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;linum-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;nb&quot;&gt;:post&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;linum-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                           &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;goto-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the indentation of the body argument is as if it was data
and not code, i.e. the proper one. As you see, I even added &lt;code&gt;defhydra&lt;/code&gt;
to the blog&amp;#39;s Pygments list for Elisp.&lt;/p&gt;

&lt;h2 id=&quot;incompatible-changes&quot;&gt;Incompatible changes&lt;/h2&gt;

&lt;p&gt;The macro &lt;code&gt;hydra-create&lt;/code&gt;, as well as the variables that were supposed
to be used with it (&lt;code&gt;hydra-example-text-scale&lt;/code&gt;,
&lt;code&gt;hydra-example-move-window-splitter&lt;/code&gt;, &lt;code&gt;hydra-example-goto-error&lt;/code&gt;,
&lt;code&gt;hydra-example-windmove&lt;/code&gt;) were removed. All the functionality is still
there in hydra-examples.el with the better &lt;code&gt;defhydra&lt;/code&gt; macro.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you like the new changes. And if you&amp;#39;re byte-compiling
your code that uses &lt;code&gt;defhydra&lt;/code&gt;, don&amp;#39;t forget to re-compile. Also, the
latest version of &lt;code&gt;ace-window&lt;/code&gt; will ignore &lt;code&gt;*LV*&lt;/code&gt; buffer while
switching, as it did for &lt;code&gt;*Calc Trail*&lt;/code&gt; before.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Binding one function multiple times in Hydra</title>
   <link href="http://oremacs.com/2015/02/16/hydra-multi/"/>
   <updated>2015-02-16T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/16/hydra-multi</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a recent feature that&amp;#39;s now available in &lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-zoom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text-scale-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;reset&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text-scale-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;text-scale-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the entry points are &lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt;, &lt;kbd&gt;&amp;lt;f2&amp;gt; l&lt;/kbd&gt;, and &lt;kbd&gt;&amp;lt;f2&amp;gt; 0&lt;/kbd&gt;, the
others aren&amp;#39;t bound in the global map.
You can also have the same function in both red and blue versions. Here&amp;#39;s how the hint will look like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-multi.png&quot; alt=&quot;hydra-multi&quot;&gt;&lt;/p&gt;

&lt;p&gt;The multiply-defined functions will be neatly grouped together.&lt;/p&gt;

&lt;p&gt;If you remember, &lt;code&gt;(text-scale-set 0)&lt;/code&gt; uses a sexp syntax for a Hydra
head: it will be wrapped in &lt;code&gt;(lambda () (interactive) ...)&lt;/code&gt; automatically.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Doing sudo stuff with tramp</title>
   <link href="http://oremacs.com/2015/02/15/sudo-stuffs/"/>
   <updated>2015-02-15T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/15/sudo-stuffs</id>
   <content type="html">&lt;p&gt;Somehow, I accumulated a few files owned by root that should have been
owned by me. Below, I&amp;#39;ll describe a solution to get rid of them based
on &lt;code&gt;dired&lt;/code&gt; and &lt;code&gt;tramp&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;step-one:-open-the-directory-with-sudo-privileges&quot;&gt;Step one: open the directory with sudo privileges&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll obviously need the sudo privilege to change the owner of a file owned
by root. Might as well start with that.&lt;/p&gt;

&lt;p&gt;Thankfully, I do have a shortcut:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sudired&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;tramp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^/sudo:&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;user-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Already in sudo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/sudo::&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;sudired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The function above will open the current directory in sudo mode. I
decided to bind it to &lt;kbd&gt;!&lt;/kbd&gt;, since the default &lt;kbd&gt;&amp;amp;&lt;/kbd&gt;
seems strictly better than &lt;kbd&gt;!&lt;/kbd&gt;. The function will ask you for
the password once.  Afterwards, you can open other directories without
having to enter the password.&lt;/p&gt;

&lt;h2 id=&quot;step-two:-find-dired&quot;&gt;Step two: &lt;code&gt;find-dired&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;So now, while in sudo mode of the directory in question:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;find-dired&lt;/code&gt;. It&amp;#39;s not bound by default, and I
don&amp;#39;t bind it myself since it&amp;#39;s quite situational (I do bind
&lt;code&gt;find-name-dired&lt;/code&gt; to &lt;kbd&gt;F&lt;/kbd&gt; in &lt;code&gt;dired-mode&lt;/code&gt; though).&lt;/li&gt;
&lt;li&gt;It prompts you for the directory. I just press &lt;kbd&gt;RET&lt;/kbd&gt;, since the default one is what I need.&lt;/li&gt;
&lt;li&gt;Next, it prompts for &lt;code&gt;find&lt;/code&gt; args. These are the arguments to the
UNIX command &lt;code&gt;find&lt;/code&gt;. Here, I need to pass &lt;code&gt;-user root&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The command has finished and I can see the results. I can select
some of them by pressing &lt;kbd&gt;m&lt;/kbd&gt; (&lt;code&gt;dired-mark&lt;/code&gt;) a few times, or
mark them all at once with &lt;kbd&gt;t&lt;/kbd&gt; (&lt;code&gt;dired-toggle-marks&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Finally, call &lt;kbd&gt;O&lt;/kbd&gt; (&lt;code&gt;dired-do-chown&lt;/code&gt;) on the marked files and enter &lt;code&gt;oleh&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Done. I&amp;#39;m sure that the admin types can cook up some &lt;code&gt;find&lt;/code&gt;-&lt;code&gt;exec&lt;/code&gt;-&lt;code&gt;chown&lt;/code&gt; combo to do the same thing,
but the &lt;code&gt;find-dired&lt;/code&gt; approach is both simpler and more flexible, since I can confirm and edit the list
of files being changed.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Semimap - .Xmodmap with semicolon as an additional modifier</title>
   <link href="http://oremacs.com/2015/02/14/semi-xmodmap/"/>
   <updated>2015-02-14T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/14/semi-xmodmap</id>
   <content type="html">&lt;p&gt;Today, I&amp;#39;ll share my keyboard layout, based on QWERTY, that
facilitates all tech-related activities, especially Emacs.  I&amp;#39;ve been
using a version of this for about three years now, and only a single
key has been changed in the last two years. Without further ado,
&lt;a href=&quot;https://github.com/abo-abo/semimap&quot;&gt;here it is&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/semi-qwerty.png&quot; alt=&quot;semimap&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-most-visible-change&quot;&gt;The most visible change&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve made &lt;kbd&gt;;&lt;/kbd&gt; stop inserting &lt;code&gt;;&lt;/code&gt; and instead act as
&lt;code&gt;Mode_switch&lt;/code&gt;: a modifier similar to control or meta.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;#39;m pressing &lt;kbd&gt;;-j&lt;/kbd&gt; to enter &lt;kbd&gt;;&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;I&amp;#39;m pressing &lt;kbd&gt;;-d&lt;/kbd&gt; to enter &lt;kbd&gt;:&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I&amp;#39;m giving up the ability to press &lt;kbd&gt;;&lt;/kbd&gt; with a single key,
and remapping &lt;kbd&gt;:&lt;/kbd&gt; from one two-key combination to another
two-key combination.&lt;/p&gt;

&lt;p&gt;In return, I&amp;#39;m getting a QWERTY with all these wonderful shortcuts.&lt;/p&gt;

&lt;h2 id=&quot;the-rsi-savers&quot;&gt;The RSI-savers&lt;/h2&gt;

&lt;p&gt;The general ones are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;RET&lt;/kbd&gt; on &lt;kbd&gt;;-v&lt;/kbd&gt; (symmetric with &lt;kbd&gt;C-m&lt;/kbd&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;DEL&lt;/kbd&gt; on &lt;kbd&gt;;-o&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#39;re writing a bunch of C++, &lt;kbd&gt;_&lt;/kbd&gt; on &lt;kbd&gt;;-s&lt;/kbd&gt; is very good.&lt;/p&gt;

&lt;p&gt;Likewise, &lt;kbd&gt;-&lt;/kbd&gt; on &lt;kbd&gt;;-a&lt;/kbd&gt; is great for LISP.&lt;/p&gt;

&lt;p&gt;For LaTeX, &lt;kbd&gt;&amp;#92;&lt;/kbd&gt; on &lt;kbd&gt;;-w&lt;/kbd&gt; is good since I switched from
a keyboard that had it near &lt;kbd&gt;z&lt;/kbd&gt; to a keyboard that has it near &lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m guessing &lt;kbd&gt;~&lt;/kbd&gt; on &lt;kbd&gt;;-t&lt;/kbd&gt; isn&amp;#39;t bad for shell, but I don&amp;#39;t use it that much.&lt;/p&gt;

&lt;h2 id=&quot;the-basic-remaps&quot;&gt;The basic remaps&lt;/h2&gt;

&lt;p&gt;These are just char-for-char remaps. They are composable, for instance
I have &lt;code&gt;dired-jump&lt;/code&gt; on &lt;kbd&gt;C-:&lt;/kbd&gt;, which means that I&amp;#39;m pressing
&lt;kbd&gt;C-;-d&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Some math symbols are mnemonic: &lt;kbd&gt;e&lt;/kbd&gt;-equal,
&lt;kbd&gt;l&lt;/kbd&gt;-lesser, &lt;kbd&gt;g&lt;/kbd&gt;-greater.
If you&amp;#39;re using &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt;, it might become more clear for you
why I&amp;#39;ve put &lt;code&gt;lispy-slurp&lt;/code&gt; on &lt;kbd&gt;&amp;gt;&lt;/kbd&gt; and &lt;code&gt;lispy-barf&lt;/code&gt; on &lt;kbd&gt;&amp;lt;&lt;/kbd&gt;. Although
pressing these keys with a shift isn&amp;#39;t the worst thing, having them on the home row is pretty cool.&lt;/p&gt;

&lt;h2 id=&quot;the-pairs&quot;&gt;The pairs&lt;/h2&gt;

&lt;p&gt;Here are the translations meant for pairs:
&lt;kbd&gt;q&lt;/kbd&gt; - &lt;kbd&gt;θ&lt;/kbd&gt;,
&lt;kbd&gt;f&lt;/kbd&gt; - &lt;kbd&gt;φ&lt;/kbd&gt;,
&lt;kbd&gt;r&lt;/kbd&gt; - &lt;kbd&gt;ρ&lt;/kbd&gt;,
&lt;kbd&gt;c&lt;/kbd&gt; - &lt;kbd&gt;σ&lt;/kbd&gt;.
These are meant for Emacs and &lt;code&gt;.inputrc&lt;/code&gt;. In both cases, e.g. &lt;kbd&gt;φ&lt;/kbd&gt; should insert &lt;code&gt;()&lt;/code&gt; and
go backward one char. Here&amp;#39;s my &lt;code&gt;.inputrc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;set input-meta on
set output-meta on
set convert-meta off
&amp;quot;θ&amp;quot;:&amp;quot;&amp;quot;\C-b&amp;quot;&amp;quot;
&amp;quot;ω&amp;quot;:&amp;quot;&amp;#39;\C-b&amp;#39;&amp;quot;
&amp;quot;\e\C-l&amp;quot;:&amp;quot;\C-e | less\C-m&amp;quot;
&amp;quot;υ&amp;quot;:&amp;quot;&amp;gt;\C-b&amp;lt;&amp;quot;
&amp;quot;σ&amp;quot;:&amp;quot;}\C-b{&amp;quot;
&amp;quot;φ&amp;quot;:&amp;quot;)\C-b(&amp;quot;
&amp;quot;ρ&amp;quot;:&amp;quot;]\C-b[&amp;quot;

set completion-ignore-case on
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this &lt;code&gt;.inputrc&lt;/code&gt;, it&amp;#39;s like I have some kind of electric mode in my bash.
In Emacs, the pairs are bound in a straightforward way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ins-brackets&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major-mode&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;term-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-raw-string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-raw-string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--surround-region&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ρ&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ins-brackets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For LISP, I use &lt;code&gt;lispy&lt;/code&gt;-specific bindings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;φ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-parens&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;σ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-braces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ρ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-brackets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;θ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-quotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;χ&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-rest-of-the-greek-chars&quot;&gt;The rest of the Greek chars&lt;/h2&gt;

&lt;p&gt;These are bound to various Emacs functions. In fact, I initially started with all Greek chars, and
bound e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ε&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When these remap-type bindings became mature, I&amp;#39;ve put them directly
into &lt;code&gt;.Xmodmap&lt;/code&gt;, which gave the advantage of being able to compose the
keys.&lt;/p&gt;

&lt;p&gt;These bindings are as good and usable as the control plus lower case
chars. Use them wisely and you can get a very ergonomic setup. Some
ideas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;switching buffers on &lt;kbd&gt;;-h&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;switching windows on &lt;kbd&gt;;-n&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;jumping to bookmarks on &lt;kbd&gt;;-m&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-shifted-digits&quot;&gt;The shifted digits&lt;/h2&gt;

&lt;p&gt;I find it much easier to press e.g. &lt;kbd&gt;;-4&lt;/kbd&gt; to insert &lt;code&gt;$&lt;/code&gt;,
rather than &lt;kbd&gt;S-4&lt;/kbd&gt;. I also restored the justice of &lt;code&gt;0&lt;/code&gt; coming &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;1&lt;/code&gt; by mapping
&lt;kbd&gt;;-&amp;#96;&lt;/kbd&gt; to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you&amp;#39;ll find some use and enjoyment in these ramappings, if
you&amp;#39;re not afraid to experiment a little.  The cost of losing the
semicolon is pretty minor, the bigger issue is in finding the
unmodified QWERTY extremely sluggish after using this approach.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elisp linting options</title>
   <link href="http://oremacs.com/2015/02/13/elisp-linting/"/>
   <updated>2015-02-13T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/13/elisp-linting</id>
   <content type="html">&lt;p&gt;I discovered today that I was using &lt;code&gt;declare-function&lt;/code&gt; in a wrong way.
So I&amp;#39;ll share how to use it properly.&lt;/p&gt;

&lt;h2 id=&quot;declare-function&quot;&gt;&lt;code&gt;declare-function&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I was just using it to shut up the byte compiler&amp;#39;s &lt;code&gt;&amp;quot;not known to be
defined&amp;quot;&lt;/code&gt; warning.  Turns out that it can also be used to check if the
functions actually exist in the file to which they point to. You can
use &lt;code&gt;check-declare-file&lt;/code&gt; to check one file, or
&lt;code&gt;check-declare-directory&lt;/code&gt; to recursively check the whole directory.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an example output:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Warning (check-declare): helm-info.el said `Info-goto-node&amp;#39; was defined in info.el.gz: arglist mismatch
Warning (check-declare): helm-info.el said `Info-find-node&amp;#39; was defined in info.el.gz: arglist mismatch
Warning (check-declare): helm-plugin.el said `Info-goto-node&amp;#39; was defined in info.el.gz: arglist mismatch
Warning (check-declare): helm-plugin.el said `Info-find-node&amp;#39; was defined in info.el.gz: arglist mismatch
Warning (check-declare): helm-emms.el said `with-current-emms-playlist&amp;#39; was defined in emms.el: function not found
Warning (check-declare): projectile.el said `ggtags-ensure-project&amp;#39; was defined in ggtags.el: file not found
Warning (check-declare): projectile.el said `ggtags-update-tags&amp;#39; was defined in ggtags.el: file not found
Warning (check-declare): async-bytecomp.el said `package-desc-reqs&amp;#39; was defined in package.el.gz: function not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My mistake was assuming that the &lt;code&gt;FILE&lt;/code&gt; argument of &lt;code&gt;declare-function&lt;/code&gt;
was somehow related to &lt;code&gt;require&lt;/code&gt;.  But of course it had to be simply
the name of the file that contains the said function. If the referenced file is in an external package,
e.g. &lt;code&gt;(declare-function cider-repl-return &amp;quot;ext:cider-repl&amp;quot;)&lt;/code&gt; can be used.&lt;/p&gt;

&lt;h2 id=&quot;checkdoc&quot;&gt;&lt;code&gt;checkdoc&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This one is actually very useful once you embrace it.  It will
&lt;em&gt;tsk-tsk&lt;/em&gt; you until all your functions are documented. And since
you&amp;#39;re already writing a docstring, might as well make it
good. Sometimes this leads me to removing a function that&amp;#39;s called
only once, just so that I don&amp;#39;t have to document it.&lt;/p&gt;

&lt;h2 id=&quot;byte-compile-file&quot;&gt;&lt;code&gt;byte-compile-file&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Leaving the obvious for last. This will speed up the code in addition to checking for errors.
In &lt;code&gt;dired&lt;/code&gt; you can use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;several &lt;kbd&gt;m&lt;/kbd&gt; (&lt;code&gt;dired-mark&lt;/code&gt;) followed by &lt;kbd&gt;B&lt;/kbd&gt; (&lt;code&gt;dired-do-byte-compile&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;a single &lt;kbd&gt;*%&lt;/kbd&gt; (&lt;code&gt;dired-mark-files-regexp&lt;/code&gt;) &lt;code&gt;el$&lt;/code&gt; followed by &lt;kbd&gt;B&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I even have a &lt;code&gt;compile&lt;/code&gt; target in &lt;code&gt;lispy&lt;/code&gt;&amp;#39;s &lt;a href=&quot;https://github.com/abo-abo/lispy/blob/master/Makefile&quot;&gt;Makefile&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -l lispy-test.el -l compile.elt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the contents of compile.elt:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;check-declare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;check-declare-ext-errors&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lispy.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;lispy-inline.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-clojure.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-scheme.el&amp;quot;&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;le-lisp.el&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;byte-compile-file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ert&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;check-declare-files&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Occasionally ido</title>
   <link href="http://oremacs.com/2015/02/12/ido-occasional/"/>
   <updated>2015-02-12T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/12/ido-occasional</id>
   <content type="html">&lt;p&gt;As I was refactoring my &lt;code&gt;.emacs&lt;/code&gt;, I found a silly wrapper around
&lt;code&gt;describe-function&lt;/code&gt; that uses &lt;code&gt;ido-completing-read&lt;/code&gt;.  I think I was
aware at the time that
&lt;a href=&quot;https://github.com/DarwinAwardWinner/ido-ubiquitous&quot;&gt;ido-ubiquitous&lt;/a&gt;
could simply make &lt;code&gt;describe-function&lt;/code&gt; use &lt;code&gt;ido-completing-read&lt;/code&gt;. The
problem was that it also affected the &lt;code&gt;completing-read&lt;/code&gt; in functions
that became &lt;code&gt;headlong-bookmark-jump&lt;/code&gt; from
&lt;a href=&quot;https://github.com/abo-abo/headlong&quot;&gt;headlong&lt;/a&gt;
(see &lt;a href=&quot;/2015/01/06/rushing-headlong/&quot;&gt;the corresponding post&lt;/a&gt;
if you missed it).&lt;/p&gt;

&lt;h2 id=&quot;a-bit-of-code-to-make-things-right&quot;&gt;A bit of code to make things right&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-occasional-completing-read&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt;
     &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;require-match&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initial-input&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;hist&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inherit-input-method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Use `ido-completing-read&amp;#39; if the collection isn&amp;#39;t too large.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;Fall back to `completing-read&amp;#39; otherwise.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;filtered-collection&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all-completions&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;filtered-collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-completing-read&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;filtered-collection&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;require-match&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initial-input&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hist&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completing-read&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;prompt&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collection&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;predicate&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;require-match&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;initial-input&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hist&lt;/span&gt;
       &lt;span class=&quot;nv&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inherit-input-method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;with-ido-completion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Wrap FUN in another interactive function with ido completion.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;intern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;symbol-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/with-ido&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Forward to `%S&amp;#39; with ido completion.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;completing-read-function&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-occasional-completing-read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-interactively&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only thing that &lt;code&gt;ido-occasional-completing-read&lt;/code&gt; does is to
pre-filter &lt;code&gt;collection&lt;/code&gt; with &lt;code&gt;predicate&lt;/code&gt; and pass it on to
&lt;code&gt;ido-completing-read&lt;/code&gt;. And &lt;code&gt;with-ido-completion&lt;/code&gt; is just a convenience wrapper.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f1&amp;gt; f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with-ido-completion&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;describe-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f1&amp;gt; v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with-ido-completion&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;describe-variable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt; i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;with-ido-completion&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;info-lookup-symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;with-ido-completion&lt;/code&gt; will generate
e.g. &lt;code&gt;describe-function/with-ido&lt;/code&gt;, which will subsequently be bound to
&lt;kbd&gt;&amp;lt;f1&amp;gt; f&lt;/kbd&gt;. The good-old &lt;code&gt;describe-function&lt;/code&gt; is left unaffected.&lt;/p&gt;

&lt;p&gt;Note, that if I turn on &lt;code&gt;helm-mode&lt;/code&gt; at this point, it will override
&lt;code&gt;describe-function&lt;/code&gt; with its own completion, but it will not touch
&lt;code&gt;describe-function/with-ido&lt;/code&gt; which I bound. This can be useful e.g. if
I want to use &lt;code&gt;helm-mode&lt;/code&gt; (or &lt;code&gt;icy-mode&lt;/code&gt; or &lt;code&gt;icomplete-mode&lt;/code&gt;) for some
completion, but not all.&lt;/p&gt;

&lt;p&gt;You can find the package at &lt;a href=&quot;https://github.com/abo-abo/ido-occasional&quot;&gt;ido-occasional&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Elisp newbie-style</title>
   <link href="http://oremacs.com/2015/02/11/elisp-newbie-style/"/>
   <updated>2015-02-11T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/11/elisp-newbie-style</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been cleaning up my .emacs lately, with the intention to put my
whole config on Github. Today, I&amp;#39;ll show you a useful function for
describing the current buffer&amp;#39;s key bindings. The function will
generate something like this (with all letters, of course):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;a&amp;quot;) &amp;#39;self-insert-command)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;C-b&amp;quot;) &amp;#39;backward-char)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;M-c&amp;quot;) &amp;#39;subword-capitalize)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;C-M-d&amp;quot;) &amp;#39;down-list)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;η&amp;quot;) &amp;#39;save-and-switch-buffer)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;C-θ&amp;quot;) &amp;#39;ins-single-quotes)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;M-ι&amp;quot;) &amp;#39;nil)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; ...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; (global-set-key (kbd &amp;quot;C-M-κ&amp;quot;) &amp;#39;nil)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, I&amp;#39;ll show you how I wrote it down as a newbie, and
then today&amp;#39;s corrections with some remarks.&lt;/p&gt;

&lt;h2 id=&quot;old-style&quot;&gt;Old style&lt;/h2&gt;

&lt;p&gt;Please don&amp;#39;t try this at home:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-latin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?z&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-greek&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;α&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ω&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prin1-to-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;) &amp;#39;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefixes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-output-to-temp-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*Bindings*&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;f-letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f-letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keys-latin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keys-greek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;corrections&quot;&gt;Corrections&lt;/h2&gt;

&lt;h3 id=&quot;redundant-autoloads&quot;&gt;Redundant autoloads&lt;/h3&gt;

&lt;p&gt;Since the entry point of the whole thing is &lt;code&gt;keys-describe-prefixes&lt;/code&gt;, only it needs to be autoloaded.
Once an autoloaded function is called, it will load the whole buffer. So if e.g. &lt;code&gt;keys-latin&lt;/code&gt; is
not being used anywhere else outside this file, it doesn&amp;#39;t need an autoload.&lt;/p&gt;

&lt;h3 id=&quot;redundant-functions&quot;&gt;Redundant functions&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;keys-latin&lt;/code&gt; and &lt;code&gt;keys-greek&lt;/code&gt; are actually very small and not used anywhere else. It might be better
to just inline them into &lt;code&gt;keys-describe-prefixes&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;redundant-libraries&quot;&gt;Redundant libraries&lt;/h3&gt;

&lt;p&gt;Here, &lt;code&gt;dash&lt;/code&gt; is required just for the &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; macro, which can actually
be obtained from a core library &lt;code&gt;subr-x&lt;/code&gt; as &lt;code&gt;thread-last&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But even then, it&amp;#39;s just better to unwind the whole thing. After that, it becomes clear that
the three consecutive &lt;code&gt;mapcar&lt;/code&gt;s could be folded into a single &lt;code&gt;mapcar&lt;/code&gt; with the help of a &lt;code&gt;let&lt;/code&gt; binding.&lt;/p&gt;

&lt;p&gt;After the fold, it starts to look silly, since I&amp;#39;m &lt;code&gt;cons&lt;/code&gt;ing just to
take a &lt;code&gt;car&lt;/code&gt; and &lt;code&gt;cdr&lt;/code&gt; later:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;concat&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
                          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prin1-to-string&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;) &amp;#39;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;binding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s a simplification, removing &lt;code&gt;binding&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;concat&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;) &amp;#39;&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prin1-to-string&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
               &lt;span class=&quot;s&quot;&gt;&amp;quot;)\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I guess that I didn&amp;#39;t know about &lt;code&gt;format&lt;/code&gt; function back then, and the fact that &lt;code&gt;&amp;quot;%S&amp;quot;&lt;/code&gt; key is equivalent
to &lt;code&gt;prin1-to-string&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;concat&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;%s\&amp;quot;) &amp;#39;%S)\n&amp;quot;&lt;/span&gt;
                      &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, the combination &lt;code&gt;(apply #&amp;#39;concat (mapcar ...))&lt;/code&gt; is already implemented in C as &lt;code&gt;mapconcat&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;%s\&amp;quot;) &amp;#39;%S)&amp;quot;&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;letters&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the end, &lt;code&gt;keys-describe-prefix&lt;/code&gt; turned out to be so small that I could just inline it into
&lt;code&gt;keys-describe-prefixes&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;final-version&quot;&gt;Final version&lt;/h2&gt;

&lt;p&gt;Note that here I also replaced &lt;code&gt;mapcar&lt;/code&gt; with &lt;code&gt;dolist&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;;;###autoload&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keys-describe-prefixes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-output-to-temp-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*Bindings*&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter-group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?z&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;α&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ω&lt;/span&gt;
                                    &lt;span class=&quot;nv&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; (global-set-key (kbd \&amp;quot;%s\&amp;quot;) &amp;#39;%S)&amp;quot;&lt;/span&gt;
                            &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key-binding&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;letter-group&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;princ&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I hope that this sort of analysis can be useful for people starting to
learn Elisp.  And if you have corrections for the final version, do
let me know, I don&amp;#39;t mind being schooled, as long as I get better in
the end.&lt;/p&gt;

&lt;p&gt;The output of &lt;code&gt;keys-describe-prefixes&lt;/code&gt; can be used to learn some
bindings that you didn&amp;#39;t know about, and also as a template to
redefine some bindings that you don&amp;#39;t need.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Easy ido improvement</title>
   <link href="http://oremacs.com/2015/02/10/ido-backspace/"/>
   <updated>2015-02-10T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/10/ido-backspace</id>
   <content type="html">&lt;p&gt;Heh, I guess I was so busy at work that I missed the opportunity to
make an especially good post for the 50-post landmark. At least
according to &lt;kbd&gt;M-=&lt;/kbd&gt; (&lt;code&gt;count-words-region&lt;/code&gt;) in my &lt;strong&gt;_posts&lt;/strong&gt;&amp;#39;
&lt;code&gt;dired&lt;/code&gt; buffer, this is the 53rd post.&lt;/p&gt;

&lt;h2 id=&quot;ido-backspace&quot;&gt;&lt;code&gt;ido-backspace&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This echoes to my very second post,
&lt;a href=&quot;/2014/12/21/helm-backspace/&quot;&gt;easy helm improvement&lt;/a&gt;,
which was about implementing a similar function for &lt;code&gt;helm&lt;/code&gt;.
So here it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;delsel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-backspace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Forward to `backward-delete-char&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;On error (read-only), quit without selecting.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-delete-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;minibuffer-keyboard-quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-common-completion-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this setup, when e.g. calling &lt;code&gt;ido-switch-buffer&lt;/code&gt;, you can cancel
with &lt;kbd&gt;DEL&lt;/kbd&gt;.  This, of course, will also work for
&lt;a href=&quot;https://github.com/nonsequitur/smex&quot;&gt;smex&lt;/a&gt; and
&lt;a href=&quot;https://github.com/magit/magit&quot;&gt;some&lt;/a&gt;
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;other&lt;/a&gt; packages that allow for
&lt;code&gt;ido&lt;/code&gt; completion:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;magit-completing-read-function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;magit-ido-completing-read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-completion-method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the &lt;code&gt;define-key&lt;/code&gt; part of the code takes an advantage of a
recent patch to &lt;code&gt;ido&lt;/code&gt; that&amp;#39;s available in the trunk.  You can find the
old way of binding keys for &lt;code&gt;ido&lt;/code&gt; in an earlier post,
&lt;a href=&quot;/2015/01/09/ido-find-file-tilde/&quot;&gt;tilde in ido-find-file&lt;/a&gt;.
That post actually played a small role in speeding up the patch, for
which we should thank &lt;a href=&quot;https://github.com/tarsius&quot;&gt;@tarsius&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Note that this behavior will not affect &lt;code&gt;ido-find-file&lt;/code&gt;, since it has its own map.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ido-vertical - like ido, but vertical!</title>
   <link href="http://oremacs.com/2015/02/09/ido-vertical/"/>
   <updated>2015-02-09T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/09/ido-vertical</id>
   <content type="html">&lt;h2 id=&quot;intro&quot;&gt;Intro&lt;/h2&gt;

&lt;p&gt;As I was releasing &lt;a href=&quot;https://github.com/abo-abo/lispy/releases/tag/0.23.0&quot;&gt;lispy 0.23.0&lt;/a&gt;, which added
an option for methods of jumping to semantic tags other than &lt;code&gt;helm&lt;/code&gt;, I&amp;#39;ve discovered
&lt;a href=&quot;https://github.com/gempesaw/ido-vertical-mode.el&quot;&gt;ido-vertical-mode&lt;/a&gt;. I also made some changes to
it, so now it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/lispy-ido-vertical.png&quot; alt=&quot;lispy-ido-vertical&quot;&gt;&lt;/p&gt;

&lt;p&gt;The changes are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the current text is highlighted in all matches&lt;/li&gt;
&lt;li&gt;the current number of total matches is displayed in the first line&lt;/li&gt;
&lt;li&gt;I also customized the face for the first match and the only match (you can&amp;#39;t see that one here)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Helm is still the big gun when it comes to completing lists with hundreds of candidates,
but with the above changes, &lt;code&gt;ido-vertical-mode&lt;/code&gt; comes close to what I need when jumping to tags.
The only thing missing now is that the selected candidate is always on the first line,
even when I press &lt;kbd&gt;C-n&lt;/kbd&gt;, which isn&amp;#39;t very intuitive.&lt;/p&gt;

&lt;h2 id=&quot;stuff-related-to-lispy-release&quot;&gt;Stuff related to &lt;code&gt;lispy&lt;/code&gt; release&lt;/h2&gt;

&lt;h3 id=&quot;other-completion-methods-available-in-lispy-goto&quot;&gt;Other completion methods available in &lt;code&gt;lispy-goto&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Depending on the modes you have enabled, you can complete with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ido&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ido-vertical-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icomplete-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;icy-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;no mode, just plain completion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lispy-eval-other-window-now-uses-ace-window&quot;&gt;&lt;code&gt;lispy-eval-other-window&lt;/code&gt; now uses &lt;code&gt;ace-window&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This function bound to &lt;kbd&gt;p&lt;/kbd&gt; is very convenient for debugging
Elisp: it allows you to eval the current sexp in the context of other
window. This is very powerful: you can run and debug your function as
you write it, statement by statement. Previously, this setup was
viable only in a two-window split, because using &lt;code&gt;other-window&lt;/code&gt;, it
wasn&amp;#39;t predictable in which window the eval would take place.  Now, if
there are more than two windows, &lt;code&gt;aw-select&lt;/code&gt; will select the window
for the eval.  This selection will be remembered, so you don&amp;#39;t have to
select for the following evals, unless the window configuration
changes.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;There are more changes that you can find in
&lt;a href=&quot;https://github.com/abo-abo/lispy/releases/tag/0.23.0&quot;&gt;the release notes&lt;/a&gt;
if you&amp;#39;re interested. You can find the new &lt;code&gt;ido-vertical&lt;/code&gt; stuff in
&lt;a href=&quot;https://github.com/abo-abo/ido-vertical-mode.el&quot;&gt;my fork&lt;/a&gt;, until it
gets merged.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Hydra 0.9.0 is out</title>
   <link href="http://oremacs.com/2015/02/08/hydra-0.9.0/"/>
   <updated>2015-02-08T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/08/hydra-0.9.0</id>
   <content type="html">&lt;p&gt;I&amp;#39;ll just list the new features from the &lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.9.0&quot;&gt;release notes&lt;/a&gt; here.&lt;/p&gt;

&lt;h2 id=&quot;keyboard-quit&quot;&gt;Keyboard quit&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hydra-keyboard-quit&lt;/code&gt; set to &lt;code&gt;&amp;quot;C-g&amp;quot;&lt;/code&gt; means that it&amp;#39;s possible to quit an amaranth Hydra
with &lt;kbd&gt;C-g&lt;/kbd&gt;. You can customize this variable.&lt;/p&gt;

&lt;h2 id=&quot;:pre-and-:post-refinement&quot;&gt;&lt;code&gt;:pre&lt;/code&gt; and &lt;code&gt;:post&lt;/code&gt; refinement&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;:post&lt;/code&gt; and &lt;code&gt;:pre&lt;/code&gt; keys in the body &lt;code&gt;PLIST&lt;/code&gt; can be either a single
sexp or a function name. The function doesn&amp;#39;t need to be interactive.&lt;/p&gt;

&lt;h2 id=&quot;support-for-local-hydra-heads-via-:bind-property&quot;&gt;Support for local Hydra heads via &lt;code&gt;:bind&lt;/code&gt; property&lt;/h2&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-next-error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-x&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;next-error&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;`&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;previous&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What it does:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;binds &lt;kbd&gt;C-x &amp;#96;&lt;/kbd&gt; to &lt;code&gt;next-error&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;does not bind &lt;kbd&gt;C-x j&lt;/kbd&gt; and &lt;kbd&gt;C-x k&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;you can still do &lt;kbd&gt;C-x &amp;#96;jjkk&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks, &lt;a href=&quot;https://github.com/ffevotte&quot;&gt;@ffevotte&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;support-for-:bind-property-in-hydra-body&quot;&gt;Support for &lt;code&gt;:bind&lt;/code&gt; property in Hydra body&lt;/h2&gt;

&lt;p&gt;The body, like the heads will recognize the &lt;code&gt;:bind&lt;/code&gt; property in &lt;code&gt;PLIST&lt;/code&gt;.
The heads will inherit it, just like they do with &lt;code&gt;:color&lt;/code&gt;.
The &lt;code&gt;:bind&lt;/code&gt; property can be nil or a lambda of &lt;code&gt;global-set-key&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-goto&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g&amp;quot;&lt;/span&gt;
                      &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bind-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;goto-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-line&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:bind&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;bind-key&lt;/code&gt; will be used to bind &lt;code&gt;goto-char&lt;/code&gt; to &lt;kbd&gt;M-g c&lt;/kbd&gt;,
since &lt;kbd&gt;c&lt;/kbd&gt; head has inherited body&amp;#39;s &lt;code&gt;:bind&lt;/code&gt; property. Note
that since &lt;code&gt;bind-key&lt;/code&gt; is a macro, it was necessary to wrap it in a
lambda.&lt;/p&gt;

&lt;p&gt;However, &lt;code&gt;global-set-key&lt;/code&gt; will be used to bind &lt;code&gt;goto-line&lt;/code&gt; to &lt;kbd&gt;M-g g&lt;/kbd&gt;, this &lt;code&gt;:bind&lt;/code&gt; property
was overridden in the &lt;kbd&gt;g&lt;/kbd&gt; head.&lt;/p&gt;

&lt;p&gt;Since this commit, it&amp;#39;s not possible to pass a lambda instead of the
whole &lt;code&gt;BODY&lt;/code&gt; argument, as was advertised before. Just put it on
&lt;code&gt;:bind&lt;/code&gt; now.&lt;/p&gt;

&lt;h2 id=&quot;hydra/body-will-pass-the-initial-current-prefix-arg-along&quot;&gt;&lt;code&gt;hydra/body&lt;/code&gt; will pass the initial &lt;code&gt;current-prefix-arg&lt;/code&gt; along&lt;/h2&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;kbd&gt;C-u C-z l&lt;/kbd&gt; will result in &lt;code&gt;(forward-char 4)&lt;/code&gt;. All the other &lt;kbd&gt;l&lt;/kbd&gt;
will normally call &lt;code&gt;(forward-char 1)&lt;/code&gt;, unless an additional prefix is given.  The previous
behavior allowed only for &lt;kbd&gt;C-z C-u l&lt;/kbd&gt; to get &lt;code&gt;(forward-char 4)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;allow-a-sexp-as-head&amp;#39;s-cmd-parameter&quot;&gt;Allow a sexp as head&amp;#39;s CMD parameter&lt;/h2&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-launcher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;Launch&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;man&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;man&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;browse-url&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.reddit.com/r/emacs/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;reddit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;browse-url&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.emacswiki.org/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;emacswiki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shell&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c r&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-launcher/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;kbd&gt;r&lt;/kbd&gt; and &lt;kbd&gt;w&lt;/kbd&gt; heads are using this feature.
Here&amp;#39;s what will be generated, if you&amp;#39;re interested:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-launcher/lambda-w&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Create a hydra with no body and the heads:&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;\&amp;quot;h\&amp;quot;:    `man&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;\&amp;quot;r\&amp;quot;:    `(browse-url \&amp;quot;http://www.reddit.com/r/emacs/\&amp;quot;)&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;\&amp;quot;w\&amp;quot;:    `(browse-url \&amp;quot;http://www.emacswiki.org/\&amp;quot;)&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;\&amp;quot;s\&amp;quot;:    `shell&amp;#39;,&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;\&amp;quot;q\&amp;quot;:    `nil&amp;#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;The body can be accessed via `hydra-launcher/body&amp;#39;.&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;Call the head: `(browse-url \&amp;quot;http://www.emacswiki.org/\&amp;quot;)&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-disable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-interactively&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;browse-url&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.emacswiki.org/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;obsolete-declarations&quot;&gt;Obsolete declarations&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hydra-create&lt;/code&gt; and all old examples in hydra-examples.el are now obsolete.
You can still use them for a short while, but they will be removed soon.&lt;/p&gt;

&lt;p&gt;You should take the time to switch from &lt;code&gt;hydra-create&lt;/code&gt; to &lt;code&gt;defhydra&lt;/code&gt;. All the old examples
are provided in the new style in hydra-examples.el. However, they will not be evaluated
through &lt;code&gt;(require &amp;#39;hydra-examples)&lt;/code&gt; unless you &lt;code&gt;(setq hydra-examples-verbatim t)&lt;/code&gt;
beforehand.  This is because I have no idea what kind of bindings will work for you, you
should decide yourself.  But I am providing you with a template. The number of examples
has also grown to six.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A new Hydra demo on Youtube</title>
   <link href="http://oremacs.com/2015/02/07/hydra-on-youtubes/"/>
   <updated>2015-02-07T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/07/hydra-on-youtubes</id>
   <content type="html">&lt;p&gt;This will be a short post sharing two pieces of information.&lt;/p&gt;

&lt;h2 id=&quot;a-hydra-demo-is-on-youtube&quot;&gt;A Hydra demo is on Youtube&lt;/h2&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://www.youtube.com/watch?v=_qZliI1BKzI&quot;&gt;link&lt;/a&gt;, and here is the current window-switching code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amaranth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;window&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;vert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-below&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;horz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;transpose-frame&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-swap-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-delete-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;del&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ace-one&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-switch-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;headlong-bookmark-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;bmk&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;ace-window-0.7.0-is-out&quot;&gt;&lt;code&gt;ace-window 0.7.0&lt;/code&gt; is out&lt;/h2&gt;

&lt;p&gt;You can see the release notes &lt;a href=&quot;https://github.com/abo-abo/ace-window/releases/tag/0.7.0&quot;&gt;here&lt;/a&gt;.
There&amp;#39;s not a whole lot of user-visible changes, but a large portion of the code was re-written
to facilitate the use of the API. I hope that no new bugs were introduced with this change,
you can still fall back to &lt;a href=&quot;https://github.com/abo-abo/ace-window/releases/tag/0.6.1&quot;&gt;0.6.1&lt;/a&gt; and send
me &lt;a href=&quot;https://github.com/abo-abo/ace-window/issues&quot;&gt;an issue&lt;/a&gt; if something broke. There&amp;#39;s a benefit
in the long run, just see how simple the code has become:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Ace maximize window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select-window&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw-select&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; Ace - Maximize Window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;aw-select&lt;/code&gt; just returns a selected window, and nothing else. Very easy to use.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>The Elisp Synergy</title>
   <link href="http://oremacs.com/2015/02/06/the-synergy/"/>
   <updated>2015-02-06T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/06/the-synergy</id>
   <content type="html">&lt;p&gt;After having written &lt;a href=&quot;https://github.com/abo-abo?tab=repositories&quot;&gt;a few Emacs packages&lt;/a&gt;, it happens
sometimes when I&amp;#39;m reading questions on &lt;a href=&quot;http://emacs.stackexchange.com/questions&quot;&gt;Emacs Stack Exchange&lt;/a&gt;,
I think to myself that either:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;#39;ve done this before in package X&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;or:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This feature would fit nicely in package Y&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On very rare occasions it happens that a question matches two packages at once.
Here is such a &lt;a href=&quot;http://emacs.stackexchange.com/questions/8006/&quot;&gt;question&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3 id=&quot;is-there-a-yasnippet-producing-a-prepopulated-doxygen-comment?&quot;&gt;Is there a yasnippet producing a prepopulated doxygen comment?&lt;/h3&gt;

&lt;p&gt;For the following C++ function:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;bool importantStuff(double a, double b);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should output the following snippet, perhaps without the tags:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;/**
* &amp;lt;Insert description of importantStuff&amp;gt;
*
* @param a &amp;lt;Insert description of a&amp;gt;
* @param b &amp;lt;Insert description of b&amp;gt;
* @return &amp;lt;Insert description of the return value&amp;gt;
*/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, I&amp;#39;ve got a package called &lt;a href=&quot;https://github.com/abo-abo/function-args&quot;&gt;function-args&lt;/a&gt;
for C++ that uses CEDET to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;display tool-tips with function arguments&lt;/li&gt;
&lt;li&gt;jump to a semantic tag in current file&lt;/li&gt;
&lt;li&gt;do a bit of completion&lt;/li&gt;
&lt;li&gt;do a bit of generation (like inherited function signatures)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the expansion part can be handled by &lt;a href=&quot;https://github.com/abo-abo/auto-yasnippet&quot;&gt;auto-yasnippet&lt;/a&gt;, which
I&amp;#39;ve covered in &lt;a href=&quot;/2015/01/30/auto-yasnippet/&quot;&gt;an earlier post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;I think it might be useful to look at the code, since it&amp;#39;s small and shows how to use &lt;code&gt;CEDET&lt;/code&gt;&amp;#39;s and
&lt;code&gt;auto-yasnippet&lt;/code&gt;&amp;#39;s API:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;moo-doxygen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Generate a doxygen yasnippet and expand it with `aya-expand&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The point should be on the top-level function name.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;move-beginning-of-line&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;semantic-current-tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;semantic-tag-of-class-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Expected function, got %S&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;semantic-tag-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;semantic-tag-attributes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plist-get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ord&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aya-current&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
             &lt;span class=&quot;s&quot;&gt;&amp;quot;/**&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;* $1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;%s&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;* @return $%d&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;* @param %s $%d&amp;quot;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;incf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
              &lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;incf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aya-expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-bonus&quot;&gt;The bonus&lt;/h2&gt;

&lt;p&gt;If you&amp;#39;re interested in &lt;a href=&quot;http://www.doxygen.org/&quot;&gt;Doxygen&lt;/a&gt;, here&amp;#39;s a
bit of code that I found laying around. It will prettify
e.g. &lt;code&gt;&amp;lt;tt&amp;gt;Numerical Recipies&amp;lt;/tt&amp;gt;&lt;/code&gt; to &lt;font color=&quot;#8b4513&quot;&gt;Numerical
Recipies&lt;/font&gt; in the comments.
This code uses a similar approach to the one used in my posts
about &lt;a href=&quot;/2015/01/11/pretty-elisp-regex/&quot;&gt;prettifying Elisp regex&lt;/a&gt;,
and &lt;a href=&quot;/2015/01/23/eltex/&quot;&gt;ElTeX&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defface&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font-lock-doxygen-face&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:foreground&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SaddleBrown&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:background&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#f7f7f7&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;Special face to highlight doxygen tags such as &amp;lt;tt&amp;gt;...&amp;lt;/tt&amp;gt;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;and &amp;lt;code&amp;gt;...&amp;lt;/code&amp;gt;.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;font-lock-highlighting-faces&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;&amp;#39;c++-mode&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\(&amp;lt;\\(?:code\\|tt\\)&amp;gt;\&amp;quot;?\\)\\([^&amp;lt;]*?\\)\\(\&amp;quot;?&amp;lt;/\\(?:code\\|tt\\)&amp;gt;\\)&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;expr-len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr-len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-beginning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-end&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-beginning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-end&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-beginning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-end&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;expr-len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;font-lock-doxygen-face&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that the code listed here will be useful to someone other than
me. It&amp;#39;s a nice highlight of how a language can be made &lt;em&gt;much&lt;/em&gt; cooler
by just having a package manager that allows to quickly glue various
things together.  I mean, what would happen to JavaScript without npm
(besides stopping people requiring Angular just to use arrays)?&lt;/p&gt;

&lt;p&gt;C++, on the other hand, is too cool to care about such things as
package managers and modules and stuff.  But we&amp;#39;re stuck with it for
performance reasons, so might as well try to make the experience more
bearable by adding some niceties to &lt;code&gt;c++-mode&lt;/code&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Introducing amaranth Hydras</title>
   <link href="http://oremacs.com/2015/02/05/amaranth-hydra/"/>
   <updated>2015-02-05T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/05/amaranth-hydra</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;An &lt;font color=&quot;#e52b50&quot;&gt;amaranth&lt;/font&gt; planted in a garden near a &lt;font color=&quot;#FF007F&quot;&gt;Rose-Tree&lt;/font&gt;, thus addressed it:
&amp;quot;What a lovely flower is the &lt;font color=&quot;#FF007F&quot;&gt;Rose&lt;/font&gt;, a favorite alike with Gods and
with men. I envy you your beauty and your perfume.&amp;quot; The &lt;font color=&quot;#FF007F&quot;&gt;Rose&lt;/font&gt;
replied, &amp;quot;I indeed, dear &lt;font color=&quot;#e52b50&quot;&gt;Amaranth&lt;/font&gt;, flourish but for a brief season!
If no cruel hand pluck me from my stem, yet I must perish by an
early doom. But thou art immortal and dost never fade, but bloomest
for ever in renewed youth.&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Prompted by the &lt;a href=&quot;https://github.com/abo-abo/hydra/issues/17&quot;&gt;&amp;quot;Avoid exiting the hydra on hitting a wrong key&amp;quot;&lt;/a&gt; issue,
I decided to add a new body color for Hydra. Turns out that there exists a color that represents
immortality, and it&amp;#39;s called &lt;font color=&quot;#e52b50&quot;&gt;amaranth&lt;/font&gt;. It&amp;#39;s also very pretty.&lt;/p&gt;

&lt;p&gt;So what &lt;font color=&quot;#e52b50&quot;&gt;amaranth&lt;/font&gt; Hydras do basically, is make it impossible to quit them.
Of course, it would be totally lame if there wasn&amp;#39;t at least one way to quit them.
And what better to utilize for this purpose,
than the good-old quitters - the &lt;font color=&quot;#2A00FF&quot;&gt;blue&lt;/font&gt; Hydra heads.&lt;/p&gt;

&lt;h2 id=&quot;an-example-code&quot;&gt;An Example code&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:pre&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-cursor-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#e52b50&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;:post&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-cursor-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amaranth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;set-mark-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move-beginning-of-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;move-end-of-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delete-region&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;del&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;kill-ring-save&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yank&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Hydra has only three exit points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;q&lt;/kbd&gt;, which does nothing&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;y&lt;/kbd&gt;, which copies the active region&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;d&lt;/kbd&gt;, which deletes the active region&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition to the usual arrows on &lt;kbd&gt;hjkl&lt;/kbd&gt;, &lt;kbd&gt;a&lt;/kbd&gt; and
&lt;kbd&gt;e&lt;/kbd&gt; move to beginning and end of line respectively.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you like the new idea, also thanks to
&lt;a href=&quot;https://github.com/vkazanov&quot;&gt;@vkazanov&lt;/a&gt; for the push in this
direction. Things should be backwards-compatible, so this feature
costs you nothing if you&amp;#39;re not using it. See the release notes for &lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.8.0&quot;&gt;0.8.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One more thanks goes to Sridhar Ratnakumar for &lt;a href=&quot;http://oremacs.com/2015/01/30/auto-yasnippet/#comment-1833552123&quot;&gt;this suggestion&lt;/a&gt;
that lead to an improvement in &lt;a href=&quot;https://github.com/abo-abo/auto-yasnippet&quot;&gt;auto-yasnippet&lt;/a&gt;. Thanks to this improvement,
I was able to quickly wrap words like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;font color=&amp;quot;#FF007F&amp;quot;&amp;gt;Rose&amp;lt;/font&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>New in Hydra - :pre and :post clauses</title>
   <link href="http://oremacs.com/2015/02/04/pre-hydra-post/"/>
   <updated>2015-02-04T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/04/pre-hydra-post</id>
   <content type="html">&lt;p&gt;Only three commits happened since &lt;code&gt;0.6.1&lt;/code&gt;, but already &lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.7.0&quot;&gt;0.7.0&lt;/a&gt; has to
be released, since the behavior has changed slightly.&lt;/p&gt;

&lt;h2 id=&quot;the-ultimate-window-switching-setup,-revised&quot;&gt;The ultimate window switching setup, revised&lt;/h2&gt;

&lt;p&gt;The code from the &lt;a href=&quot;/2015/02/03/one-hydra-two-hydra/&quot;&gt;last post&lt;/a&gt; had to be changed.
Note that only &lt;code&gt;ace-window&lt;/code&gt;-related heads are affected, since &lt;code&gt;ace-window&lt;/code&gt; uses &lt;code&gt;set-transient-map&lt;/code&gt; as well.
This was necessary to fix &lt;a href=&quot;https://github.com/abo-abo/hydra/issues/15&quot;&gt;issue #15&lt;/a&gt; (unable to use &lt;code&gt;goto-line&lt;/code&gt; in a Hydra, since it requires input).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;window&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-disable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;ace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;vert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-below&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;horz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-disable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;transpose-frame&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-disable&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;del&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ace-one&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also see an awesome addition sneak in, with &lt;code&gt;transpose-frame&lt;/code&gt;
on &lt;kbd&gt;t&lt;/kbd&gt;.&lt;/p&gt;

&lt;h3 id=&quot;technical-note&quot;&gt;Technical note&lt;/h3&gt;

&lt;p&gt;If you look closely at the code, you&amp;#39;ll see the &lt;code&gt;ace-window&lt;/code&gt;-related
lambdas throwing the &lt;code&gt;hydra-disable&lt;/code&gt; symbol. If the Hydra code catches
that symbol, it will not call &lt;code&gt;set-transient-map&lt;/code&gt; again, effectively
making the head that threw the symbol blue.  In this example, though,
&lt;code&gt;ace-window&lt;/code&gt;-related functions are still red, since the Hydra is
resumed by calling &lt;code&gt;hydra-window/body&lt;/code&gt; in &lt;code&gt;ace-window-end-once-hook&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a trick that I have to play because of how &lt;code&gt;ace-jump-mode&lt;/code&gt;
works.  Hopefully, it won&amp;#39;t be needed for other commands. But still,
it&amp;#39;s a simple trick that you can use if you want to have a head quit
conditionally, or something.&lt;/p&gt;

&lt;h2 id=&quot;goto-line-ad-infinum&quot;&gt;&lt;code&gt;goto-line&lt;/code&gt; ad infinum&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-test&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;goto-line&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the Hydra above, it&amp;#39;s possible to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-g g&lt;/kbd&gt; &lt;code&gt;10&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; to go to line &lt;code&gt;10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt; &lt;code&gt;20&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; to go to line &lt;code&gt;20&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;g&lt;/kbd&gt; &lt;code&gt;50&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt; to go to line &lt;code&gt;50&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;change-the-cursor-color-when-a-hydra-is-active&quot;&gt;Change the cursor color when a Hydra is active&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how the new &lt;code&gt;:pre&lt;/code&gt; and &lt;code&gt;:post&lt;/code&gt; statements work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:pre&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-cursor-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#40e0d0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;:post&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-cursor-color&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this example, the cursor color will change for the duration of the Hydra.
Both &lt;code&gt;:pre&lt;/code&gt; and &lt;code&gt;:post&lt;/code&gt; should match to a single Elisp statement; you can use &lt;code&gt;progn&lt;/code&gt; to tie
a bunch of statements together if you want.&lt;/p&gt;

&lt;h2 id=&quot;a-more-evil-helm&quot;&gt;A more evil &lt;code&gt;helm&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Lit Wakefield has a nice &lt;a href=&quot;http://angelic-sedition.github.io/blog/2015/02/03/a-more-evil-helm/&quot;&gt;article&lt;/a&gt; on
using &lt;code&gt;hydra&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt; together. Do check it out, I&amp;#39;ll certainly steal some of his code.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you don&amp;#39;t have an objection to Hydra being developed at a
fast pace with many features popping up. I try my best to keep things
backwards compatible, but I really want to quickly fix the areas where
the code is lacking. Thanks to all the people contributing
&lt;a href=&quot;https://github.com/abo-abo/hydra/issues&quot;&gt;issues&lt;/a&gt;, especially
&lt;a href=&quot;https://github.com/atykhonov&quot;&gt;@atykhonov&lt;/a&gt; and
&lt;a href=&quot;https://github.com/nandryshak&quot;&gt;@nandryshak&lt;/a&gt; for the last two, which are the core
of this version bump.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>One Hydra Two Hydra Red Hydra Blue Hydra</title>
   <link href="http://oremacs.com/2015/02/03/one-hydra-two-hydra/"/>
   <updated>2015-02-03T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/03/one-hydra-two-hydra</id>
   <content type="html">&lt;p&gt;Hydra evolution picks up the pace with
&lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.6.1&quot;&gt;hydra 0.6.1&lt;/a&gt;.
This version adds prefix arguments to all Hydras.&lt;/p&gt;

&lt;h2 id=&quot;some-examples&quot;&gt;Some Examples&lt;/h2&gt;

&lt;h3 id=&quot;look-ma,-no-modifiers!&quot;&gt;Look ma, no modifiers!&lt;/h3&gt;

&lt;p&gt;Now it&amp;#39;s possible to write this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-vi&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;vi&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now &lt;kbd&gt;C-z 5j7l&lt;/kbd&gt; will move 5 lines down and 7 characters
left, still with the option to press &lt;kbd&gt;h&lt;/kbd&gt;, &lt;kbd&gt;j&lt;/kbd&gt;,
&lt;kbd&gt;k&lt;/kbd&gt;, &lt;kbd&gt;l&lt;/kbd&gt; some more.&lt;/p&gt;

&lt;p&gt;Additionally &lt;kbd&gt;C-z C-u C-u C-u k&lt;/kbd&gt; will move 64 lines up, since &lt;kbd&gt;C-u&lt;/kbd&gt; multiplies its
argument by 4 each time.&lt;/p&gt;

&lt;h3 id=&quot;the-good-old-zoom&quot;&gt;The good-old zoom&lt;/h3&gt;

&lt;p&gt;If you remember, this was the original Hydra:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-zoom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;zoom&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;in&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;out&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;kbd&gt;&amp;lt;f2&amp;gt; g 4g 2l&lt;/kbd&gt; will zoom in 5 times, and zoom out 2
times for a total of +3 zoom.&lt;/p&gt;

&lt;h3 id=&quot;the-good-old-move-splitter&quot;&gt;The good-old move-splitter&lt;/h3&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-splitter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;splitter&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This Hydra can benefit from numeric arguments as well: &lt;kbd&gt;C-M-s l
40l&lt;/kbd&gt; will quickly make the right window a lot smaller.&lt;/p&gt;

&lt;p&gt;If I wanted to type &lt;kbd&gt;C-M-s 40 l&lt;/kbd&gt;, I would have to use this definition instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-s&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-splitter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;splitter&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For that case, I would get the hint immediately after &lt;kbd&gt;C-M-s&lt;/kbd&gt; and would be able to give the numeric argument immediately,
but I wouldn&amp;#39;t be able to bind anything else on &lt;kbd&gt;C-M-s&lt;/kbd&gt; as a prefix, e.g.:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-s z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;recenter-top-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code above would give the error &lt;code&gt;&amp;quot;Key sequence C-M-s z starts with non-prefix key C-M-s&amp;quot;&lt;/code&gt;.
So you can pick the method that you prefer, the choice is there.&lt;/p&gt;

&lt;h2 id=&quot;the-ultimate-window-switching-setup&quot;&gt;The ultimate window switching setup&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;window&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;ace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;vert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split-window-below&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;horz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-window-end-once-hook&lt;/span&gt;
                    &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;del&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a1&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The credit for this monster goes to &lt;a href=&quot;https://github.com/bcarrell&quot;&gt;bcarell&lt;/a&gt;, I just refined his approach
with making &lt;code&gt;ace-window&lt;/code&gt; not quit the &lt;code&gt;hydra-window&lt;/code&gt; Hydra.
This setup needs the latest &lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the result of &lt;kbd&gt;C-M-o xvxv&lt;/kbd&gt; starting from a single window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/hydra-window.png&quot; alt=&quot;hydra-window&quot;&gt;&lt;/p&gt;

&lt;p&gt;From here, I can quickly maximize the current window with &lt;kbd&gt;o&lt;/kbd&gt;
while simultaneously quitting the Hydra; &lt;kbd&gt;i&lt;/kbd&gt; will maximize a
window as well, but it will select it with &lt;code&gt;ace-window&lt;/code&gt;, instead of
maximizing the current one.&lt;/p&gt;

&lt;p&gt;Note that, since numerical arguments are working now, &lt;kbd&gt;4a&lt;/kbd&gt; is
the same as &lt;kbd&gt;s&lt;/kbd&gt; (swap) and &lt;kbd&gt;16a&lt;/kbd&gt; or &lt;kbd&gt;C-u C-u
a&lt;/kbd&gt; is the same as &lt;kbd&gt;d&lt;/kbd&gt; (delete).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Colorful Hydras</title>
   <link href="http://oremacs.com/2015/02/02/colorful-hydrae/"/>
   <updated>2015-02-02T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/02/colorful-hydrae</id>
   <content type="html">&lt;p&gt;This post advertises the release of &lt;a href=&quot;https://github.com/abo-abo/hydra/releases/tag/0.5.0&quot;&gt;hydra.el 0.5.0&lt;/a&gt;.
The package was introduced in &lt;a href=&quot;/2015/01/20/introducing-hydra/&quot;&gt;an earlier post&lt;/a&gt; and received some positive feedback.
Currently, it&amp;#39;s available in both
&lt;a href=&quot;https://elpa.gnu.org/packages/hydra.html&quot;&gt;GNU ELPA&lt;/a&gt; (slightly behind)
and &lt;a href=&quot;http://melpa.org/#/hydra&quot;&gt;MELPA&lt;/a&gt; (always current).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/Hydra-color.png&quot; alt=&quot;colorful-hydra&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-newfound-utility&quot;&gt;The newfound utility&lt;/h2&gt;

&lt;p&gt;As I originally released the Hydra, I was asked if it was similar to
&lt;a href=&quot;http://endlessparentheses.com/the-toggle-map-and-wizardry.html&quot;&gt;this approach&lt;/a&gt;
described on &lt;a href=&quot;http://endlessparentheses.com/&quot;&gt;Endless Parentheses&lt;/a&gt;. I
said that it&amp;#39;s not, since Hydra commands are meant to be repeatable
instead of being called just once.&lt;/p&gt;

&lt;p&gt;Now, after I&amp;#39;ve designated the repeatable heads with red color and the one-off heads with blue color,
Hydra can reproduce the mentioned approach. Here&amp;#39;s how it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;toggle&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abbrev&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auto-fill-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;truncate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;whitespace-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is what I see in the echo area after pressing &lt;kbd&gt;C-c C-v&lt;/kbd&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/Hydra-toggle.png&quot; alt=&quot;hydra-toggle&quot;&gt;&lt;/p&gt;

&lt;p&gt;At this point:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;q&lt;/kbd&gt; will cancel without doing anything. I think it&amp;#39;s more
convenient than doing the equivalent &lt;kbd&gt;C-g&lt;/kbd&gt; with the
&lt;code&gt;global-set-key&lt;/code&gt; approach.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;a&lt;/kbd&gt;, &lt;kbd&gt;d&lt;/kbd&gt;, &lt;kbd&gt;f&lt;/kbd&gt;, &lt;kbd&gt;t&lt;/kbd&gt;, and &lt;kbd&gt;a&lt;/kbd&gt; will call the appropriate function.
The advantage of blue Hydra heads over &lt;code&gt;global-set-key&lt;/code&gt; is that you immediately get the hint: this can be useful
for rarely used commands.&lt;/li&gt;
&lt;li&gt;as with the old red Hydra heads, pressing anything other than
&lt;kbd&gt;a&lt;/kbd&gt;, &lt;kbd&gt;d&lt;/kbd&gt;, &lt;kbd&gt;f&lt;/kbd&gt;, &lt;kbd&gt;t&lt;/kbd&gt;, &lt;kbd&gt;a&lt;/kbd&gt;,
or &lt;kbd&gt;q&lt;/kbd&gt; will vanquish the Hydra &lt;em&gt;and&lt;/em&gt; call the key binding
that you just pressed. This is different from the &lt;code&gt;global-set-key&lt;/code&gt;
approach, which would e.g. error to your &lt;kbd&gt;C-c C-v C-n&lt;/kbd&gt; with
&lt;code&gt;&amp;quot;C-c C-v C-n is undefined&amp;quot;&lt;/code&gt;, unlike the Hydra, which would call &lt;kbd&gt;C-n&lt;/kbd&gt;
(&lt;code&gt;next-line&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-full-defhydra-syntax&quot;&gt;The full &lt;code&gt;defhydra&lt;/code&gt; syntax&lt;/h2&gt;

&lt;p&gt;Note that &lt;code&gt;defhydra&lt;/code&gt; looks intentionally like a &lt;code&gt;defun&lt;/code&gt;, so that it&amp;#39;s
easier to remember how it works.
Here&amp;#39;s a more verbose Hydra that&amp;#39;s largely equivalent to the one above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;toggle&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;abbrev&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-debug-on-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;auto-fill-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fill&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;t&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;toggle-truncate-lines&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;truncate&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;whitespace-mode&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;whitespace&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;recenter-top-bottom&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recenter&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cancel&amp;quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-v&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-toggle/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;first-argument:-hydra-name&quot;&gt;First argument: Hydra name&lt;/h3&gt;

&lt;p&gt;This argument decides the prefix to all the functions that will be generated.
In this case the following functions will be generated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;nv&quot;&gt;hydra-toggle/abbrev-mode&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/toggle-debug-on-error&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/auto-fill-mode&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/toggle-truncate-lines&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/whitespace-mode&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/recenter-top-bottom&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/nil&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;hydra-toggle/body&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final function calls the Hydra&amp;#39;s body, displaying the hint in the echo area and setting
the transient map. It&amp;#39;s the return result of &lt;code&gt;defhydra&lt;/code&gt;, that&amp;#39;s why it was possible to pass it
to &lt;code&gt;global-set-key&lt;/code&gt; in the first example.&lt;/p&gt;

&lt;h3 id=&quot;second-argument:-hydra-body&quot;&gt;Second argument: Hydra body&lt;/h3&gt;

&lt;p&gt;The Hydra body consists of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a map used for binding, like &lt;code&gt;global-map&lt;/code&gt; or &lt;code&gt;c++-mode-map&lt;/code&gt; or &lt;code&gt;projectile-mode-map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the body prefix: it&amp;#39;s a string passable to &lt;code&gt;kbd&lt;/code&gt; that will be used
in conjunction with heads&amp;#39; prefixes to bind the functions&lt;/li&gt;
&lt;li&gt;an optional plist, which currently recognizes only the &lt;code&gt;:color&lt;/code&gt; key,
which in turn can be either red (the old behavior) or blue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s possible to omit the map and the body prefix simultaneously (it
doesn&amp;#39;t make sense to omit one but not the other), or just pass &lt;code&gt;()&lt;/code&gt;
if you want to get a red Hydra body that you can bind yourself.&lt;/p&gt;

&lt;h3 id=&quot;third-argument:-hydra-hint&quot;&gt;Third argument: Hydra hint&lt;/h3&gt;

&lt;p&gt;This string will be used in the echo area to distinguish the current
Hydra. This is optional, it case you don&amp;#39;t provide it, it will default
to &lt;code&gt;&amp;quot;hydra&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;fourth-argument:-hydra-heads&quot;&gt;Fourth argument: Hydra heads&lt;/h3&gt;

&lt;p&gt;Each Hydra head is a list of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the key extension&lt;/li&gt;
&lt;li&gt;the function&lt;/li&gt;
&lt;li&gt;optional hint&lt;/li&gt;
&lt;li&gt;optional plist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again, the plist recognizes only &lt;code&gt;:color&lt;/code&gt; currently. The color is inherited from the body, if
you don&amp;#39;t specify it. In turn, the body color is red if you don&amp;#39;t specify it.&lt;/p&gt;

&lt;p&gt;The code above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;binds &lt;kbd&gt;C-c a&lt;/kbd&gt;, &lt;kbd&gt;C-c d&lt;/kbd&gt; etc with the usual &lt;code&gt;global-set-key&lt;/code&gt; approach.&lt;/li&gt;
&lt;li&gt;binds &lt;kbd&gt;C-c C-v a&lt;/kbd&gt;, &lt;kbd&gt;C-c C-v d&lt;/kbd&gt; with the new
approach, which shows you the hint right after &lt;kbd&gt;C-c C-v&lt;/kbd&gt; and
allows you to cancel easier.&lt;/li&gt;
&lt;li&gt;binds &lt;kbd&gt;C-c v&lt;/kbd&gt; to be repeatable, i.e. you can press &lt;kbd&gt;C-c v v v&lt;/kbd&gt;. Same with &lt;kbd&gt;C-c C-v v v v&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;some-more-ideas-for-blue-hydras&quot;&gt;Some more ideas for blue Hydras&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s one for some &lt;code&gt;helm&lt;/code&gt;-related functions, don&amp;#39;t ask how
&lt;code&gt;projectile-find-file&lt;/code&gt; ended up here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;κ&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-helm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&amp;quot;helm&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;projectile-find-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-org-wiki&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wiki&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-recentf&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;recent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-swoop&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;swoop&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s one more for &lt;code&gt;gnus&lt;/code&gt;; I&amp;#39;m just getting the hang of it, so some hints are useful:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-gnus-reply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;:color&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;reply&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-reply-with-original&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;O&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-wide-reply-with-original&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;all&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-wide-reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-very-wide-reply-with-original&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;universe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;U&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-very-wide-reply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;quit&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnus-summary-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-gnus-reply/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I omit the hint for the commands that do the same as the previous one,
just without citing.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you enjoy the update and let me know when you invent some
efficient blue or red-and-blue Hydras. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Blogging about blogging</title>
   <link href="http://oremacs.com/2015/02/01/blogging-about-blogging/"/>
   <updated>2015-02-01T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/02/01/blogging-about-blogging</id>
   <content type="html">&lt;p&gt;In Emacs, of course. As I mentioned before, this blog is run using
&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; and a fork of the
&lt;a href=&quot;https://github.com/poole/lanyon&quot;&gt;lanyon&lt;/a&gt; theme.&lt;/p&gt;

&lt;p&gt;It started out pretty convenient: thanks to &lt;code&gt;jekyll serve&lt;/code&gt; I would see
the live updates at &lt;code&gt;http://localhost:4000/&lt;/code&gt; as I was editing the
markdown. But after a few posts, I&amp;#39;ve experienced a drastic decrease
in refresh time: it went from under a second to 15 seconds. Below, I&amp;#39;ll show how I&amp;#39;ve managed
to speed it back up.&lt;/p&gt;

&lt;h2 id=&quot;no-posts---no-problem&quot;&gt;No posts - no problem&lt;/h2&gt;

&lt;p&gt;Thanks to &lt;code&gt;(require &amp;#39;dired-x)&lt;/code&gt; I can jump from the current post to the
posts directory with &lt;kbd&gt;C-x C-j&lt;/kbd&gt;. It even puts the point on the current file. Now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;m&lt;/kbd&gt; to mark to current file&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;t&lt;/kbd&gt; to invert the mark, making the current file unmarked and all others marked&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;D&lt;/kbd&gt; to delete all marked files. No need to worry, since
they are all version-controlled (except the original one, which isn&amp;#39;t
being deleted), &lt;code&gt;dired&lt;/code&gt; even asks you for confirmation, so I hit
&lt;kbd&gt;y&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, that there is only one post in the whole blog, &lt;code&gt;jekyll serve&lt;/code&gt; is
much faster at refreshing.&lt;/p&gt;

&lt;h2 id=&quot;even-faster-jekyll-serve&quot;&gt;Even faster &lt;code&gt;jekyll serve&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Which brings me to the next point. Since I&amp;#39;m calling it so much, might
as well wrap it in some Elisp. Elisp is like frosting - it makes everything better:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;jekyll-serve&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_posts/$&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;directory-parent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*jekyll*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;switch-to-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*jekyll*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;jekyll&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;jekyll serve\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sit-for&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;browse-url&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;localhost:4000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function, when called from the current post or the current blog, will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;open a new &lt;code&gt;ansi-term&lt;/code&gt; called &lt;code&gt;*jekyll*&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;issue a &lt;code&gt;jekyll serve&lt;/code&gt; command to it&lt;/li&gt;
&lt;li&gt;wait for 3 seconds for Jekyll to start&lt;/li&gt;
&lt;li&gt;open &lt;code&gt;localhost:4000&lt;/code&gt; in Firefox&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;one-post-isn&amp;#39;t-a-blog&quot;&gt;One post isn&amp;#39;t a blog&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how to quickly bring back the deleted posts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fire up &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;magit&lt;/a&gt;; I have &lt;code&gt;magit-status&lt;/code&gt; bound to &lt;kbd&gt;μm&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;Stage the current post with &lt;kbd&gt;s&lt;/kbd&gt; (&lt;code&gt;magit-stage-item&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Start the commit with &lt;kbd&gt;C&lt;/kbd&gt; (&lt;code&gt;magit-commit-add-log&lt;/code&gt;). I&amp;#39;m using my own modification of &lt;code&gt;magit-commit-add-log&lt;/code&gt;
that arranges the whitespace in a nice way, when aimed at a file instead of a hunk.&lt;/li&gt;
&lt;li&gt;I get &lt;code&gt;_posts/2015-02-01-blogging-about-blogging.md:&lt;/code&gt; string auto-generated by &lt;kbd&gt;C&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;I just amend it to look like &lt;code&gt;_posts/2015-02-01-blogging-about-blogging.md: add&lt;/code&gt; and finalize the commit with
&lt;kbd&gt;C-c C-c&lt;/kbd&gt; (&lt;code&gt;git-commit-commit&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Now I have around 40 files marked as deleted, but not staged. I create a stash with &lt;kbd&gt;zz&lt;/kbd&gt; and name it &lt;code&gt;foo&lt;/code&gt;
or something. Then delete the stash with &lt;code&gt;magit-discard-item&lt;/code&gt;, which I like to bind to &lt;kbd&gt;d&lt;/kbd&gt; to be similar
to &lt;code&gt;dired&lt;/code&gt;. Now it&amp;#39;s as if these files were never deleted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whoa, now that I look at it, it&amp;#39;s a lot of steps. But somehow &lt;code&gt;dired&lt;/code&gt;
and &lt;code&gt;magit&lt;/code&gt; are very similar to
&lt;a href=&quot;http://en.wikipedia.org/wiki/Super_Mario_Bros.&quot;&gt;Super Mario Bros&lt;/a&gt;: it
takes long to explain what you&amp;#39;re doing, but as you play it, it&amp;#39;s very
simple and natural.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>abel.el - abbrevs for Elisp</title>
   <link href="http://oremacs.com/2015/01/31/abel/"/>
   <updated>2015-01-31T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/31/abel</id>
   <content type="html">&lt;p&gt;This is a follow-up to
&lt;a href=&quot;/2014/12/28/trying-abbrevs/&quot;&gt;an older post about abbrevs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I did try to make Elisp abbrevs work, but after a few times of getting
&lt;code&gt;is&lt;/code&gt; expanded to &lt;code&gt;indent-sexp&lt;/code&gt; in strings or comments, I just could
take it no longer.&lt;/p&gt;

&lt;p&gt;Luckily and timely, Artur Malabarba revealed his
&lt;a href=&quot;https://github.com/Bruce-Connor/speed-of-thought-lisp&quot;&gt;speed-of-thought-lisp&lt;/a&gt;. This
package does many things, but the main idea that I liked was that the
abbrevs should only expand when in the function position, i.e. the
abbrev is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;right after opening parenthesis&lt;/li&gt;
&lt;li&gt;not in a comment&lt;/li&gt;
&lt;li&gt;not in a string&lt;/li&gt;
&lt;li&gt;not in the arguments list&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With that idea, I&amp;#39;ve &amp;quot;refactored&amp;quot; my old abbrevs into
&lt;a href=&quot;https://github.com/abo-abo/abel&quot;&gt;Abel&lt;/a&gt;.  It&amp;#39;s a minor mode add-on for
&lt;code&gt;abbrev-mode&lt;/code&gt;. When you activate it, around a hundred abbrevs are
added to your abbrev list for &lt;code&gt;emacs-lisp-mode&lt;/code&gt;. When you deactivate
it, these abbrevs are disabled, and your original abbrev list is
restored. It even overrides the mode-line description to &lt;code&gt;Abbrev&lt;/code&gt; -&amp;gt;
&lt;code&gt;Abel&lt;/code&gt; while it&amp;#39;s active, thanks to
&lt;a href=&quot;https://github.com/emacsmirror/diminish&quot;&gt;diminish&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So while you should try &lt;code&gt;sotl&lt;/code&gt;, which provides many other things, keep
&lt;code&gt;abel&lt;/code&gt; in mind: it&amp;#39;s a simple upgrade to &lt;code&gt;abbrev-mode&lt;/code&gt; that binds no
bindings and asks no questions.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the current list:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;abel-abbrevs&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; basics&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;and&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;boundp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;concat&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fboundp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ii&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;interactive&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;insert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;n&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;not&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;format&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;unless&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;up&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;unwind-protect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;when&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;while&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;require&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ci&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;call-interactively&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;condition-case&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pg&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;plist-get&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sa&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-excursion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-restriction&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-match-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; defines&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;de&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;declare-function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;defface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;da&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;defmacro&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;du&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;defcustom&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dv&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;defvar&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; everything with char&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char-after&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; everything with region&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ra&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-active-p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;re&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ntr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;narrow-to-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ir&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;indent-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; error related&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ie&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ignore-errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;error&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; regex match related&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;la&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-back&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;msn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-string-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ro&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;regexp-opt&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rq&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;regexp-quote&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-regexp-in-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; words&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fw&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-word&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bw&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backward-word&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; lines&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eol&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;end-of-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lbp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line-beginning-position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lep&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line-end-position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nai&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;newline-and-indent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; buffer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bfn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-file-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bsn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wcb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with-current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wtb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with-temp-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;efn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;expand-file-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ff&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;find-file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ffn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;find-file-noselect&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; window&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;other-window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sw&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;selected-window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; string&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ssn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ss&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;substring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;si&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;split-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;se&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string=&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;stringp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; point&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pi&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point-min&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point-max&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; key&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gk&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;global-set-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dk&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;define-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;;; rest&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ah&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add-hook&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add-to-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bod&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beginning-of-defun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bol&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beginning-of-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;deactivate-mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-sexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jos&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;just-one-space&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;kn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;kill-new&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;load-path&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;major-mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sic&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self-insert-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;symbol-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tap&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;thing-at-point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;this-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;up-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;List of (ABBREV EXPANSION) used by `abel&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;Update abbrevs accoring to `abel-abbrevs&amp;#39;.&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;abel-define&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;abel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Re-introducing auto-yasnippet</title>
   <link href="http://oremacs.com/2015/01/30/auto-yasnippet/"/>
   <updated>2015-01-30T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/30/auto-yasnippet</id>
   <content type="html">&lt;p&gt;I wonder, when the code isn&amp;#39;t touched in a long time, is it good (no
need for changes) or bad (became obsolete)?  Let&amp;#39;s find out. I&amp;#39;ll
explain here
&lt;a href=&quot;https://github.com/abo-abo/auto-yasnippet&quot;&gt;auto-yasnippet&lt;/a&gt;, my
&lt;em&gt;second&lt;/em&gt; package in MELPA out of more than a dozen currently that saw
almost no changes since the initial commit two years ago, and see if
you like it.&lt;/p&gt;

&lt;h2 id=&quot;short-description-of-yasnippet&quot;&gt;Short description of &lt;code&gt;yasnippet&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;YASnippet&lt;/a&gt; is a template
system for Emacs. It allows you to type an abbreviation and
automatically expand it into function templates. Bundled language
templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML,
CSS and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;snippet-step-by-step&quot;&gt;Snippet step-by-step&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s one of the snippets that I use for &lt;code&gt;emacs-lisp-mode&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# -*- mode: snippet -*-
# name: function
# key: d
# --
(defun $1 ($2)
$0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The name of the snippet, &lt;code&gt;function&lt;/code&gt; is more like a comment than
anything else.&lt;/li&gt;
&lt;li&gt;On the other hand, &lt;code&gt;key&lt;/code&gt; is very important: it&amp;#39;s what I have to
insert in the buffer to get the expansion with &lt;kbd&gt;M-x&lt;/kbd&gt;
&lt;code&gt;yas-expand&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Everything after &lt;code&gt;# --&lt;/code&gt; is the snippet body.&lt;/li&gt;
&lt;li&gt;This particular snippet has two fields, in places of &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;$2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$0&lt;/code&gt; is where the point will be when the snippet expansion is finished&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I expand, pressing &lt;kbd&gt;TAB&lt;/kbd&gt; will move from field to field
until the expansion is finished.&lt;/p&gt;

&lt;h3 id=&quot;snippets-are-mode-local&quot;&gt;Snippets are mode-local&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s the corresponding snippet for &lt;code&gt;clojure-mode&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# -*- mode: snippet -*-
# name: defn
# key: d
# --
(defn $1 [$2]
$0)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, the &lt;code&gt;key&lt;/code&gt; here is the same; you&amp;#39;re allowed to overload
them based on the current &lt;code&gt;major-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Even after &lt;a href=&quot;/archive/&quot;&gt;quite a few posts&lt;/a&gt;, I still keep forgetting
Jekyll&amp;#39;s syntax for the post header. This is my reminder:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# -*- mode: snippet -*-
# name: post
# key: post
# --
---
layout: post
title: $0
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;mirrors-in-snippets&quot;&gt;Mirrors in snippets&lt;/h3&gt;

&lt;p&gt;This simple snippet introduces a powerful concept, and an important
&lt;code&gt;yasnippet&lt;/code&gt; feature that &lt;code&gt;auto-yasnippet&lt;/code&gt; uses:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# -*- mode: snippet -*-
#name : class ... { ... }
# --
class $1$2
{
public:
 $1($0)
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a snippet for a class declaration in &lt;code&gt;c++-mode&lt;/code&gt;; &lt;code&gt;$1&lt;/code&gt;, the
name of the class, is mirrored in the name of the constructor. This
way, you don&amp;#39;t have to enter it twice.&lt;/p&gt;

&lt;h2 id=&quot;what-auto-yasnippet-does&quot;&gt;What &lt;code&gt;auto-yasnippet&lt;/code&gt; does&lt;/h2&gt;

&lt;p&gt;All the snippets listed above are pre-configured, persistent and very
rarely changed.  They are like &lt;em&gt;plain functions&lt;/em&gt; in the source
code. Each of them needs their own file and so on.&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;auto-yasnippet&lt;/code&gt; provides are &lt;em&gt;throw-away lambdas&lt;/em&gt;, that don&amp;#39;t
need a file and aren&amp;#39;t persistent.&lt;/p&gt;

&lt;h3 id=&quot;basic-install-of-auto-yasnippet&quot;&gt;Basic install of &lt;code&gt;auto-yasnippet&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To get a usable install, you just need to bind &lt;code&gt;aya-create&lt;/code&gt;, which is
similar in spirit to &lt;kbd&gt;M-w&lt;/kbd&gt; (&lt;code&gt;kill-ring-save&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;H-w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aya-create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;aya-expand&lt;/code&gt;, which is similar to &lt;kbd&gt;C-y&lt;/kbd&gt; (&lt;code&gt;yank&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;H-y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aya-expand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also like to bind:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;aya-open-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m using &lt;kbd&gt;C-o&lt;/kbd&gt; to do all of these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expand-abbrev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yas-expand&lt;/code&gt; and &lt;code&gt;yas-next-field-or-maybe-expand&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open-line&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-1:-javascript&quot;&gt;Example 1: JavaScript&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say that you have this code and want to generate more like it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s even assume that you know how &lt;code&gt;auto-yasnippet&lt;/code&gt; works and wrote down a slightly modified code beforehand:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field~1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;~&lt;/code&gt; are meant to represent &lt;code&gt;yasnippet&lt;/code&gt;&amp;#39;s mirrors, they will be
consistent across every expansion. Now you type &lt;kbd&gt;H-w&lt;/kbd&gt; (&lt;code&gt;aya-create&lt;/code&gt;), which works on the current
line when there&amp;#39;s no region. Your code becomes the initial one without &lt;code&gt;~&lt;/code&gt;, and &lt;code&gt;aya-current&lt;/code&gt; variable now holds:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;nv&quot;&gt;aya-current&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; &amp;quot;field$1 = document.getElementById(\&amp;quot;field$1\&amp;quot;);&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By typing e.g. &lt;kbd&gt;H-y 2 C-o RET&lt;/kbd&gt;, &lt;kbd&gt;H-y 3 C-o RET&lt;/kbd&gt;, &lt;kbd&gt;H-y Final C-o RET&lt;/kbd&gt; you get:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;field3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fieldFinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fieldFinal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note again, that there would be little point to saving this snippet in
a file, since the situation where you need to use it may not come up
again.&lt;/p&gt;

&lt;h3 id=&quot;example-2:-java&quot;&gt;Example 2: Java&lt;/h3&gt;

&lt;p&gt;Here&amp;#39;s the starting code, with fields and mirrors already in place
(note one mirror named &lt;code&gt;~On&lt;/code&gt;, one field named &lt;code&gt;~on&lt;/code&gt; and one field
named &lt;code&gt;~true&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Light&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;On&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Turning ~on lights&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since the code spans multiple lines, as is often the case with Java, you need to mark it
with a region before &lt;kbd&gt;H-w&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the final result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LightOn&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LightOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Turning on lights&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LightOff&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LightOff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Turning off lights&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;light&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;No need for &lt;code&gt;AbstractLightFactoryAdapterProvider&lt;/code&gt; when we can just
copy-paste stuff with &lt;code&gt;auto-yasnippet&lt;/code&gt;. In fact, I should probably
emphasize that when describing &lt;code&gt;auto-yasnippet&lt;/code&gt;: it&amp;#39;s just an advanced
copy-paste tool.&lt;/p&gt;

&lt;h3 id=&quot;example-3:-c++&quot;&gt;Example 3: C++&lt;/h3&gt;

&lt;p&gt;Suppose that I want to generate &lt;code&gt;curl&lt;/code&gt; from the &lt;code&gt;grad&lt;/code&gt;. I can start with this template:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, I need less than a line, so region needs to be marked again. The result:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note how annoying it would be to triple check that the indices match.
This time, I just had to check the first line.&lt;/p&gt;

&lt;h3 id=&quot;example-4:-taking-~-out-of-the-equation&quot;&gt;Example 4: taking &lt;code&gt;~&lt;/code&gt; out of the equation&lt;/h3&gt;

&lt;p&gt;This works only for one-line snippets with a single mirror parameter.
In the JavaScript example, you can leave a &lt;code&gt;$&lt;/code&gt; instead of each
occurrence of &lt;code&gt;$1&lt;/code&gt;, and with the point in place of the last occurrence
you call &lt;kbd&gt;H-w&lt;/kbd&gt; (&lt;code&gt;aya-create&lt;/code&gt;).  Here, &lt;code&gt;|&lt;/code&gt; represents the point:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;field$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The final result is the same:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;field1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;field2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;field3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;field3&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;fieldFinal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fieldFinal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that this package will lessen your suffering when dealing with
verbose programming languages and repetitive text, and that a day will
come when repetition is no longer needed and &lt;code&gt;auto-yasnippet&lt;/code&gt; will
become obsolete.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Combining ace-window and windmove with hydra</title>
   <link href="http://oremacs.com/2015/01/29/more-hydra-goodness/"/>
   <updated>2015-01-29T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/29/more-hydra-goodness</id>
   <content type="html">&lt;p&gt;I was inspired by Sacha Chua&amp;#39;s &lt;a href=&quot;http://sachachua.com/blog/2015/01/emacs-microhabit-switching-windows-windmove-ace-window-ace-jump/&quot;&gt;recent post&lt;/a&gt;
explaining her window bindings, that combine both &lt;code&gt;ace-window&lt;/code&gt; and &lt;code&gt;windmove&lt;/code&gt;.
So I wrote down an update to Hydra in order to get a similar setup.&lt;/p&gt;

&lt;h2 id=&quot;sacha&amp;#39;s-code&quot;&gt;Sacha&amp;#39;s code&lt;/h2&gt;

&lt;p&gt;Here it is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key-chord-define-global&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;yy&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sacha/def-rep-command&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;left&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;right&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;down&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;up&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;my-code&quot;&gt;My code&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what I&amp;#39;ve come up with, thanks to the newest code in
&lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-universal-argument&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;P&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prefix-arg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;consp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defhydra&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;window&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-left&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-down&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;down&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-up&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;up&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;windmove-right&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ace&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-universal-argument&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;universal&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;s&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;swap&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;key-chord-define-global&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;yy&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-window/body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The new code should already be available in
&lt;a href=&quot;http://melpa.org/&quot;&gt;MELPA&lt;/a&gt;.  I&amp;#39;ll update the code in
&lt;a href=&quot;https://elpa.gnu.org/packages/hydra.html&quot;&gt;GNU ELPA&lt;/a&gt; soon, when I make
sure that there were no bugs introduced by the change.&lt;/p&gt;

&lt;p&gt;If anyone wants to see how the &lt;code&gt;defhydra&lt;/code&gt; macro expands, you can check
out
&lt;a href=&quot;https://github.com/abo-abo/hydra/blob/master/hydra-test.el&quot;&gt;hydra-test.el&lt;/a&gt;.
I just added a Travis CI setup, so if you&amp;#39;re interested in starting
to test your Elisp code, you can have a very simple example.&lt;/p&gt;

&lt;h2 id=&quot;how-the-defined-hydra-works&quot;&gt;How the defined Hydra works&lt;/h2&gt;

&lt;p&gt;With this setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;to swap two windows (i.e. call &lt;kbd&gt;C-u&lt;/kbd&gt; &lt;code&gt;ace-window&lt;/code&gt;), I can do any of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;C-M-o s&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-M-o ua&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;yys&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;yyua&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to delete one window (i.e. call &lt;kbd&gt;C-u C-u&lt;/kbd&gt; &lt;code&gt;ace-window&lt;/code&gt;), any of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;C-M-o d&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-M-o uua&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;yyd&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;yyuua&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;to move one window down, two windows right, and one window up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;C-M-o jllk&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;yyjllk&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although every other shortcut except the Hydra heads will vanquish the
Hydra, sometimes I have nothing on my mind that needs doing. For that
case, as you can see above, I enter &lt;kbd&gt;o&lt;/kbd&gt; in its own list
without a function, so that &lt;kbd&gt;o&lt;/kbd&gt; will dismiss the Hydra
without doing anything.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>A few notes on Elisp indentation</title>
   <link href="http://oremacs.com/2015/01/28/notes-on-elisp-indentation/"/>
   <updated>2015-01-28T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/28/notes-on-elisp-indentation</id>
   <content type="html">&lt;p&gt;I sure do like to keep my Elisp code nice and indented.
But sometimes the indentation engine just won&amp;#39;t listen.&lt;/p&gt;

&lt;h2 id=&quot;lisp-indent-function&quot;&gt;lisp-indent-function&lt;/h2&gt;

&lt;p&gt;By default, the indentation is handled as if:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lisp-indent-function&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lisp-indent-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At least in one case, it looks horrible:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; (0 1 4 9 16 25)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s why I have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lisp-indent-function&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;common-lisp-indent-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which leads to this indentation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cl-labels&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;square&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; (0 1 4 9 16 25)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ah, much better. The indentation does change a bit in other places as
a result of this. To my experience, it can be fixed on a case-by-case
basis by declaring the indent level for the offending function or
macro.&lt;/p&gt;

&lt;h2 id=&quot;declaring-indent-level&quot;&gt;Declaring indent level&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how it looks like&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-save-excursion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;&amp;amp;rest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;More intuitive (`save-excursion&amp;#39; BODY).&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;declare&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indent&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;back-to-indentation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default, functions behave as if their &lt;code&gt;indent&lt;/code&gt; was declared to &lt;code&gt;nil&lt;/code&gt;.
Zero here means that we expect zero arguments on the same line, so that this indentation follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-save-excursion&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--out-forward&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indent-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The indentation above is just like the one that the original &lt;code&gt;save-excursion&lt;/code&gt; has.
Note that if I hadn&amp;#39;t declared the indent, it would look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-save-excursion&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--out-forward&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;indent-sexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The impact is much larger for statements that require an &lt;code&gt;indent&lt;/code&gt; of 1:&lt;/p&gt;

&lt;p&gt;Compare the proper thing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-dotimes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Reached end of buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;to this horror:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-dotimes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Reached end of buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve shown two things you can try if you find your Elisp indentation
annoying. If you know of more, let me know.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My "refactoring" workflow</title>
   <link href="http://oremacs.com/2015/01/27/my-refactoring-workflow/"/>
   <updated>2015-01-27T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/27/my-refactoring-workflow</id>
   <content type="html">&lt;p&gt;Well, &amp;quot;refactoring&amp;quot; is for the Java people, I simply rename things.
Just today, I had to do a big rename operation related to the
&lt;a href=&quot;https://github.com/abo-abo/lispy/releases&quot;&gt;release of lispy 0.22.0&lt;/a&gt;.
Below, I&amp;#39;ll share some functions and packages that I used for that.&lt;/p&gt;

&lt;h2 id=&quot;my-github-setup&quot;&gt;My Github setup&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s it (&lt;code&gt;tree -da -L 1&lt;/code&gt;) is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;.
├── .cask
├── gh-pages
├── .git
└── images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;ve cloned my &lt;code&gt;gh-pages&lt;/code&gt; branch into its own git repository &lt;em&gt;inside&lt;/em&gt;
the original &lt;code&gt;lispy&lt;/code&gt; repository. This way, I can rename functions in
the code and the documentation simultaneously.&lt;/p&gt;

&lt;h2 id=&quot;declaring-functions-obsolete-in-elisp&quot;&gt;Declaring functions obsolete in Elisp&lt;/h2&gt;

&lt;p&gt;It can be done like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;define-obsolete-function-alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-out-forward&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-right&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.21.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;define-obsolete-function-alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-out-backward&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-left&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.21.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;define-obsolete-function-alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-out-forward-nostring&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-right-nostring&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;0.21.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After version &lt;code&gt;&amp;quot;0.21.0&amp;quot;&lt;/code&gt; hits, any time you call &lt;code&gt;lispy-left&lt;/code&gt; by its
now obsolete alias &lt;code&gt;lispy-out-backward&lt;/code&gt;, you&amp;#39;ll get a message:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`lispy-out-forward&amp;#39; is an obsolete command (as of 0.21.0); use `lispy-right&amp;#39; instead.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now, since I&amp;#39;m releasing version &lt;code&gt;&amp;quot;0.22.0&amp;quot;&lt;/code&gt;, I can remove even the
alias declarations. I gave people one week of warnings to adjust (just
rename to the new name) any of their code that&amp;#39;s calling the currently
obsolete functions.&lt;/p&gt;

&lt;h2 id=&quot;renaming-obsolete-functions-in-the-documentation&quot;&gt;Renaming obsolete functions in the documentation&lt;/h2&gt;

&lt;p&gt;Taking advantage of the repository setup, I can:&lt;/p&gt;

&lt;h3 id=&quot;step-1:-call-rgrep&quot;&gt;Step 1: call &lt;code&gt;rgrep&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;rgrep&lt;/code&gt; is a fine function, I wonder why it&amp;#39;s not bound by default; I
bind it to &lt;kbd&gt;C-&amp;lt;&lt;/kbd&gt;, taking advantage of my weird key
mappings (I&amp;#39;m actually pressing the &lt;kbd&gt;C-;-l&lt;/kbd&gt; physical keys).&lt;/p&gt;

&lt;p&gt;It requires 3 inputs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Symbol to search for&lt;/strong&gt;: I call it with the point positioned on
the symbol that I want to rename in the code, in the middle of the
&lt;code&gt;define-obsolete-function-alias&lt;/code&gt; tag, so &lt;code&gt;rgrep&lt;/code&gt; picks up the
symbol name as the default and I just type &lt;kbd&gt;RET&lt;/kbd&gt; to select
it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;File pattern&lt;/strong&gt;: &lt;code&gt;*.el&lt;/code&gt;, the current file extension is the
default. I type &lt;code&gt;*&lt;/code&gt; &lt;kbd&gt;RET&lt;/kbd&gt;, since I want to match the &lt;code&gt;org&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt;
files as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Base directory&lt;/strong&gt;: this directory will be will be recursively
searched for files that match the file pattern; the default
&lt;code&gt;~/git/lispy/&lt;/code&gt; is fine here, &lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-2:-call-wgrep&quot;&gt;Step 2: call &lt;code&gt;wgrep&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mhayashi1120/Emacs-wgrep&quot;&gt;wgrep&lt;/a&gt; is a fine
package, I wonder why it&amp;#39;s not more popular. Since it&amp;#39;s so similar to
&lt;code&gt;wdired&lt;/code&gt; (one of the best things since sliced bread, btw), I like to bind
the starter to  &lt;kbd&gt;C-x C-q&lt;/kbd&gt; and the finisher to &lt;kbd&gt;C-c C-c&lt;/kbd&gt;
as well:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;grep&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;grep-mode-map&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-x C-q&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;wgrep-change-to-wgrep-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;wgrep&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;grep-mode-map&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-c&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;wgrep-finish-edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;step-3:-call-iedit&quot;&gt;Step 3: call &lt;code&gt;iedit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/victorhge/iedit&quot;&gt;iedit&lt;/a&gt; is an amazing package, it&amp;#39;s crazy-good.
Here&amp;#39;s how I bind it, since once &lt;code&gt;iedit-mode&lt;/code&gt; is on, you can move to the next occurrence with &lt;kbd&gt;C-i&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;iedit-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to change &lt;em&gt;really&lt;/em&gt; every occurrence in the buffer, I need to
mark the thing that I want to change, before &lt;kbd&gt;C-M-i&lt;/kbd&gt;.
Otherwise, &lt;code&gt;iedit&lt;/code&gt; will automatically add symbol bounds (a nice
feature, actually), so that e.g. &lt;code&gt;=lispy-out-forward=&lt;/code&gt; will not match
&lt;code&gt;lispy-out-forward&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I interactively, char-by-char, rename e.g. &lt;code&gt;lispy-out-forward&lt;/code&gt; to &lt;code&gt;lispy-right&lt;/code&gt;.
The experience is similar to the popular &lt;a href=&quot;https://github.com/magnars/multiple-cursors.el&quot;&gt;multiple-cursors&lt;/a&gt;,
which I also like to use, just for different purposes.&lt;/p&gt;

&lt;h3 id=&quot;step-4:-exiting&quot;&gt;Step 4: exiting&lt;/h3&gt;

&lt;p&gt;When I&amp;#39;m done:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I exit &lt;code&gt;iedit-mode&lt;/code&gt; with &lt;kbd&gt;C-M-i&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;I exit &lt;code&gt;wgrep&lt;/code&gt; with &lt;kbd&gt;C-c C-c&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;I save all affected files if I want, since they aren&amp;#39;t saved yet and
it&amp;#39;s still possible to revert everything.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Woah, that&amp;#39;s a lot of steps!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;True, but do note that all three tools can be used on their own for
various other tasks.  See for instance my other
&lt;a href=&quot;http://youtu.be/DFTXnC1scno?t=3m49s&quot;&gt;&amp;quot;refactoring&amp;quot; demo&lt;/a&gt;, that uses
&lt;code&gt;iedit-mode&lt;/code&gt; to unbind a &lt;code&gt;let&lt;/code&gt;-bound variable in Elisp (should also
work for Common Lisp, since the syntax is the same).&lt;/p&gt;

&lt;p&gt;There&amp;#39;s beauty and utility in having such composable tools. A lot of
the time, it&amp;#39;s better than to just have one &amp;quot;Rename&amp;quot; button. For
instance, when only one buffer is involved, the &lt;code&gt;rgrep&lt;/code&gt;-&lt;code&gt;wgrep&lt;/code&gt; step
can be skipped and I can rename stuff with &lt;code&gt;iedit-mode&lt;/code&gt; only.&lt;/p&gt;

&lt;p&gt;Or, when the playground for renaming is less than a buffer, I can:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;kbd&gt;C-x nd&lt;/kbd&gt; - &lt;code&gt;narrow-to-defun&lt;/code&gt; or &lt;kbd&gt;C-x nn&lt;/kbd&gt; -
&lt;code&gt;narrow-to-region&lt;/code&gt; (both are equivalent to &lt;kbd&gt;N&lt;/kbd&gt; in &lt;code&gt;lispy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iedit-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-x nw&lt;/kbd&gt; - &lt;code&gt;widen&lt;/code&gt; (&lt;kbd&gt;W&lt;/kbd&gt; in &lt;code&gt;lispy&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>occur-dwim (Do What I Mean)</title>
   <link href="http://oremacs.com/2015/01/26/occur-dwim/"/>
   <updated>2015-01-26T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/26/occur-dwim</id>
   <content type="html">&lt;p&gt;I&amp;#39;d like to share a little snippet that I like to use instead of a
plain &lt;kbd&gt;M-s o&lt;/kbd&gt; (&lt;code&gt;occur&lt;/code&gt;).&lt;/p&gt;

&lt;h2 id=&quot;smarter-than-the-average-occur&quot;&gt;smarter-than-the-average-occur&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;occur-dwim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Call `occur&amp;#39; with a sane default.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-substring-no-properties&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sym&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;regexp-quote&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;regexp-history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call-interactively&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;occur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will offer as the default candidate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the current region, if it&amp;#39;s active&lt;/li&gt;
&lt;li&gt;the current symbol, otherwise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;#39;s pretty good, since I actually want the default candidate in 95%
of the cases.  Some other functions, such as &lt;code&gt;rgrep&lt;/code&gt; are smart like
this out-of-the-box.&lt;/p&gt;

&lt;h2 id=&quot;a-hydra-that-goes-nicely-with-occur&quot;&gt;A Hydra that goes nicely with &lt;code&gt;occur&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Since &lt;code&gt;occur&lt;/code&gt;, like some other functions (&lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;rgrep&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;),
works with &lt;code&gt;next-error&lt;/code&gt;, it&amp;#39;s possible to use this
&lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;Hydra&lt;/a&gt; to navigate the &lt;code&gt;occur&lt;/code&gt;
matches:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-g&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;first-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;next&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;previous-error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;prev&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Hydra was introduced in an
&lt;a href=&quot;/2015/01/20/introducing-hydra/&quot;&gt;earlier post&lt;/a&gt;,
and is available in GNU ELPA.&lt;/p&gt;

&lt;h2 id=&quot;what-goes-around-comes-around&quot;&gt;What goes around comes around&lt;/h2&gt;

&lt;p&gt;I usually do a quick internet search to see where I got the code that
I&amp;#39;m posting here, reason being that it&amp;#39;s nice to list the source, as
well as there could be more advanced stuff out there on the same
topic.&lt;/p&gt;

&lt;p&gt;I saw a few results for &lt;code&gt;&amp;quot;occur-dwim&amp;quot;&lt;/code&gt; so I thought that I just
copy-pasted it from somewhere. Slight disappointment turned into a
small sense of pride, when I found that the source of the copy-pastes
was my old Stack Overflow answer:)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Exploring Emacs packages</title>
   <link href="http://oremacs.com/2015/01/25/exploring-emacs-packages/"/>
   <updated>2015-01-25T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/25/exploring-emacs-packages</id>
   <content type="html">&lt;p&gt;Currently, &lt;a href=&quot;http://melpa.org/&quot;&gt;MELPA&lt;/a&gt; hosts over &lt;code&gt;2250&lt;/code&gt; packages. That&amp;#39;s
quite a large number, although it&amp;#39;s still feasible to try most of the
popular ones. In comparison,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;apt-cache pkgnames &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; wc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gives me the number &lt;code&gt;50250&lt;/code&gt;. I don&amp;#39;t recall calling &lt;code&gt;apt-cache
pkgnames&lt;/code&gt; ever before, while I call &lt;code&gt;package-list-packages&lt;/code&gt; all the
time. I suppose that this will have to change when the number of
packages grows further.&lt;/p&gt;

&lt;p&gt;I usually explore packages just as they show up as new in &lt;code&gt;package-list-packages&lt;/code&gt;.
I&amp;#39;ll share the two tools that I use for exploring them.&lt;/p&gt;

&lt;h2 id=&quot;smex&quot;&gt;Smex&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/nonsequitur/smex&quot;&gt;Smex&lt;/a&gt; is an &lt;kbd&gt;M-x&lt;/kbd&gt; enhancement for Emacs.
In addition to executing commands faster, it gives you an option to jump to the current command&amp;#39;s definition
with &lt;kbd&gt;M-.&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how I bind &lt;code&gt;smex&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;smex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-t&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;smex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;smex-prepare-ido-bindings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-completion-map&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-,&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;smex-describe-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-completion-map&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-w&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;smex-where-is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-completion-map&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;smex-find-function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-completion-map&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-a&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;move-beginning-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; (define-key ido-completion-map &amp;quot;\C-i&amp;quot; &amp;#39;smex-helm)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;;; (define-key ido-completion-map &amp;quot; &amp;quot; &amp;#39;smex-helm)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I don&amp;#39;t feel bad at all for unbinding &lt;code&gt;transpose-chars&lt;/code&gt;,
&lt;kbd&gt;C-t&lt;/kbd&gt; is such a prime binding, that only the best commands
can deserve it. And since I touch-type, it&amp;#39;s easier for me to hit
&lt;kbd&gt;M-DEL&lt;/kbd&gt; and retype the word when I notice a mistake, than to
carefully navigate to the mistake location and call &lt;code&gt;transpose-chars&lt;/code&gt;
with surgical precision. On the other hand, the number of Emacs
packages is only going to grow, so it becomes less and less feasible
to bind everything. Instead, seldom used stuff can be called though
&lt;code&gt;smex&lt;/code&gt;. For instance, I don&amp;#39;t bind
&lt;a href=&quot;https://github.com/ardumont/markdown-toc&quot;&gt;markdown-toc&lt;/a&gt; or
&lt;a href=&quot;https://github.com/hagleitn/speed-type&quot;&gt;speed-type&lt;/a&gt; and call them via
&lt;kbd&gt;C-t&lt;/kbd&gt; instead.&lt;/p&gt;

&lt;p&gt;Back to the point, &lt;kbd&gt;C-t&lt;/kbd&gt; ... &lt;kbd&gt;C-.&lt;/kbd&gt;
(&lt;code&gt;smex-find-function&lt;/code&gt;) allows me to quickly jump to the source of the
package that I want to explore.&lt;/p&gt;

&lt;h2 id=&quot;semantic-tags&quot;&gt;Semantic tags&lt;/h2&gt;

&lt;p&gt;Once I&amp;#39;m in the source code, I can quickly get an overview with
&lt;kbd&gt;g&lt;/kbd&gt; (&lt;code&gt;lispy-goto&lt;/code&gt;) from
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt;. It uses CEDET&amp;#39;s semantic
module to get a list of tags in current directory with
&lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; for completion.  In my
opinion, it&amp;#39;s much prettier than &lt;code&gt;helm&lt;/code&gt;&amp;#39;s own &lt;code&gt;helm-semantic&lt;/code&gt;. It also
explores more tags for Emacs Lisp, for instance it will capture
&lt;code&gt;use-package&lt;/code&gt; and &lt;code&gt;global-set-key&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;A new cute feature that I added recently is a different background for
user-visible functions, i.e.  the ones that are callable by
&lt;kbd&gt;M-x&lt;/kbd&gt; or &lt;code&gt;smex&lt;/code&gt;.  Here&amp;#39;s how it looks like, for the
&lt;code&gt;speed-type&lt;/code&gt; package (interactive functions have a purple background):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/lispy-goto.png&quot; alt=&quot;lispy-goto&quot;&gt;&lt;/p&gt;

&lt;p&gt;If the image text looks too small, you can right click / view image in
your browser. Here, I can see at a glance, that there are three
commands that I can call.  I can also see a few variables, two of them
don&amp;#39;t include &lt;code&gt;--&lt;/code&gt;, so they&amp;#39;re probably customizable.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Do things after selecting window</title>
   <link href="http://oremacs.com/2015/01/24/after-select-window/"/>
   <updated>2015-01-24T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/24/after-select-window</id>
   <content type="html">&lt;p&gt;I saw this question today at Stack Overflow -
&lt;a href=&quot;http://stackoverflow.com/q/28124095/1350992&quot;&gt;Emacs: How to enable toolbar mode and menubar mode only under a certain mode?&lt;/a&gt;.
Myself, I never use the menubar or the toolbar. But maybe it&amp;#39;s just
because it&amp;#39;s useless in the modes to which I&amp;#39;m used to. What if there
was an option to have the menu bar &lt;em&gt;on&lt;/em&gt; just for a few select
modes?  For instance, if I decided that I want to learn Haskell
tomorrow, I wouldn&amp;#39;t mind to have the menu bar on for a while,
especially if there was some useful stuff there in the menu.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m not aware of a convenient hook for this job; I tried
&lt;code&gt;after-change-major-mode-hook&lt;/code&gt;, and it doesn&amp;#39;t work when switching
windows. The universal &lt;code&gt;post-command-hook&lt;/code&gt; would be totally lame for this task.&lt;/p&gt;

&lt;p&gt;Then it occurred to me, that &lt;code&gt;select-window&lt;/code&gt; &lt;em&gt;has&lt;/em&gt; to be called
eventually in most circumstances.  Even
&lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; calls
&lt;code&gt;select-window&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is what I came up with so far:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menubar-last&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;make-ring&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menubar-last&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;after&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;select-window-menubar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-ref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menubar-last&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menubar-last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yes-or-no&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;memq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;major-mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;r-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lisp-interaction-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;menu-bar-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;yes-or-no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tool-bar-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;yes-or-no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-ring-trickery&quot;&gt;The Ring trickery&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s necessary at least for &lt;code&gt;magit&lt;/code&gt;. Doing, for instance,
&lt;kbd&gt;ll&lt;/kbd&gt; operation switches windows many times.
So I added a check that the current buffer isn&amp;#39;t selected twice.&lt;/p&gt;

&lt;p&gt;In Emacs, a ring is like a stack with a limited length: you push onto
the head, and if the stack becomes too large, the stuff gets removed
from the tail. Perfect for debugging this code, since I don&amp;#39;t care
what happened 20 window switches ago, I&amp;#39;m only interested in the most
recent state. One small annoyance is that the following code will
throw, if the ring is empty:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ring-ref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;menubar-last&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would prefer if it just returned &lt;code&gt;nil&lt;/code&gt; instead. Hence the trick of
initializing &lt;code&gt;menubar-last&lt;/code&gt; with a dummy item.  Note that this
annoyance propagates to other areas: &lt;code&gt;(current-kill 0)&lt;/code&gt; will throw if
you haven&amp;#39;t yet copied text since Emacs started.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m not sure if this code is more annoying than useful, but, at least,
I learned something new while writing it, and I hope you did too.  If
you know of a better way to accomplish the original task, please do
share.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ElTeX - generate full LaTeX documents from Emacs Lisp</title>
   <link href="http://oremacs.com/2015/01/23/eltex/"/>
   <updated>2015-01-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/23/eltex</id>
   <content type="html">&lt;p&gt;OK. Please stop laughing. It&amp;#39;s a
&lt;a href=&quot;https://github.com/abo-abo/eltex&quot;&gt;thing&lt;/a&gt; now.&lt;/p&gt;

&lt;p&gt;Seriously though, it&amp;#39;s my little project of writing a major mode for
Emacs.  I&amp;#39;ve written many minor modes, but this is my first major
one. Granted, it&amp;#39;s only a small derivation of &lt;code&gt;emacs-lisp-mode&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-the-eltex-looks-like&quot;&gt;How the ElTeX looks like&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how a sample document outline looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/eltex-fontified.png&quot; alt=&quot;eltex-fontified&quot;&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;code&gt;homogenization&lt;/code&gt;, &lt;code&gt;smoluchowski-equation&lt;/code&gt;, and
&lt;code&gt;model-description-geometry&lt;/code&gt; are simply Elisp functions that should
produce a string on call. They are defined &lt;a href=&quot;https://github.com/abo-abo/eltex/blob/master/demos/demo-math.elt&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On calling &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;eltex-compile&lt;/code&gt;, the corresponding LaTeX
document will be written to the file to which &lt;code&gt;eltex-filename&lt;/code&gt; points
to.&lt;/p&gt;

&lt;h2 id=&quot;how-the-corresponding-latex-looks-like&quot;&gt;How the corresponding LaTeX looks like&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s an excerpt of what will be generated:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;article&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[fleqn]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;amsmath&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;amsthm&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;amsfonts&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;xcolor&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[style=numeric,natbib=true,backend=bibtex]&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;biblatex&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\addbibresource&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;analysis.bib&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;document&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\section&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;Introduction&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\subsection&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;Homogenization&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-the-original-eltex-looks-like-in-emacs-lisp-mode&quot;&gt;How the original ElTeX looks like in &lt;code&gt;emacs-lisp-mode&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eltex-filename&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/tpaper/tpaper.tex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eltex-macros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;* Document&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;documentclass&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;article&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;usepackage&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;amsmath&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;fleqn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;amsthm&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;enumerate&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;amsfonts&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;xcolor&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;biblatex&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;style=numeric,natbib=true,backend=bibtex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bibliography&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;analysis&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;document&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Introduction&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;homogenization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;smoluchowski-equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;section&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Notations and Assumptions&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;model-description-geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;\\printbibliography&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;why-this?&quot;&gt;Why this?&lt;/h2&gt;

&lt;p&gt;Well, why not? At one point I was frustrated with LaTeX not allowing
me to define mathematically rich entities. I did hack up a few TeX
macros for this eventually, but it was very awkward.&lt;/p&gt;

&lt;p&gt;So I thought that I could make Emacs Lisp generate simple LaTeX in a
similar way that C generates machine code. No more intricate LaTeX
macros, only plain LaTeX, generated from (intricate) Elisp.&lt;/p&gt;

&lt;p&gt;This is still very much in a toy stage, I don&amp;#39;t currently use it for
anything serious.  Still, in case you&amp;#39;re interested in defining
derived major modes, you can look at my
&lt;a href=&quot;https://github.com/abo-abo/eltex/blob/master/eltex.el&quot;&gt;implementation&lt;/a&gt;,
it&amp;#39;s only 25 lines. The interesting thing about it, if you noticed, is
that it replaces all double quoted strings visually with single quoted
strings, so that they don&amp;#39;t jump out as much.&lt;/p&gt;

&lt;h2 id=&quot;more-examples&quot;&gt;More examples&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s how the typesetting of some mathematical logic looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/eltex-math.png&quot; alt=&quot;eltex-math&quot;&gt;&lt;/p&gt;

&lt;p&gt;And here&amp;#39;s the corresponding LaTeX:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/eltex-math-latex.png&quot; alt=&quot;eltex-math-latex&quot;&gt;&lt;/p&gt;

&lt;p&gt;Note how simple the resulting LaTeX is, considering how many variables
were used to generate it. Now, I can update anything in the &lt;code&gt;with&lt;/code&gt;
Elisp binding, and the corresponding LaTeX will be appropriately
regenerated, error-free.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Adding a bit of Clojure's sugar to Elisp</title>
   <link href="http://oremacs.com/2015/01/22/clojure-sugar-for-elisp/"/>
   <updated>2015-01-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/22/clojure-sugar-for-elisp</id>
   <content type="html">&lt;p&gt;I just wanted to highlight my latest
&lt;a href=&quot;http://comments.gmane.org/gmane.emacs.devel/181534&quot;&gt;submission to emacs-devel&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-patch&quot;&gt;The patch&lt;/h2&gt;

&lt;p&gt;The attached
&lt;a href=&quot;http://lists.gnu.org/archive/html/emacs-devel/2015-01/txtqCl_ExSFYV.txt&quot;&gt;patch&lt;/a&gt;,
together with the macro
&lt;a href=&quot;https://github.com/abo-abo/short-lambda&quot;&gt;short-lambda&lt;/a&gt; will add a
shorthand for defining &lt;code&gt;lambda&lt;/code&gt;s in Emacs Lisp.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s an excerpt from &lt;a href=&quot;http://clojure.org/reader&quot;&gt;the Clojure reader docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anonymous function literal (&lt;code&gt;#()&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#(...)&lt;/code&gt; =&amp;gt; &lt;code&gt;(fn [args] (...))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;where args are determined by the presence of argument literals
taking the form &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;%n&lt;/code&gt; or &lt;code&gt;%&amp;amp;&lt;/code&gt;. &lt;code&gt;%&lt;/code&gt; is a synonym for &lt;code&gt;%1&lt;/code&gt;, &lt;code&gt;%n&lt;/code&gt; designates
the nth arg (1-based), and &lt;code&gt;%&amp;amp;&lt;/code&gt; designates a rest arg. This is not a
replacement for &lt;code&gt;fn&lt;/code&gt; - idiomatic used would be for very short one-off
mapping/filter fns and the like.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;#()&lt;/code&gt; forms cannot be nested.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;what-the-patch-does&quot;&gt;What the patch does&lt;/h2&gt;

&lt;p&gt;It makes it possible to write this in Elisp:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;disabled&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase-region&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downcase-region&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;narrow-to-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also do this and other things that you would expect, if you&amp;#39;re
familiar with Clojure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cl-mapcar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%1&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; are &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;roses&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;violets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; (&amp;quot;roses are red&amp;quot; &amp;quot;violets are blue&amp;quot;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you could replace this snippet from &lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;matchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;org-latex-regexps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with this sugar-coated code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;matchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;org-latex-regexps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that this gets accepted, although there are some conservative
people that protest against this change.  Let me know if you would
like to have this option for your Elisp setups.  And remember that you
can try out the patch if you&amp;#39;re familiar with
&lt;a href=&quot;http://www.emacswiki.org/emacs/BuildingEmacs&quot;&gt;building Emacs from source&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Even more dired key bindings</title>
   <link href="http://oremacs.com/2015/01/21/dired-shortcuts/"/>
   <updated>2015-01-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/21/dired-shortcuts</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve posted about &lt;code&gt;dired&lt;/code&gt; quite a few times now.  Below, I&amp;#39;ll do a
short review of the old bindings and add a few remaining recipes from
my &lt;code&gt;dired.el&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;old-stuff&quot;&gt;Old stuff&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Binding &lt;kbd&gt;r&lt;/kbd&gt; to &lt;code&gt;dired-start-process&lt;/code&gt; is covered &lt;a href=&quot;/2015/01/04/dired-nohup/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Binding &lt;kbd&gt;e&lt;/kbd&gt; to &lt;code&gt;ediff-files&lt;/code&gt; is mentioned &lt;a href=&quot;/2015/01/17/setting-up-ediff/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Binding &lt;kbd&gt;z&lt;/kbd&gt; to &lt;code&gt;dired-get-size&lt;/code&gt; is covered &lt;a href=&quot;/2015/01/12/dired-file-size/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Binding &lt;kbd&gt;&amp;#96;&lt;/kbd&gt; to &lt;code&gt;dired-open-term&lt;/code&gt; is covered &lt;a href=&quot;/2015/01/10/dired-ansi-term/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jump-to-a-file-with-ido&quot;&gt;Jump to a file with &lt;code&gt;ido&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;i&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-find-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use this one quite frequently: &lt;kbd&gt;i&lt;/kbd&gt; is somehow mnemonic to
&lt;kbd&gt;C-i&lt;/kbd&gt;, which means completion.  Remember that you can select
the current candidate with &lt;kbd&gt;C-m&lt;/kbd&gt; and the current text
(usually to create a new file) with &lt;kbd&gt;C-j&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;move-up-and-down&quot;&gt;Move up and down&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-next-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-previous-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As I&amp;#39;ve mentioned before, this is my standard recipe for all modes
that don&amp;#39;t self-insert.&lt;/p&gt;

&lt;h2 id=&quot;flag-garbage-files&quot;&gt;Flag garbage files&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%^&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-flag-garbage-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Huh, I always thought this was the default binding. I have no idea
where this came from, but I use this plus &lt;kbd&gt;x&lt;/kbd&gt; to get rid of
the garbage produced by a LaTeX run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-garbage-files-regexp&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;\\.idx\\|\\.run\\.xml$\\|\\.bbl$\\|\\.bcf$\\|.blg$\\|-blx.bib$\\|.nav$\\|.snm$\\|.out$\\|.synctex.gz$\\|\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|pyg\\)\\)\\&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;emacs&amp;#39;-adaptation-of-find&quot;&gt;Emacs&amp;#39; adaptation of &lt;code&gt;find&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;F&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;find-name-dired&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This little function is essential if you want to do perform some
operation on all files in the current directory and its sub
directories that match a pattern. Basically the same thing that you
would do with the UNIX &lt;code&gt;find&lt;/code&gt;, just better.&lt;/p&gt;

&lt;h2 id=&quot;ignore-unimportant-files&quot;&gt;Ignore unimportant files&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-omit-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will toggle the display of unimportant files, like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-omit-files&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\(?:.*\\.\\(?:aux\\|log\\|synctex\\.gz\\|run\\.xml\\|bcf\\|am\\|in\\)\\&amp;#39;\\)\\|^\\.\\|-blx\\.bib&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;move-to-the-parent-directory&quot;&gt;Move to the parent directory&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-alternate-file&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There probably is a default function that does this. I&amp;#39;ve been using
this one for years, probably because it reuses the current &lt;code&gt;dired&lt;/code&gt;
buffer of opening the parent directory.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;Phew, that&amp;#39;s a lot of bindings. I don&amp;#39;t necessarily encourage you to
use the same bindings as me; I just want to bring your attention to
some of these functions, so that you can work them into your workflow.
If you notice that I&amp;#39;m using some obsolete stuff, do let me know, I&amp;#39;m
always looking to improve.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Behold The Mighty Hydra!</title>
   <link href="http://oremacs.com/2015/01/20/introducing-hydra/"/>
   <updated>2015-01-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/20/introducing-hydra</id>
   <content type="html">&lt;p&gt;I managed to spike a lot of interest for sticky key bindings in my earlier post,
&lt;a href=&quot;/2015/01/14/repeatable-commands/&quot;&gt;Zoom in/out with style&lt;/a&gt;.
So now, I&amp;#39;ve refactored this method into a convenient library
&lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra.el&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/Hydra.png&quot; alt=&quot;hydra&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;This package can be used to tie related functions into a family of
short bindings with a common prefix - a Hydra.&lt;/p&gt;

&lt;p&gt;Once you summon the Hydra through the prefixed binding (the body + any
one head), all heads can be called in succession with only a short
extension.&lt;/p&gt;

&lt;p&gt;The Hydra is vanquished once Hercules, any binding that isn&amp;#39;t the
Hydra&amp;#39;s head, arrives.  Note that Hercules, besides vanquishing the
Hydra, will still serve his orignal purpose, calling his proper
command.  This makes the Hydra very seamless, it&amp;#39;s like a minor mode
that disables itself auto-magically.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;This code will accomplish the task of the previous post:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt; is the Hydra&amp;#39;s body: you need to press it
only once, together with one of the heads (&lt;kbd&gt;g&lt;/kbd&gt; or
&lt;kbd&gt;l&lt;/kbd&gt;), to summon the Hydra.&lt;/p&gt;

&lt;p&gt;Afterwards, you can call the heads in succession without the body
prefix, i.e. &lt;kbd&gt;&amp;lt;f2&amp;gt; g g g l&lt;/kbd&gt; will work.  To vanquish the
Hydra, just call up Hercules: &lt;strong&gt;any&lt;/strong&gt; key binding that&amp;#39;s not
&lt;kbd&gt;g&lt;/kbd&gt; or &lt;kbd&gt;l&lt;/kbd&gt;, e.g. &lt;kbd&gt;C-f&lt;/kbd&gt; or whatever you
wanted to do.&lt;/p&gt;

&lt;p&gt;Note that you can still assign an unrelated binding to
e.g. &lt;kbd&gt;&amp;lt;f2&amp;gt; f&lt;/kbd&gt;: the Hydra &lt;em&gt;does not&lt;/em&gt; take over
&lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt;, only over &lt;kbd&gt;&amp;lt;f2&amp;gt; l&lt;/kbd&gt; and
&lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-infrastructure&quot;&gt;The Infrastructure&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hydra-create&lt;/code&gt; will create new interactive functions for you with the proper docstrings:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hydra-&amp;lt;f2&amp;gt;-text-scale-increase is an interactive Lisp function.&lt;/p&gt;

&lt;p&gt;It is bound to &amp;lt;f2&amp;gt; g.&lt;/p&gt;

&lt;p&gt;(hydra-&amp;lt;f2&amp;gt;-text-scale-increase)&lt;/p&gt;

&lt;p&gt;Create a hydra with a &amp;quot;&amp;lt;f2&amp;gt;&amp;quot; body and the heads:&lt;/p&gt;

&lt;p&gt;&amp;quot;g&amp;quot;:    &lt;code&gt;text-scale-increase&lt;/code&gt;,&lt;/p&gt;
&amp;quot;l&amp;quot;:    &lt;code&gt;text-scale-decrease&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Call the head: &lt;code&gt;text-scale-increase&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;an-exciting-new-hydra:-move-window-splitter&quot;&gt;An exciting new Hydra: move window splitter&lt;/h2&gt;

&lt;p&gt;Zooming is old news, Hydra bundles a new application:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-example-move-window-splitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in the expanded form (equivalent):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to move the window splitter, after you issue
&lt;kbd&gt;C-x 2&lt;/kbd&gt; or &lt;kbd&gt;C-x 3&lt;/kbd&gt; one or more times, with
e.g. &lt;kbd&gt;C-M-o&lt;/kbd&gt; &lt;kbd&gt;h h j k j l k l h&lt;/kbd&gt;.  You can, of
course, customize both the body and the heads of this Hydra to your
preferences.&lt;/p&gt;

&lt;p&gt;The docstrings for this Hydra look more impressive, too:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hydra-C-M-o-move-splitter-up is an interactive Lisp function.&lt;/p&gt;

&lt;p&gt;It is bound to C-M-o k.&lt;/p&gt;

&lt;p&gt;(hydra-C-M-o-move-splitter-up)&lt;/p&gt;

&lt;p&gt;Create a hydra with a &amp;quot;C-M-o&amp;quot; body and the heads:&lt;/p&gt;

&lt;p&gt;&amp;quot;h&amp;quot;:    &lt;code&gt;hydra-move-splitter-left&lt;/code&gt;,&lt;/p&gt;
&amp;quot;j&amp;quot;:    &lt;code&gt;hydra-move-splitter-down&lt;/code&gt;,&lt;/p&gt;
&amp;quot;k&amp;quot;:    &lt;code&gt;hydra-move-splitter-up&lt;/code&gt;,&lt;/p&gt;
&amp;quot;l&amp;quot;:    &lt;code&gt;hydra-move-splitter-right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Call the head: &lt;code&gt;hydra-move-splitter-up&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you enjoy the new library and let me know when you invent
some novel and efficient Hydras. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lispy 0.21.0 is out</title>
   <link href="http://oremacs.com/2015/01/19/lispy.0.21.0-is-out/"/>
   <updated>2015-01-19T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/19/lispy.0.21.0-is-out</id>
   <content type="html">&lt;p&gt;The last release was more than a month ago, and there have been more
than 130 commits to master since then. Somehow, I&amp;#39;ve been dragging my
feet with this release: the (3 pages of)
&lt;a href=&quot;https://github.com/abo-abo/lispy/releases/tag/0.21.0&quot;&gt;release notes&lt;/a&gt;
were in the draft stage for 10 days now, while I kept committing on
top of them.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This project is my vision of efficient LISP editing. According to
Github, I started it more than a year ago, although the initial commit
already contained around 1000 lines of code. After a year, it&amp;#39;s more
than 100 interactive commands in 5000 lines of code and 1000 lines of
tests.&lt;/p&gt;

&lt;p&gt;Initially, I started the project because, while I wanted to learn
Paredit to get more efficient, I did not want to learn Paredit&amp;#39;s
cumbersome bindings. Having established a skeleton that allows to call
Paredit-like commands with plain letters, over time, I&amp;#39;ve tacked on
anything LISP-related here. In this way, it&amp;#39;s very similar to
&lt;code&gt;org-mode&lt;/code&gt;, which starts with an outline and TODO skeleton, and then
adds everything else in the world on top of that. Heck, I actually
tacked on &lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s outline features on top of &lt;code&gt;lispy&lt;/code&gt;: when at an
outline, &lt;kbd&gt;i&lt;/kbd&gt; is equivalent to &lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s &lt;kbd&gt;TAB&lt;/kbd&gt;, and
&lt;kbd&gt;I&lt;/kbd&gt; is equivalent to &lt;kbd&gt;S-tab&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Among the other packages with which &lt;code&gt;lispy&lt;/code&gt;
integrates/cooperates/coexists are: &lt;code&gt;edebug&lt;/code&gt;, &lt;code&gt;ediff&lt;/code&gt;, &lt;code&gt;eldoc&lt;/code&gt;, &lt;code&gt;ert&lt;/code&gt;,
&lt;code&gt;outline&lt;/code&gt;, &lt;code&gt;semantic&lt;/code&gt;, &lt;code&gt;semantic/db&lt;/code&gt;, &lt;code&gt;ace-jump-mode&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;,
&lt;code&gt;delsel&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;fancy-narrow&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt;,
&lt;code&gt;god-mode&lt;/code&gt;, &lt;code&gt;auto-complete&lt;/code&gt;, &lt;code&gt;company&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;main-idea-behind-lispy&quot;&gt;Main idea behind &lt;code&gt;lispy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The idea is to have plain letters, like &lt;kbd&gt;h&lt;/kbd&gt; or &lt;kbd&gt;r&lt;/kbd&gt;,
call commands instead of self-inserting, but &lt;strong&gt;only if the point
position is such that you wouldn&amp;#39;t want to self-insert anyway&lt;/strong&gt;.  When
this situation occurs, I like to say &lt;a href=&quot;#evolution-of-special&quot;&gt;&amp;quot;the point is special&amp;quot;&lt;/a&gt;; this
shortcut is all over the code and the docs.&lt;/p&gt;

&lt;p&gt;This is a bit similar to &lt;code&gt;vi&lt;/code&gt;&amp;#39;s normal/insert states, but instead of
&amp;quot;holding&amp;quot; the current state in your head, it&amp;#39;s visible through &lt;em&gt;just
the point position&lt;/em&gt;.  And instead of having just the
&lt;kbd&gt;Esc&lt;/kbd&gt;/&lt;kbd&gt;i&lt;/kbd&gt; combination to toggle normal/insert state,
you can do it with &lt;strong&gt;any&lt;/strong&gt; command that moves point,
e.g. &lt;kbd&gt;C-f&lt;/kbd&gt;, or &lt;kbd&gt;C-a&lt;/kbd&gt;, or even any custom command
that you write. &lt;code&gt;lispy&lt;/code&gt; does provide &lt;kbd&gt;[&lt;/kbd&gt;, &lt;kbd&gt;]&lt;/kbd&gt;, and
&lt;kbd&gt;C-3&lt;/kbd&gt; key bindings for getting into special, but you are free
to use any other binding or command that you want.&lt;/p&gt;

&lt;p&gt;For instance, starting from this code and point position (which is already special):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you can move to the &lt;code&gt;when&lt;/code&gt; statement with &lt;kbd&gt;h&lt;/kbd&gt; (&lt;code&gt;lispy-right&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or you can remove the &lt;code&gt;when&lt;/code&gt; statement altogether with &lt;kbd&gt;r&lt;/kbd&gt; (&lt;code&gt;lispy-raise&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;evaluate &lt;code&gt;(setq arg 2000)&lt;/code&gt; statement with &lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;lispy-eval&lt;/code&gt;); the result will be displayed in the echo area; works for multiple LISP dialects&lt;/li&gt;
&lt;li&gt;evaluate and insert with &lt;kbd&gt;E&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-insert&lt;/code&gt;); the actual value &lt;code&gt;2000&lt;/code&gt; will be inserted below the expression&lt;/li&gt;
&lt;li&gt;evaluate and replace with &lt;kbd&gt;xr&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-replace&lt;/code&gt;); the expression will be replaced with &lt;code&gt;2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the statement to the kill ring with &lt;kbd&gt;n&lt;/kbd&gt; (&lt;code&gt;lispy-new-copy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;delete the statement with &lt;kbd&gt;C-d&lt;/kbd&gt; (&lt;code&gt;lispy-delete&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert a copy of the statement below with &lt;kbd&gt;c&lt;/kbd&gt; (&lt;code&gt;lispy-clone&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert 3 copies of the statement below with &lt;kbd&gt;3c&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-clone&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move the statement on the previous line with &lt;kbd&gt;DEL&lt;/kbd&gt; (&lt;code&gt;lispy-delete-backward&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;mark the statement with &lt;kbd&gt;m&lt;/kbd&gt; (&lt;code&gt;lispy-mark-list&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;mark only &lt;code&gt;arg&lt;/code&gt; with &lt;kbd&gt;2m&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;get help for &lt;code&gt;setq&lt;/code&gt; with &lt;kbd&gt;xh&lt;/kbd&gt; (&lt;code&gt;lispy-describe&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;get help for &lt;code&gt;arg&lt;/code&gt; with &lt;kbd&gt;2mxh&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;, &lt;code&gt;lispy-describe&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;copy &lt;code&gt;2000&lt;/code&gt; to kill ring with &lt;kbd&gt;3mn&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;, &lt;code&gt;lispy-new-copy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move the statement outside of &lt;code&gt;when&lt;/code&gt; with &lt;kbd&gt;oh&lt;/kbd&gt; (&lt;code&gt;lispy-other&lt;/code&gt;, &lt;code&gt;lispy-left&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;swap &lt;code&gt;(= arg 0)&lt;/code&gt; with &lt;code&gt;(setq arg 2000)&lt;/code&gt; with &lt;kbd&gt;w&lt;/kbd&gt; (&lt;code&gt;lispy-move-up&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move it back with &lt;kbd&gt;s&lt;/kbd&gt; (&lt;code&gt;lispy-move-down&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;put the whole &lt;code&gt;when&lt;/code&gt; expression on one line with &lt;kbd&gt;hO&lt;/kbd&gt; (&lt;code&gt;lispy-left&lt;/code&gt;, &lt;code&gt;lispy-oneline&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;narrow the buffer to current sexp with &lt;kbd&gt;N&lt;/kbd&gt; (&lt;code&gt;lispy-narrow&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;widen the buffer with &lt;kbd&gt;W&lt;/kbd&gt; (&lt;code&gt;lispy-widen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a lot of other things, there are 52 plain letters, after all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that in the following code, the point is not special:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wh&lt;cursor&gt;e&lt;/cursor&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so if you would type &lt;kbd&gt;h&lt;/kbd&gt;, it would not call &lt;code&gt;lispy-left&lt;/code&gt;, but would insert &amp;quot;h&amp;quot; instead, yielding &lt;code&gt;whhen&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to get the point into special before &lt;code&gt;(when&lt;/code&gt;, you can use either &lt;kbd&gt;C-a&lt;/kbd&gt; or &lt;kbd&gt;&amp;#91;&lt;/kbd&gt; or &lt;kbd&gt;C-M-a&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;to get the point into special after &lt;code&gt;arg 0)&lt;/code&gt;, you can use either &lt;kbd&gt;C-e&lt;/kbd&gt; or &lt;kbd&gt;&amp;#93;&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;to get the point into special after &lt;code&gt;2000))&lt;/code&gt;, you can use &lt;kbd&gt;C-3&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evolution-of-special&quot;&gt;Evolution of special&lt;/h2&gt;

&lt;p&gt;Initially, the special state was only for the point before an open
paren or after a close paren, since you almost never-ever want to
insert characters at those positions. Over time, other point states
were added to special:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;region is active (supersedes
&lt;a href=&quot;https://github.com/magnars/expand-region.el&quot;&gt;expand-region&lt;/a&gt; for LISP
dialects)&lt;/li&gt;
&lt;li&gt;the point is at the start of a comment&lt;/li&gt;
&lt;li&gt;the point is at the start of an outline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Region selection is especially important, since it is super-useful for
manipulating (move, copy, eval, get-help, goto-definition) symbols
inside lists. Since these symbols aren&amp;#39;t delimited with parens, the
only way to get to them with special is though region selection.&lt;/p&gt;

&lt;p&gt;Happily, region selection will fix the largest source of Paredit
unbalanced paren errors: while using &lt;code&gt;lispy&lt;/code&gt; region-manipulating
commands, you can&amp;#39;t copy an unbalanced expression, and thus you can&amp;#39;t
yank an unbalanced expression. You just have to use &lt;kbd&gt;m&lt;/kbd&gt; and
&lt;kbd&gt;M-m&lt;/kbd&gt; instead of &lt;kbd&gt;C-SPC&lt;/kbd&gt;; and &lt;kbd&gt;h&lt;/kbd&gt;,
&lt;kbd&gt;j&lt;/kbd&gt;, &lt;kbd&gt;k&lt;/kbd&gt;, &lt;kbd&gt;l&lt;/kbd&gt;, &lt;kbd&gt;i&lt;/kbd&gt;,
&lt;kbd&gt;&amp;gt;&lt;/kbd&gt;, and &lt;kbd&gt;&amp;lt;&lt;/kbd&gt; instead of e.g. &lt;kbd&gt;C-f&lt;/kbd&gt; and
&lt;kbd&gt;M-f&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Since there are only 26 lower-case letters and 26 upper-case letters,
the state of the command bindings in &lt;code&gt;lispy&lt;/code&gt; quickly turned into
&lt;em&gt;survival of the fittest&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the commands that were used the most got the priority bindings of
lower case letters on the home row&lt;/li&gt;
&lt;li&gt;the second tier got the other lower-case bindings&lt;/li&gt;
&lt;li&gt;the third tier of commands were put on upper-case letters and on
&lt;kbd&gt;x&lt;/kbd&gt; + lower-case letters&lt;/li&gt;
&lt;li&gt;the fourth tier of commands are not bound at all, and I&amp;#39;m
considering to obsolete some of them, just to keep things simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add:-the-annoyance-driven-development&quot;&gt;ADD: the Annoyance-Driven Development&lt;/h2&gt;

&lt;p&gt;The other part of evolving and refining the commands, consisted of
noticing small annoyances for when some generic command wasn&amp;#39;t working
as intended, or it was working in a sub-optimal way in a certain
situation. After this, I would fix the command and put a test on it,
to make sure that the annoyance does not surface in the future.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-lisp-dialects&quot;&gt;Notes on LISP dialects&lt;/h2&gt;

&lt;p&gt;My priority is Elisp, since that&amp;#39;s what I&amp;#39;m using to implement
&lt;code&gt;lispy&lt;/code&gt;, but the following dialects are also supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clojure, via &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Common Lisp, via &lt;a href=&quot;https://github.com/slime/slime&quot;&gt;SLIME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scheme, via &lt;a href=&quot;https://github.com/jaor/geiser&quot;&gt;Geiser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be supported, all a LISP dialect needs is just to use &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt; or
&lt;code&gt;[&lt;/code&gt; as the opening delimiter; and &lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; or &lt;code&gt;]&lt;/code&gt; as the closing
delimiter, no actual adaptations in the &lt;code&gt;lispy&lt;/code&gt; code are necessary.&lt;/p&gt;

&lt;p&gt;The only thing that needs to be implemented on a per-dialect basis is
the language-specific eval:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;lispy-eval&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;E&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-insert&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;xr&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-replace&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;xj&lt;/kbd&gt; (&lt;code&gt;lispy-debug-step-in&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, though the jump-to-definition functionality could be implemented
via CEDET, environments like SLIME can do it much better, so
&lt;kbd&gt;F&lt;/kbd&gt; (&lt;code&gt;lispy-follow&lt;/code&gt;) and &lt;kbd&gt;M-.&lt;/kbd&gt; (&lt;code&gt;lispy-goto-symbol&lt;/code&gt;) use the
appropriate environment&amp;#39;s facilities. Somehow, I still haven&amp;#39;t managed
to implement this for Geiser.&lt;/p&gt;

&lt;h2 id=&quot;drinking-from-the-lispy-fire-hose&quot;&gt;Drinking from the &lt;code&gt;lispy&lt;/code&gt; fire hose&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll get you started with the most basic and composable commands
below.  You can find the rest in the
&lt;a href=&quot;http://oremacs.com/lispy/&quot;&gt;function reference&lt;/a&gt; or by just calling
&lt;kbd&gt;xv&lt;/kbd&gt; (&lt;code&gt;lispy-view-test&lt;/code&gt;) on &lt;code&gt;should&lt;/code&gt; statements of
&lt;a href=&quot;https://github.com/abo-abo/lispy/blob/master/lispy-test.el&quot;&gt;lispy-test.el&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/lispy-view-test.png&quot; alt=&quot;sample-test&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, I start with the code and point position on
the top. Then, after typing &lt;kbd&gt;miji&lt;/kbd&gt;, I should end up with the
state below: the point and mark position have moved. In this
particular situation, I could follow-up with &lt;kbd&gt;e&lt;/kbd&gt; to see the
value of &lt;code&gt;auto-mode-alist&lt;/code&gt;. Here&amp;#39;s how to decipher &lt;kbd&gt;miji&lt;/kbd&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;m&lt;/kbd&gt; - &lt;code&gt;lispy-mark-list&lt;/code&gt;: marks current expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-tab&lt;/code&gt; (mnemonic for &lt;em&gt;indent&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt;): marks the &lt;code&gt;car&lt;/code&gt; of current expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; - &lt;code&gt;lispy-down&lt;/code&gt; (vi shortcut to move down): moves the point and mark down by one sexp, selecting the quoted expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-tab&lt;/code&gt;: selects the &lt;code&gt;car&lt;/code&gt; of the quoted expression, i.e. &lt;code&gt;auto-mode-alist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see from the screenshot, I have &lt;code&gt;show-paren-mode&lt;/code&gt; always
on. It&amp;#39;s even on in the tests visualization!&lt;/p&gt;

&lt;h2 id=&quot;the-most-basic-lispy-commands:-the-arrows&quot;&gt;The most basic &lt;code&gt;lispy&lt;/code&gt; commands: the arrows&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;h&lt;/kbd&gt; is left&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; is down&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;k&lt;/kbd&gt; is up&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;l&lt;/kbd&gt; is right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The directions are literal only if you have your code properly
indented, with newlines after each sexp. Otherwise, it may be the case
that &lt;kbd&gt;j&lt;/kbd&gt; moves literally right, instead of down; still, it&amp;#39;s
down figuratively.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-digits&quot;&gt;arrows like digits&lt;/h3&gt;

&lt;p&gt;All of them take digit arguments, so that e.g. &lt;kbd&gt;5j&lt;/kbd&gt; is equivalent to &lt;kbd&gt;jjjjj&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;h&lt;/kbd&gt; and &lt;kbd&gt;j&lt;/kbd&gt; maintain the guarantee of not exiting the
current list, so you can use e.g. &lt;kbd&gt;99j&lt;/kbd&gt; to move to the last
element, if your list length is smaller than 99.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-regions&quot;&gt;arrows like regions&lt;/h3&gt;

&lt;p&gt;When the region is active, the arrows move the mark appropriately with
the point. You can activate and deactivate the region by repeatedly
pressing &lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;You can also mark a symbol with &lt;kbd&gt;M-m&lt;/kbd&gt;
(&lt;code&gt;lispy-mark-symbol&lt;/code&gt;). There&amp;#39;s no need to be in special for this
command to work. I call these type of bindings &lt;em&gt;global&lt;/em&gt;, while the
bindings that only work in special I call &lt;em&gt;local&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-outlines&quot;&gt;arrows like outlines&lt;/h3&gt;

&lt;p&gt;When located at the outline, &lt;kbd&gt;j&lt;/kbd&gt; will call
&lt;code&gt;outline-next-visible-heading&lt;/code&gt;, and &lt;kbd&gt;k&lt;/kbd&gt; will call
&lt;code&gt;outline-previous-visible-heading&lt;/code&gt;. &lt;kbd&gt;l&lt;/kbd&gt; will move to the
first list of the outline, while &lt;kbd&gt;h&lt;/kbd&gt; will jump between the
top-level sexp and the containing outline.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-a-different-side-of-the-expression&quot;&gt;switching to a different side of the expression&lt;/h3&gt;

&lt;p&gt;Arrows can&amp;#39;t do this easily; this can instead be done with
&lt;kbd&gt;d&lt;/kbd&gt; (&lt;code&gt;lispy-different&lt;/code&gt;). Works for lists and regions.&lt;/p&gt;

&lt;h2 id=&quot;moving-the-code-instead-of-moving-around-the-code&quot;&gt;Moving the code instead of moving around the code&lt;/h2&gt;

&lt;p&gt;The most basic commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;w&lt;/kbd&gt; is &lt;code&gt;lispy-move-up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt; is &lt;code&gt;lispy-move-down&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will &amp;quot;hold on&amp;quot; to the current expression while moving it in the
appropriate direction. There&amp;#39;s no need to worry to mess up with them,
since they cancel each other out perfectly.&lt;/p&gt;

&lt;p&gt;Note that, just like with the arrows, if you don&amp;#39;t have an opening or
closing delimiter to &amp;quot;grab&amp;quot;, you can mark a symbol &lt;kbd&gt;M-m&lt;/kbd&gt; to
be in special and use &lt;kbd&gt;w&lt;/kbd&gt; / &lt;kbd&gt;s&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;modified-arrows-can-move-too&quot;&gt;Modified arrows can move too&lt;/h2&gt;

&lt;p&gt;&lt;kbd&gt;o&lt;/kbd&gt; will modify the arrow keys temporarily, just for one
command, with a minor mode. You can think of it as making the arrows
move the point &lt;strong&gt;and&lt;/strong&gt; the sexp in the usual direction, instead of
moving just the point.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;ol&lt;/kbd&gt;: move current sexp outside of the parent list, forwards&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;oh&lt;/kbd&gt;: move current sexp outside of the parent list, backwards&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;oj&lt;/kbd&gt;: move current sexp inside the next list, making it the first element&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;ok&lt;/kbd&gt;: move current sexp inside the preceding list, making it the last element&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extending-or-shrinking-the-current-list-or-region&quot;&gt;Extending or shrinking the current list or region&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; (&lt;code&gt;lispy-slurp&lt;/code&gt;) grows the current list or region in the current direction by one sexp&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt; (&lt;code&gt;lispy-barf&lt;/code&gt;) shrinks the current list or region in the current direction by one sexp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly to &lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;k&lt;/kbd&gt;, these commands maintain
the guarantee of not exiting the parent list, so you can slurp until
the end of the list with e.g. &lt;kbd&gt;99&amp;gt;&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;This project is very far from being final, I&amp;#39;m expecting to reach
&lt;code&gt;0.99.0&lt;/code&gt; before getting to &lt;code&gt;1.0.0&lt;/code&gt;. The reason is that the package
aims to build intuition to the point of automation. For each small
step in that direction, every small bug is two steps back, since it
breaks the process of building intuition. So every possible situation
needs to be tested and bugs fixed until the package is finally ironed
out.&lt;/p&gt;

&lt;p&gt;While I do appreciate the
&lt;a href=&quot;https://github.com/abo-abo/lispy/stargazers&quot;&gt;stars&lt;/a&gt;, actually trying
to do things with &lt;code&gt;lispy&lt;/code&gt; and raising
&lt;a href=&quot;https://github.com/abo-abo/lispy/issues&quot;&gt;issues&lt;/a&gt; would help me a
great deal more. For instance, if you raise an issue like&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How can I generate a function call right after the function definition?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would say to just use &lt;kbd&gt;2mcol(&lt;/kbd&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mark the function name with &lt;kbd&gt;2m&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;clone region with &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;move region outside the function body with &lt;kbd&gt;ol&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;wrap the region with parens while deactivating it with &lt;kbd&gt;(&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this would be a sort of FAQ question / recipe already done there.&lt;/p&gt;

&lt;p&gt;Or you could raise an issue like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why doesn&amp;#39;t &lt;kbd&gt;F&lt;/kbd&gt; work for Racket?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would say it&amp;#39;s because I haven&amp;#39;t implemented it yet, since it was
tricky.  But I&amp;#39;ll get to it, now that I see that there&amp;#39;s some interest
in &lt;code&gt;lispy&lt;/code&gt; from Racket users.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sprucing up org-download</title>
   <link href="http://oremacs.com/2015/01/18/sprucing-up-org-download/"/>
   <updated>2015-01-18T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/18/sprucing-up-org-download</id>
   <content type="html">&lt;p&gt;My interest in &lt;a href=&quot;https://github.com/abo-abo/org-download&quot;&gt;org-download&lt;/a&gt;
was renewed today with
&lt;a href=&quot;http://thread.gmane.org/gmane.emacs.orgmode/93964&quot;&gt;this thread&lt;/a&gt; on
&lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s mailing list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;org-download&lt;/code&gt; allows you to drag-and-drop an image from e.g. Firefox
or your own file system to an &lt;code&gt;org-mode&lt;/code&gt; buffer. When I originally
wrote it, I was taking a Chemistry course on
&lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;, which included homework and exams with a
lot of images. Doing the homework in a literate style with &lt;code&gt;org-mode&lt;/code&gt;,
I wanted the problems to be completely self-contained, and for that I
needed to save all the images from the website, preferably quickly, to
an &lt;code&gt;org-mode&lt;/code&gt; buffer. With a few hacks and some advice and
contributions from more experienced hackers, &lt;code&gt;org-download&lt;/code&gt; came to
be.&lt;/p&gt;

&lt;h2 id=&quot;today&amp;#39;s-commits&quot;&gt;Today&amp;#39;s commits&lt;/h2&gt;

&lt;p&gt;The main contribution from today&amp;#39;s commits was adding the code that
un-aliases images that point to HTML. I see a lot of these from the
people that I&amp;#39;m following on my Twitter,
&lt;a href=&quot;https://twitter.com/_abo_abo&quot;&gt;@&amp;#95;abo&amp;#95;abo&lt;/a&gt;. Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-download-img-regex-list&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;img +src=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;img +\\(class=\&amp;quot;[^\&amp;quot;]+\&amp;quot;\\)? *src=\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;This regex is used to unalias links that look like images.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The html to which the links points will be searched for these&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;regexes, one by one, until one succeeds.  The found image address&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;will be used.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in &lt;code&gt;(org-download-image link)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image-type-from-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url-retrieve-synchronously&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-download-img-regex-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;link %s does not point to an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;image-type-from-file-name&lt;/code&gt; is a built-in from &lt;code&gt;image.el&lt;/code&gt; that
decides if &lt;code&gt;link&lt;/code&gt; looks like an image file or not.&lt;/p&gt;

&lt;p&gt;As you can see, since I intend to use &lt;code&gt;link&lt;/code&gt; right after to be
transformed right now, I&amp;#39;m using &lt;code&gt;url-retrieve-synchronously&lt;/code&gt;, instead
of the asynchronous &lt;code&gt;url-retrieve&lt;/code&gt;. The other one is used by default
to download the actual image.&lt;/p&gt;

&lt;p&gt;Note the use of the &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;pop&lt;/code&gt; combination for traversing a list.
I&amp;#39;ve seen it used in some places in the Emacs core, and I think it&amp;#39;s
pretty neat.&lt;/p&gt;

&lt;p&gt;Arranging the regular expressions into a list is necessary to give
priority to some regexes. For instance, the first element of
&lt;code&gt;org-download-img-regex-list&lt;/code&gt; should match e.g. an actual referred
image on Twitter, while the second element will match at least a
profile picture in the case when there is no referred image.&lt;/p&gt;

&lt;h2 id=&quot;visual-demo&quot;&gt;Visual demo&lt;/h2&gt;

&lt;p&gt;I think that I might have over-engineered the custom options of
&lt;code&gt;org-download&lt;/code&gt; a bit. Just to keep you motivated enough to figure them
out, here&amp;#39;s a link to
&lt;a href=&quot;https://www.youtube.com/watch?v=dAojpHR-6Uo&quot;&gt;a Youtube demo&lt;/a&gt; of the
fast clickety-clicking (the mouse usage), that comes after some
clackety-clacking (the customization).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Ediff</title>
   <link href="http://oremacs.com/2015/01/17/setting-up-ediff/"/>
   <updated>2015-01-17T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/17/setting-up-ediff</id>
   <content type="html">&lt;p&gt;Once you make Ediff bearable, it becomes wonderful.  At least this was
my experience. It&amp;#39;s a very good tool, but some of the defaults look
very poor to me.&lt;/p&gt;

&lt;h2 id=&quot;customizing-the-customize&quot;&gt;Customizing the &lt;code&gt;customize&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;First of all, I&amp;#39;ll list a macro that I&amp;#39;ve started to use for setting
custom variables:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This macro I&amp;#39;ve put together myself after searching though the code
base and not finding something similar; &lt;code&gt;custom-set-variables&lt;/code&gt; comes
close to what I want, or maybe &lt;code&gt;custom-initialize-changed&lt;/code&gt;.  Basically
all I want is a &lt;code&gt;setq&lt;/code&gt; that is aware of the &lt;code&gt;custom-set&lt;/code&gt; property of a
variable. If you know such a macro, please let me know.&lt;/p&gt;

&lt;h2 id=&quot;changing-some-ediff-options&quot;&gt;Changing some Ediff options&lt;/h2&gt;

&lt;p&gt;Now, that I&amp;#39;ve explained the custom setter (by the way, using
&lt;code&gt;custom-set-variables&lt;/code&gt; is absolutely equivalent to &lt;code&gt;csetq&lt;/code&gt;), here are
my changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don&amp;#39;t use the weird setup with the control panel in a separate
frame.  I can manage windows in Emacs much better than my desktop
(Unity or Gnome Shell) can manage the Emacs frames.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-window-setup-function &amp;#39;ediff-setup-windows-plain)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Split the windows horizontally instead of vertically. This way, it&amp;#39;s
much easier to follow the changes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-split-window-function &amp;#39;split-window-horizontally)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ignore white space. I don&amp;#39;t write a lot of Python, so I don&amp;#39;t care
about the white space in the diffs. At the same time, I re-format any
LISP code that I edit to my liking, and I want to see only the
important changes in the diff, and not the whitespace nonsense.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-diff-options &amp;quot;-w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;changing-some-ediff-key-bindings&quot;&gt;Changing some Ediff key bindings&lt;/h2&gt;

&lt;p&gt;This is just the standard stuff that I like to do for each mode that
does not self-insert: assign &lt;kbd&gt;j&lt;/kbd&gt; to move down, and
&lt;kbd&gt;k&lt;/kbd&gt; to move up.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-ediff-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ediff-setup-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ediff-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-next-difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ediff-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-previous-difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ora-ediff-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;restoring-the-windows-after-ediff-quits&quot;&gt;Restoring the windows after Ediff quits&lt;/h2&gt;

&lt;p&gt;When you quit an Ediff session with &lt;kbd&gt;q&lt;/kbd&gt;, it just leaves the
two diff windows around, instead of restoring the window configuration
from when Ediff was started. Here&amp;#39;s the (slightly hacky) code to
restore the old window configuration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;winner-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-after-quit-hook-internal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;winner-undo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;list-of-ways-that-i-use-to-invoke-ediff&quot;&gt;List of ways that I use to invoke Ediff&lt;/h2&gt;

&lt;h3 id=&quot;from-magit&quot;&gt;from &lt;code&gt;magit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In 80% of the cases, I call Ediff with &lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;magit-ediff&lt;/code&gt;) from
&lt;code&gt;magit-status-mode&lt;/code&gt;. This gives me a better overview of the changes,
especially when I want to revert stuff with either &lt;kbd&gt;a&lt;/kbd&gt;
(&lt;code&gt;ediff-copy-A-to-B&lt;/code&gt;) or &lt;kbd&gt;b&lt;/kbd&gt; (&lt;code&gt;ediff-copy-B-to-A&lt;/code&gt;). Probably
with &lt;kbd&gt;a&lt;/kbd&gt;, since &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;magit&lt;/a&gt; seems
to consistently put the &lt;code&gt;@{index}&lt;/code&gt; file into the &lt;code&gt;A&lt;/code&gt; diff window, and
the current file into the &lt;code&gt;B&lt;/code&gt; window.&lt;/p&gt;

&lt;p&gt;So if I&amp;#39;m looking at a diff (to which I navigated with
&lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt;), I can revert it with &lt;kbd&gt;a&lt;/kbd&gt;. At this
point, the diff region in the current file will become equal to that
of the index file. But it will not be saved yet. If I want to save the
current file in the &lt;code&gt;B&lt;/code&gt; window, I can do it with &lt;kbd&gt;wb&lt;/kbd&gt;
(&lt;code&gt;ediff-save-buffer&lt;/code&gt;). After a revert, it&amp;#39;s also useful to call
&lt;kbd&gt;!&lt;/kbd&gt;(&lt;code&gt;ediff-update-diffs&lt;/code&gt;), which will remove the zero-length
diffs and update the diff-count in the mode-line.&lt;/p&gt;

&lt;h3 id=&quot;other-methods&quot;&gt;other methods&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ediff-buffers&lt;/code&gt; will diff two (different) buffers. If you happen to
have only two windows open with the appropriate buffers, you get them
as defaults and can choose them quickly with &lt;kbd&gt;RET&lt;/kbd&gt; &lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ediff-files&lt;/code&gt; is similar, but works on files instead. I like to just mark the appropriate files
in &lt;code&gt;dired&lt;/code&gt; with &lt;kbd&gt;m&lt;/kbd&gt;, then they also get auto-selected by &lt;code&gt;ediff-files&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ediff-current-file&lt;/code&gt; is useful to see the unsaved changes to the current file.
I rarely use it, since I have a compulsion to save every file every chance I get. There is little hope
to recover from this addiction, unless someone implements an analogue of &lt;a href=&quot;https://github.com/bbatsov/guru-mode&quot;&gt;guru-mode&lt;/a&gt;
that annoys you when you try to save a file. Actually, it&amp;#39;s not a bad idea - &lt;kbd&gt;C-x C-s&lt;/kbd&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Oleh, you have saved this file &lt;code&gt;40 times&lt;/code&gt; in the last hour; the last
save was &lt;code&gt;0 minutes 34 seconds ago&lt;/code&gt;; since then, you&amp;#39;ve changed &lt;code&gt;27
bytes&lt;/code&gt; of information. Are you &lt;strong&gt;sure&lt;/strong&gt; you want to save &lt;code&gt;[y/N]&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Save before compile</title>
   <link href="http://oremacs.com/2015/01/16/compile-savely/"/>
   <updated>2015-01-16T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/16/compile-savely</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a very simplistic function that I was using for a while:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-and-compile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;make -j4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pop-to-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-error-last-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will save the current buffer, run &lt;code&gt;compile&lt;/code&gt; and switch to
compilation buffer.&lt;/p&gt;

&lt;h2 id=&quot;compilation-customization&quot;&gt;Compilation customization&lt;/h2&gt;

&lt;p&gt;Turns out that there&amp;#39;s no need to save, since I get away with this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(setq compilation-ask-about-save nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Non-nil means M-x &lt;code&gt;compile&lt;/code&gt; asks which buffers to save before
compiling.  Otherwise, it saves all modified buffers without asking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;select-compilation-target&quot;&gt;Select compilation target&lt;/h2&gt;

&lt;p&gt;A year ago, I wrote a package that looks for a &lt;code&gt;Makefile&lt;/code&gt; in the
current directory, parses the available targets and allows you to
choose one with &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.  It&amp;#39;s
called &lt;a href=&quot;https://github.com/abo-abo/helm-make&quot;&gt;helm-make&lt;/a&gt;.  It&amp;#39;s almost
the same as &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;compile&lt;/code&gt; (which also has completion for
targets), and it wraps around &lt;code&gt;compile&lt;/code&gt;, but I just find it to be more
convenient.&lt;/p&gt;

&lt;p&gt;This package is as simple as it sounds, the only customization that
you can do is to set &lt;code&gt;helm-make-do-save&lt;/code&gt; to save all open buffers
visiting the &lt;code&gt;Makefile&lt;/code&gt;&amp;#39;s directory. It also provides, in addition to
the plain &lt;code&gt;helm-make&lt;/code&gt; command, a &lt;code&gt;helm-make-projectile&lt;/code&gt; command, which
is almost the same, except the &lt;code&gt;Makefile&lt;/code&gt; should come not from the
current directory but from &lt;code&gt;projectile-project-root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-error-navigation-to-go-with-your-compilation&quot;&gt;Some error navigation to go with your compilation&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve had these bindings for a very long time, just making sure
that you&amp;#39;re aware of these commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[f6]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;next-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[C-f6]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;previous-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These bindings work for &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;occur&lt;/code&gt; and &lt;code&gt;rgrep&lt;/code&gt; as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C++ - a dot inserts last var plus dot</title>
   <link href="http://oremacs.com/2015/01/15/c++-smart-dot/"/>
   <updated>2015-01-15T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/15/c++-smart-dot</id>
   <content type="html">&lt;p&gt;It is very much in the spirit of C++ to pull an object into existence
with e.g. a constructor definition and then poke and prod it with
various method calls. Most of the time, the dot will have the object
name on the left. So why not automatically insert the object name each
time I press the dot? Below, I&amp;#39;ll show a code that does exactly that.&lt;/p&gt;

&lt;h2 id=&quot;the-dot-command&quot;&gt;The dot command&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-smart-dot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Insert a dot or an object name plus dot when appropriate.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c++-get-recent-var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is pretty simple: if we are at the beginning of the line,
optionally with some spaces or (ugh) tabs before the point, then try
to insert the object name along with a dot.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how to bind it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cc-mode&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;c++-smart-dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-to-get-the-recent-variable&quot;&gt;How to get the recent variable&lt;/h2&gt;

&lt;p&gt;This code doesn&amp;#39;t aim to be thorough, it&amp;#39;s just a hack that
works reasonably well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[A-Za-z][A-Za-z0-9_]*&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;The regex for C++ variable name.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-get-recent-var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return the closest thing that looks like an object.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The search is performed backwards through code.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable dot chain&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; \\(%s\\)\\.%s.*\n[\t ]*&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable constructor init&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable dot, first on line&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*\\(%s\\)\\.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re a stickler for performance and you don&amp;#39;t want to call format a bunch of times,
you can amend the code like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defalias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;c++-get-recent-var&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;byte-compile&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable dot chain&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot; \\(%s\\)\\.%s.*\n[\t ]*&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable constructor init&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable dot, first on line&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*\\(%s\\)\\.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return the closest thing that looks like an object.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The search is performed backwards through code.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The thing above looks slightly ugly. I&amp;#39;m open to suggestions to make
it look nicer.&lt;/p&gt;

&lt;h2 id=&quot;the-sample-application&quot;&gt;The sample application&lt;/h2&gt;

&lt;p&gt;For the happy people that have never seen C++:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;n&quot;&gt;DataOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_dof_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dof_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_data_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, after defining an object &lt;code&gt;data_out&lt;/code&gt;, I insert it subsequently
with just &lt;kbd&gt;.&lt;/kbd&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zoom in / out with style</title>
   <link href="http://oremacs.com/2015/01/14/repeatable-commands/"/>
   <updated>2015-01-14T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/14/repeatable-commands</id>
   <content type="html">&lt;p&gt;I don&amp;#39;t usually zoom a lot, typically I do it to size up other
people&amp;#39;s functions. Then, I zoom-out a couple times in a row until the
function fits on the screen. Sometimes, I overshoot the zoom-out, and
I have to zoom-in instead. I have &lt;code&gt;text-scale-increase&lt;/code&gt; bound to
&lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt; and &lt;code&gt;text-scale-decrease&lt;/code&gt; bound to
&lt;kbd&gt;&amp;lt;f2&amp;gt; l&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Below, I&amp;#39;ll demonstrate how to call those two commands interchangeably
with e.g. &lt;kbd&gt;&amp;lt;f2&amp;gt; g g g l g g l&lt;/kbd&gt;, i.e. omitting the
&lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt; prefix.&lt;/p&gt;

&lt;h2 id=&quot;define-repeatable-command&quot;&gt;Define repeatable command&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return a lambda that calls the first function of ALIST.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;It sets the transient map to all functions of ALIST.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lexical-let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-sparse-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cdar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-transient-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a pretty simple function that takes an alist of keys and
commands, and returns a lambda that calls the first command and sets
the transient map to call the first and other commands.  The way the
transient map works, it takes priority over almost all maps, but
disappears as soon as you press something that doesn&amp;#39;t belong to it.&lt;/p&gt;

&lt;h2 id=&quot;the-zoom-in-/-zoom-out-use-case&quot;&gt;The zoom-in / zoom-out use case&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt; g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt; l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is it. A nice thing about this setup is that I don&amp;#39;t have to
think about the zoom state and quitting it: I&amp;#39;ll quit it automatically
as soon as I press anything other than &lt;kbd&gt;l&lt;/kbd&gt; or &lt;kbd&gt;g&lt;/kbd&gt;.
Moreover, the command that exited the zoom state will be executed as
usual.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Even more dired options</title>
   <link href="http://oremacs.com/2015/01/13/dired-options/"/>
   <updated>2015-01-13T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/13/dired-options</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been posting a lot about &lt;code&gt;dired&lt;/code&gt; lately, and with good cause.  A
lot of people say that &lt;code&gt;org-mode&lt;/code&gt; is the killer app of Emacs, but
&lt;code&gt;dired&lt;/code&gt; should be in that group as well, especially if you count
&lt;code&gt;tramp&lt;/code&gt; as part of &lt;code&gt;dired&lt;/code&gt;. Below, I&amp;#39;ll list a few dired options in my
config that deviate from the defaults.&lt;/p&gt;

&lt;h2 id=&quot;dired-listing-switches&quot;&gt;&lt;code&gt;dired-listing-switches&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the essence of what &lt;code&gt;dired&lt;/code&gt; presents and how it presents it.
A great thing about it is that these are just the &lt;code&gt;ls&lt;/code&gt; switches, so
you can look them up with &lt;code&gt;info ls&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-listing-switches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-laGh1v --group-directories-first&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: Is the only mandatory one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Means to list invisible files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: Don&amp;#39;t show group information. These days, when there are more
laptops than people, the group info is rarely useful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: Human readable sizes, such as &lt;strong&gt;M&lt;/strong&gt; for mebibytes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1v&lt;/code&gt;: Affects the sorting of digits, hopefully in a positive way.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--group-directories-first&lt;/code&gt;: self-explanatory, I like to have the directories on the top,
separate from the files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;on-recursion&quot;&gt;On recursion&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-recursive-copies&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-recursive-deletes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These settings make dired skip the confirmation when you copy or
delete a directory that contains other directories.  What&amp;#39;s the worse
that could happen, right?&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;diff-indicator-removed&quot;&gt;-  rm -rf /usr /lib/nvidia-current/xorg/xorg&lt;/span&gt;
&lt;span class=&quot;diff-indicator-added&quot;&gt;+  rm -rf /usr/lib/nvidia-current/xorg/xorg&lt;/span&gt;
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>File sizes in dired</title>
   <link href="http://oremacs.com/2015/01/12/dired-file-size/"/>
   <updated>2015-01-12T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/12/dired-file-size</id>
   <content type="html">&lt;p&gt;Today, I&amp;#39;ll continue with the trend of posting a small piece of my
config when I don&amp;#39;t have the time to post something more substantial.&lt;/p&gt;

&lt;h2 id=&quot;some-code&quot;&gt;Some code&lt;/h2&gt;

&lt;p&gt;This one looks nice, although it only works on systems with &lt;code&gt;/usr/bin/du&lt;/code&gt;,
which actually comprise 100% of the systems that I use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-get-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-temp-buffer&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;call-process&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/bin/du&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-sch&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&amp;quot;Size of all marked files: %s&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\(^[ 0-9.,]+[A-Za-z]+\\).*total$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On doing a search, turns out that I got this code from
&lt;a href=&quot;http://www.emacswiki.org/emacs/DiredGetFileSize&quot;&gt;the wiki&lt;/a&gt; at some
point.  I can confirm that, unlike some of the other code on the wiki,
this one still works as advertised: you can use it on a directory or
on a series of marked files and directories.&lt;/p&gt;

&lt;h2 id=&quot;standard-dired-marking&quot;&gt;Standard &lt;code&gt;dired&lt;/code&gt; marking&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;dired&lt;/code&gt;, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mark an item with &lt;kbd&gt;m&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;unmark an item with &lt;kbd&gt;DEL&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;inverse selection with &lt;kbd&gt;t&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;unmark everything with &lt;kbd&gt;U&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to this, the selection with the mouse and the control and
shift keys that many file browsers use looks like kindergarten.&lt;/p&gt;

&lt;p&gt;This new action, getting the size of marked things, I&amp;#39;ve bound to &lt;kbd&gt;z&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-get-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Making Elisp regex look nicer</title>
   <link href="http://oremacs.com/2015/01/11/pretty-elisp-regex/"/>
   <updated>2015-01-11T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/11/pretty-elisp-regex</id>
   <content type="html">&lt;p&gt;This is just a small improvement to make e.g.  &lt;code&gt;\\(&lt;/code&gt; show up in
regular expressions without the escape chars, but instead fontified
with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;. It doesn&amp;#39;t affect the underlying code
at all, just makes it look nicer. For the &lt;code&gt;\\|&lt;/code&gt; I chose &lt;code&gt;∨&lt;/code&gt; - the
&lt;em&gt;logical or&lt;/em&gt; character.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;glyph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font-lock-keyword-face&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-beginning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-end&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;glyph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\|&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;∨&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\(&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-it-looks-like&quot;&gt;How it looks like&lt;/h2&gt;

&lt;p&gt;At first, I wanted to just inline &lt;a href=&quot;/download/elisp-regex.png&quot;&gt;a picture&lt;/a&gt;,
but then I thought that &lt;code&gt;htmlize-buffer&lt;/code&gt; would be able to handle it.
It didn&amp;#39;t, so I just edited a small snippet by hand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;[^\n%|]*?&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;|&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;([^\n]*&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;?$&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;[^\n%|]*?&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;%[^\n]*&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;?$&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s really satisfying to see those escape chars vanish as I type in
a capture group in the regex, especially with the help of
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy-mode&lt;/a&gt;.
Here are some relevant tests for the regex support:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;a regex \\\\|\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;a regex \\\\(|\\\\)\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(|foo\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|foo\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(foo\\\\)|\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;foo|\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|\\\\(foo\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|foo\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(foo|\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;foo|\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>dired and ansi-term&#58; BFF</title>
   <link href="http://oremacs.com/2015/01/10/dired-ansi-term/"/>
   <updated>2015-01-10T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/10/dired-ansi-term</id>
   <content type="html">&lt;p&gt;In the comments to
&lt;a href=&quot;/2015/01/01/three-ansi-term-tips/&quot;&gt;my previous post on ansi-term&lt;/a&gt;, I discovered
&lt;a href=&quot;https://github.com/adamrt/sane-term&quot;&gt;sane-term&lt;/a&gt; - a package that
cycles though your terminals in Emacs, as well as implements some of
the tips that I gave. While it&amp;#39;s nice and all, and you should check it
out if you&amp;#39;re looking for something like that, it&amp;#39;s not really for
me. I will describe the system that I&amp;#39;m currently using below.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-best-list-length-for-cycling?&quot;&gt;What is the best list length for cycling?&lt;/h2&gt;

&lt;p&gt;In my opinion, it&amp;#39;s one or two. If it&amp;#39;s one, you&amp;#39;re not really
cycling, if it&amp;#39;s two, it&amp;#39;s fine. Anything more than that causes
stress, since you have to check each time if the outcome of the cycle
ended up being the one that you wanted.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why I usually have only one &lt;code&gt;*ansi-term*&lt;/code&gt; active in my Emacs
session at all times.  Here&amp;#39;s how it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Switch to terminal. Launch if nonexistent.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;switch-to-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defalias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;tt&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At one point, I had &lt;code&gt;terminal&lt;/code&gt; bound to &lt;kbd&gt;C-t&lt;/kbd&gt;, until I found
a command even better suited for that binding, which was
&lt;a href=&quot;https://github.com/nonsequitur/smex/&quot;&gt;smex&lt;/a&gt;. The actual &lt;code&gt;terminal&lt;/code&gt;
command isn&amp;#39;t bound right now, I just launch it from &lt;code&gt;smex&lt;/code&gt; on very
rare occasions.&lt;/p&gt;

&lt;h2 id=&quot;how-i-launch-terminal-95%-of-the-time&quot;&gt;How I launch terminal 95% of the time&lt;/h2&gt;

&lt;p&gt;From &lt;code&gt;dired&lt;/code&gt; of course. The shell&amp;#39;s natural way of switching the
directory with &lt;code&gt;cd&lt;/code&gt; is extremely inefficient compared to &lt;code&gt;dired&lt;/code&gt;.  So
any time I want to have a shell in a specific directory, I first
navigate there with &lt;code&gt;dired&lt;/code&gt;, sometimes combined with
&lt;code&gt;ido-find-file&lt;/code&gt;. Then I get my current &lt;code&gt;*ansi-term*&lt;/code&gt; and tell it to
switch to the current &lt;code&gt;dired&lt;/code&gt; buffer&amp;#39;s directory with &lt;kbd&gt;`&lt;/kbd&gt;
binding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;`&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-open-term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-open-term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Open an `ansi-term&amp;#39; that corresponds to current directory.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-current-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-string&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-remote-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tramp-dissect-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ssh %s@%s\n&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd &amp;#39;%s&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also have a similar &lt;code&gt;eshell&lt;/code&gt; setup, although I have yet to
comprehend why &lt;code&gt;eshell&lt;/code&gt; is great and am using &lt;code&gt;*ansi-term*&lt;/code&gt; most of the
time instead.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eshell-cmd&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd %s&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt;
              &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-i-launch-dired-100%-of-the-time&quot;&gt;How I launch &lt;code&gt;dired&lt;/code&gt; 100% of the time&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;dired-jump&lt;/code&gt;, of course. This command will examine your current
buffer&amp;#39;s &lt;code&gt;default-directory&lt;/code&gt; and open a &lt;code&gt;dired&lt;/code&gt; buffer there. All you
need is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;dired-jump&lt;/code&gt; command will be bound automatically to &lt;kbd&gt;C-x
C-j&lt;/kbd&gt;.  I have it also bound to &lt;kbd&gt;C-:&lt;/kbd&gt;, since that&amp;#39;s more
convenient to press with my keyboard layout.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also better in the common situation when I want to jump to a
&lt;code&gt;dired&lt;/code&gt; buffer from &lt;code&gt;*ansi-term*&lt;/code&gt;. In that situation, &lt;kbd&gt;C-x
C-j&lt;/kbd&gt; will not work by default, and will call &lt;code&gt;term-line-mode&lt;/code&gt;
instead. But it will work once you are in &lt;code&gt;term-line-mode&lt;/code&gt;.  You can
go back to the default &lt;code&gt;term-char-mode&lt;/code&gt; with &lt;kbd&gt;C-x C-k&lt;/kbd&gt;.  To
avoid this nonsense, just bind &lt;code&gt;dired-jump&lt;/code&gt; to some binding that&amp;#39;s
convenient for you and works from &lt;code&gt;*ansi-term*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-i-do-when-i-need-more-than-one-terminal&quot;&gt;What I do when I need more than one terminal&lt;/h2&gt;

&lt;p&gt;Then I just name one: since the default one is supposed to be named
&lt;code&gt;*ansi-term*&lt;/code&gt;, if I create one named e.g. &lt;code&gt;*jekyll*&lt;/code&gt;, it will be
ignored by &lt;code&gt;dired-open-term&lt;/code&gt;. This is exactly what I want, since I just
create named terminals for long running processes like &lt;code&gt;jekyll serve&lt;/code&gt;.
And I can switch to the named terminals with just &lt;code&gt;ido-switch-buffer&lt;/code&gt;.
Here is the very simple code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;named-term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sName: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>tilde in ido-find-file</title>
   <link href="http://oremacs.com/2015/01/09/ido-find-file-tilde/"/>
   <updated>2015-01-09T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/09/ido-find-file-tilde</id>
   <content type="html">&lt;p&gt;On seeing
&lt;a href=&quot;http://emacs.stackexchange.com/questions/7193/how-to-replicate-the-to-home-to-root-behaviour-in-ido-find-file-but&quot;&gt;this Emacs Stack Exchange question&lt;/a&gt;,
it occurred to me that if some config code is old for me, it&amp;#39;s not old
for the new Emacs users. So I&amp;#39;ll share one of the old &lt;code&gt;ido-find-file&lt;/code&gt;
hacks that I&amp;#39;ve been using for ages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This song is an oldie ...but, uh ... &lt;em&gt;pause&lt;/em&gt;
Well, it&amp;#39;s an oldie where I come from.&lt;/p&gt;

&lt;p&gt;-- &lt;cite&gt;Marty&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;This is the original code that I was using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-set-current-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-exit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exit-minibuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-setup-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-ido-setup-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-generalization&quot;&gt;The generalization&lt;/h2&gt;

&lt;p&gt;It wouldn&amp;#39;t be a LISP if I couldn&amp;#39;t generalize the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return a command that sends DIR to `ido-find-file&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-set-current-directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-exit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exit-minibuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s how to leverage this generalization:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is pretty ugly, implementation-wise, since
&lt;code&gt;ido-find-file-jump&lt;/code&gt; would be called three times each time you do an
&lt;code&gt;ido&lt;/code&gt; related command, like &lt;code&gt;ido-switch-buffer&lt;/code&gt; etc.
I would have preferred to do it like this instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ido&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, for some strange reason, &lt;code&gt;ido&lt;/code&gt; keeps overriding
&lt;code&gt;ido-file-dir-completion-map&lt;/code&gt; and I actually have to re-set my
bindings in &lt;code&gt;ido-setup-hook&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-further-generalization&quot;&gt;The further generalization&lt;/h2&gt;

&lt;p&gt;Here is the final iteration of the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setcar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-setup-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-ido-setup-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-customize-tricks&quot;&gt;The customize tricks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Custom setters?&lt;br&gt;
In &lt;em&gt;my&lt;/em&gt; Elisp?&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s more likely than you think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that the &lt;code&gt;mapc&lt;/code&gt; statement needs to be evaluated if I dynamically
modify &lt;code&gt;oleh-ido-shortcuts&lt;/code&gt;. This isn&amp;#39;t a problem for me, but if I
wanted to package a code like this, I would define
&lt;code&gt;oleh-ido-shortcuts&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;A list of directory-shortcut pairs for `ido-find-file&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-default&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this should work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rassoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/worf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the appropriate lambda is auto-generated by using the &lt;code&gt;:set&lt;/code&gt;
property of &lt;code&gt;oleh-ido-shortcuts&lt;/code&gt;.
And &lt;code&gt;csetq&lt;/code&gt; is just a &lt;code&gt;customize&lt;/code&gt;-aware version of &lt;code&gt;setq&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>My org-protocol setup, part 2.</title>
   <link href="http://oremacs.com/2015/01/08/org-protocol-2/"/>
   <updated>2015-01-08T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/08/org-protocol-2</id>
   <content type="html">&lt;p&gt;This continues the code from &lt;a href=&quot;/2015/01/07/org-protocol-1/&quot;&gt;the part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;org-handle-link-youtube&quot;&gt;&lt;code&gt;org-handle-link-youtube&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I tried to make the first call to &lt;code&gt;youtube-dl&lt;/code&gt; asynchronous, but it
wasn&amp;#39;t working out.  So for the current code, there&amp;#39;s still about a 2
second delay before the capture buffer appears.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link-youtube&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lexical-let*&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-trim&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-to-string&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;youtube-dl \&amp;quot;&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot; -o \&amp;quot;%(title)s.%(ext)s\&amp;quot; --get-filename&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Downloads/Videos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-link-hook&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;async-shell-command&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;youtube-dl \&amp;quot;%s\&amp;quot; -o \&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ent.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Videos&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some notes for people who want to learn more Elisp:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexical-let*&lt;/code&gt; is needed to have &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;full-name&lt;/code&gt; visible in the &lt;code&gt;lambda&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-make-link-string&lt;/code&gt; is a nice utility command that escapes all sorts of
characters that &lt;code&gt;org-mode&lt;/code&gt; doesn&amp;#39;t like, e.g. brackets etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see my full &lt;code&gt;org-capture&lt;/code&gt; and &lt;code&gt;org-protocol&lt;/code&gt; setup
&lt;a href=&quot;https://github.com/abo-abo/org-fu&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My org-protocol setup, part 1.</title>
   <link href="http://oremacs.com/2015/01/07/org-protocol-1/"/>
   <updated>2015-01-07T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/07/org-protocol-1</id>
   <content type="html">&lt;p&gt;I&amp;#39;m quite busy with a project today, so I can&amp;#39;t compose many words.
However, pasting and explaining some code is fine.  The basic idea is
creating TODO tasks in certain &lt;code&gt;org-mode&lt;/code&gt; files by clicking a link in
Firefox, thanks to
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/&quot;&gt;org-mode capture&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;org-protocol-starter&quot;&gt;&lt;code&gt;org-protocol&lt;/code&gt; starter&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-protocol-default-template-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Link&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;* TODO %(org-wash-link)\nAdded: %U\n%(org-link-hooks)\n%?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;org-capture-templates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org-wash-link&lt;/code&gt; should clear up some redundancies in the TODO&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-handle-link&lt;/code&gt; should open the appropriate file and heading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-link-hooks&lt;/code&gt; should insert some extra information&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;org-wash-link&quot;&gt;&lt;code&gt;org-wash-link&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Basically, when I capture a question on
&lt;a href=&quot;http://stackoverflow.com/questions/tagged/emacs&quot;&gt;Stack Overflow&lt;/a&gt;, I
don&amp;#39;t want to see &lt;code&gt;- Stack Overflow -&lt;/code&gt; as part of the TODO string,
since the TODO itself is stored in &lt;code&gt;wiki/stack.org/* Questions&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-wash-link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;replace-regexp-in-string&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot; - Stack Overflow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;org-link-hooks&quot;&gt;&lt;code&gt;org-link-hooks&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is just a hack for passing information around that
functions from &lt;code&gt;org-handle-link&lt;/code&gt; can use.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hooks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;funcall&lt;/span&gt;
                 &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;org-handle-link&quot;&gt;&lt;code&gt;org-handle-link&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the heart of the setup.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^https://www.youtube.com/&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-handle-link-youtube&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;regexp-quote&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&amp;quot;http://stackoverflow.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wiki/stack.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Questions&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ent.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Articles&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Youtube links will be handled with &lt;code&gt;org-handle-link-youtube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stack Overflow links will be stored in &lt;code&gt;wiki/stack.org/* Questions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;all other links will be stored in &lt;code&gt;ent.org/* Articles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ll write down &lt;code&gt;org-handle-link-youtube&lt;/code&gt; in a later post, since I
would still like to sort out a few kinks with it. The main issue is
that I&amp;#39;m sending two requests to Youtube: one to download the video,
which is fine, since &lt;code&gt;async&lt;/code&gt; handles it; and other to get the title of
the video and put it in the heading. And this other request causes a
perceptible delay when capturing.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rushing headlong</title>
   <link href="http://oremacs.com/2015/01/06/rushing-headlong/"/>
   <updated>2015-01-06T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/06/rushing-headlong</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;And you&amp;#39;re rushing headlong out of control...&lt;/p&gt;

&lt;p&gt;-- &lt;cite&gt;Brian May&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#39;ve finally wrapped a piece of config that I was using for a while in
a package called &lt;a href=&quot;https://github.com/abo-abo/headlong&quot;&gt;headlong&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-do?&quot;&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;It provides a macro called &lt;code&gt;headlong-with&lt;/code&gt; that modifies minibuffer
completion for the forms within it, making it faster in some
situations.  For instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headlong-with&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completing-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to bookmark: &amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;bookmark-alist&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headlong-with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;read-extended-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But more importantly, it provides two commands that can use it
efficiently: &lt;code&gt;headlong-bookmark-jump&lt;/code&gt; and
&lt;code&gt;headlong-bookmark-jump-other&lt;/code&gt;. The second one is basically the same
as the first one, except it opens the bookmark with &lt;code&gt;pop-to-buffer&lt;/code&gt;,
i.e. in other window.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-completion-work?&quot;&gt;How does this completion work?&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s nothing fancy, you will just exit the minibuffer automatically as
soon as there is only one completion candidate left.
So it saves you &lt;strong&gt;one&lt;/strong&gt; keystroke, namely &lt;kbd&gt;RET&lt;/kbd&gt;.
How much is &lt;em&gt;one&lt;/em&gt; keystroke worth? It depends.&lt;/p&gt;

&lt;p&gt;If you arrange your bookmarks in a way that I do, with each one
starting with a different letter, it saves you 33% of the total
keystrokes.  For example, suppose I have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;bookmark-jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;headlong-bookmark-jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I can jump to my bookmarked directory named &lt;code&gt;&amp;quot;s: sources&amp;quot;&lt;/code&gt; with
two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;RET&lt;/kbd&gt; &lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-o&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second method looks like it&amp;#39;s 33% shorter, but it feels like it&amp;#39;s
even more, since pressing &lt;kbd&gt;RET&lt;/kbd&gt; is harder than it should be
on most keyboards.&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-cool?&quot;&gt;Why is this cool?&lt;/h2&gt;

&lt;p&gt;This is cool because you can implement your bookmarks as efficiently
as you would with just wrapping stuff with a &lt;code&gt;lambda&lt;/code&gt; and using
&lt;code&gt;global-set-key&lt;/code&gt;, except that you can view and edit the bindings with
&lt;code&gt;bookmark-bmenu-list&lt;/code&gt;, and quickly the update bookmark positions with
&lt;code&gt;bookmark-set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I get when I call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;bookmark-bmenu-list&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/bookmarks.png&quot; alt=&quot;bookmarks&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the list above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;black bookmarks are files&lt;/li&gt;
&lt;li&gt;blue bookmarks are directories&lt;/li&gt;
&lt;li&gt;pink bookmarks are functions (you need &lt;code&gt;bookmark+&lt;/code&gt; for them)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The package should be available in MELPA soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Yet another youtube-dl interface for Emacs</title>
   <link href="http://oremacs.com/2015/01/05/youtube-dl/"/>
   <updated>2015-01-05T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/05/youtube-dl</id>
   <content type="html">&lt;p&gt;If you haven&amp;#39;t been living under a rock, you already know what
&lt;a href=&quot;https://www.youtube.com/&quot;&gt;Youtube&lt;/a&gt; is.  It&amp;#39;s a repository with videos of
varying degree of usefulness with a terrible media player tacked on.
Instead, I like to watch my videos in
&lt;a href=&quot;http://www.videolan.org/vlc/index.html&quot;&gt;VLC&lt;/a&gt;, which comes closest to
providing an Emacs-like experience among video players.&lt;/p&gt;

&lt;h2 id=&quot;useful-vlc-shortcuts&quot;&gt;Useful VLC shortcuts&lt;/h2&gt;

&lt;p&gt;Here is a list of shortcuts that really make me stick with VLC:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; - toggle full-screen&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt; - toggle audio track&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;n&lt;/kbd&gt; - toggle subtitle track&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;#93;&lt;/kbd&gt; - speed up play by &lt;code&gt;0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;#91;&lt;/kbd&gt; - slow down play by &lt;code&gt;0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-right&lt;/kbd&gt; - forward by 15 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-left&lt;/kbd&gt; - backward by 15 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-right&lt;/kbd&gt; - forward by 60 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-left&lt;/kbd&gt; - backward by 60 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-1&lt;/kbd&gt; - quarter of video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-2&lt;/kbd&gt; - half of video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-3&lt;/kbd&gt; - full video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-4&lt;/kbd&gt; - double video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-h&lt;/kbd&gt; - toggle mouse buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you&amp;#39;re not watching instructional videos at &lt;code&gt;1.6&lt;/code&gt; speed,
or skipping the Simpsons intro sequence with &lt;kbd&gt;M-right&lt;/kbd&gt;, you&amp;#39;re missing out.&lt;/p&gt;

&lt;h2 id=&quot;from-youtube-to-vlc&quot;&gt;From Youtube to VLC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rg3/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt; is an excellent command-line tool
for saving the videos from Youtube. It downloads the highest resolution at a usually
higher speed than Youtube&amp;#39;s player buffers. I&amp;#39;ve discovered it when I had to download
a bunch of lecture videos from &lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;.
You can install it with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install youtube-dl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;one-emacs-script-to-rule-them-all&quot;&gt;One Emacs script to rule them all&lt;/h2&gt;

&lt;p&gt;I quickly tired of opening a shell, setting the directory, entering
the command, and pasting the link. So I wrote some Elisp code that does it for me.
It&amp;#39;s nothing too sophisticated, but I&amp;#39;ve been using this version for a couple months:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;youtube-dl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-kill&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Downloads&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-string&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd ~/Downloads &amp;amp;&amp;amp; youtube-dl &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy the link in Firefox&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;youtube-dl&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;#39;s it. A new &lt;code&gt;*ansi-term*&lt;/code&gt; will open with the task of downloading the video from the link
in the clipboard to &lt;code&gt;~/Downloads&lt;/code&gt;.
I don&amp;#39;t have to wait for the download to finish and can immediately open the video from &lt;code&gt;dired&lt;/code&gt;.
See &lt;a href=&quot;/2015/01/04/dired-nohup/&quot;&gt;the previous post&lt;/a&gt; for the description of
&lt;code&gt;dired&lt;/code&gt; process-starting setup. I can stack up multiple downloads at once if I wish in different
&lt;code&gt;*ansi-term*&lt;/code&gt;s.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is my script. There are many like it, but this one is mine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did an internet search before writing this post. Apparently many
others had the same idea of integrating &lt;code&gt;youtube-dl&lt;/code&gt; into Emacs.  You
can use mine or any other code to generate a setup that works for you.
For instance, for a while, instead of copy-pasting the URL and calling
&lt;code&gt;youtube-dl&lt;/code&gt; I used to just click the
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/&quot;&gt;org-mode capture&lt;/a&gt;
button in Firefox, and it would automatically create a &lt;code&gt;TODO&lt;/code&gt; item,
download the video, and put the link to the downloaded video in the
&lt;code&gt;TODO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve dropped this workflow when
&lt;a href=&quot;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16737&quot;&gt;the yank bug&lt;/a&gt;
surfaced. I don&amp;#39;t yet have enough experience of working with Emacs&amp;#39;s C
code to fix it.  Although, according to this
&lt;a href=&quot;https://plus.google.com/u/0/+JorgenSch%C3%A4fer/posts/ZaZcunihGqc&quot;&gt;excellent rant&lt;/a&gt;,
fixing the bug is only half of the problem: getting it merged is hard.
I&amp;#39;ll see how it goes with &lt;a href=&quot;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=19493&quot;&gt;my latest tiny patch&lt;/a&gt;.
So far it has been ignored, but it is only two days old as of now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Start a process from dired</title>
   <link href="http://oremacs.com/2015/01/04/dired-nohup/"/>
   <updated>2015-01-04T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/04/dired-nohup</id>
   <content type="html">&lt;p&gt;Here are the standard &lt;code&gt;dired&lt;/code&gt; functions for starting processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;!&lt;/kbd&gt; calls &lt;code&gt;dired-do-shell-command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;amp;&lt;/kbd&gt; calls &lt;code&gt;dired-do-async-shell-command&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the second one is usually better than the first one, having the
benefit of not locking up Emacs, it&amp;#39;s still not convenient enough for
me. The reason is pretty simple: I want to keep the processes that I
started even when I close Emacs (like opened PDFs or videos).  This is
a non-issue for people with months-long &lt;code&gt;emacs-uptime&lt;/code&gt;, but for me an
Emacs session lasts on the order of hours, since I mess about with
Elisp a lot. Below, I&amp;#39;ll share some of my &lt;code&gt;dired&lt;/code&gt; process-related
customizations.&lt;/p&gt;

&lt;h2 id=&quot;ignore-running-processes-when-closing-emacs&quot;&gt;Ignore running processes when closing Emacs&lt;/h2&gt;

&lt;p&gt;Usually there&amp;#39;s nothing wrong with just killing a spawned process,
like an &lt;code&gt;ipython&lt;/code&gt; shell or something.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; add `flet&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-buffers-kill-emacs&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no-query-kill-emacs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Prevent \&amp;quot;Active processes exist\&amp;quot; query on exit.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ad-do-it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;guess-programs-by-file-extension&quot;&gt;Guess programs by file extension&lt;/h2&gt;

&lt;p&gt;With this setup, usually there&amp;#39;s no need to manually type in the
command name.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-guess-shell-alist-user&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.pdf\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;evince&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;okular&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:djvu\\|eps\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;evince&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;eog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:xcf\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;gimp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.csv\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;libreoffice&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.tex\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;latex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\&amp;#39;&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;vlc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:mp3\\|flac\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rhythmbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.html?\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.cue?\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;audacious&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;add-nohup&quot;&gt;Add nohup&lt;/h2&gt;

&lt;p&gt;According to &lt;code&gt;info nohup&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;`nohup&amp;#39; runs the given COMMAND with hangup signals ignored, so that
the command can continue running in the background after you log
out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my case, it means that the processes started by Emacs can
continue running even when Emacs is closed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-aux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-filelist-cmd&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vlc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-start-process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;
                 &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-prefix-arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-read-shell-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp; on %s: &amp;quot;&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;current-prefix-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start-process&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shell-file-name&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;shell-command-switch&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;nohup 1&amp;gt;/dev/null 2&amp;gt;/dev/null %s \&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-filelist-cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;expand-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot; \&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;dired-filelist-cmd&lt;/code&gt; is necessary because &lt;code&gt;vlc&lt;/code&gt; weirdly
doesn&amp;#39;t make a playlist when given a list of files.&lt;/p&gt;

&lt;p&gt;Then I bind it to &lt;kbd&gt;r&lt;/kbd&gt; - a nice shortcut not bound
by default in &lt;code&gt;dired&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-start-process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Time flies</title>
   <link href="http://oremacs.com/2015/01/03/time-flies/"/>
   <updated>2015-01-03T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/03/time-flies</id>
   <content type="html">&lt;p&gt;This is the 15th post on this blog. Thankfully, no heart attacks after
the 13th one or anything.  So I&amp;#39;ll commemorate it with a post on
dealing with dates in &lt;code&gt;calc&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-much-time-has-passed-since-i-started-this-blog?&quot;&gt;How much time has passed since I started this blog?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;calc&lt;/code&gt; with &lt;kbd&gt;C-x **&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;20 Dec 2014&lt;/code&gt; with &lt;kbd&gt;&amp;#39;&amp;lt;12 20 14&lt;/kbd&gt;&lt;kbd&gt;RET&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
1:  &amp;lt;Sat Dec 20, 2014&amp;gt;
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter current time with &lt;kbd&gt;tN&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  &amp;lt;Sat Dec 20, 2014&amp;gt;
1:  &amp;lt;11:56:27am Sat Jan 3, 2015&amp;gt;
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Subtract with &lt;kbd&gt;-&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
1:  -14.498044
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that, if I want to maintain my one-post-per-day streak, I
still have half of a day to post this. Unfortunately, I have only an
old version of the blog repository on this machine, and the current
one is on a laptop at home. So I&amp;#39;ll post this in the evening.&lt;/p&gt;

&lt;h2 id=&quot;did-you-know-what-2015-looks-like-in-binary?&quot;&gt;Did you know what 2015 looks like in binary?&lt;/h2&gt;

&lt;p&gt;In your current &lt;code&gt;calc&lt;/code&gt; session,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter &lt;kbd&gt;2015&lt;/kbd&gt; &lt;kbd&gt;SPC&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -14.498044
1:  2015
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch to binary with &lt;kbd&gt;d2&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -2#1110.011111110111111111001111110001
1:  2#11111011111
.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wow, a palindrome. It&amp;#39;s too spooky, switch back to decimal with &lt;kbd&gt;d0&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -14.498044
1:  2015
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;#39;re new to &lt;code&gt;calc&lt;/code&gt;, you&amp;#39;ll probably wonder why you can&amp;#39;t enter
negative numbers with &lt;kbd&gt;-&lt;/kbd&gt;. It can be done with &lt;kbd&gt;_&lt;/kbd&gt;,
just like in
&lt;a href=&quot;http://www.jsoftware.com/help/primer/negative_number.htm&quot;&gt;J&lt;/a&gt;. Find
out more in the
&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_mono/calc.html&quot;&gt;info&lt;/a&gt;;
the
&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_mono/calc.html#Tutorial&quot;&gt;interactive tutorial&lt;/a&gt;
is absolutely excellent.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wrap a region with a LaTeX environment</title>
   <link href="http://oremacs.com/2015/01/02/wrap-with-latex/"/>
   <updated>2015-01-02T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/02/wrap-with-latex</id>
   <content type="html">&lt;p&gt;Prompted by &lt;a href=&quot;http://stackoverflow.com/questions/27736102/wrap-text-around-a-selection-in-emacs&quot;&gt;this StackOverflow question&lt;/a&gt;,
I wrote down a new package called &lt;a href=&quot;https://github.com/abo-abo/latex-wrap&quot;&gt;latex-wrap&lt;/a&gt;.
It&amp;#39;s only a few hours old, but I like it a lot.
I&amp;#39;ve grepped the sources of AUCTeX, and it doesn&amp;#39;t seem to have this functionality.&lt;/p&gt;

&lt;h2 id=&quot;here&amp;#39;s-how-it-works&quot;&gt;Here&amp;#39;s how it works&lt;/h2&gt;

&lt;p&gt;You start with an active region:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;region&gt;Homer
Marge
Bart
Lisa
Maggie&lt;cursor&gt; &lt;/cursor&gt;
&lt;/region&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After calling &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;latex-wrap-region&lt;/code&gt; and selecting
&lt;em&gt;enumerate&lt;/em&gt; from the list of environments (others being &lt;em&gt;itemize&lt;/em&gt;,
&lt;em&gt;center&lt;/em&gt; etc.), you get this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Homer
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Marge
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Bart
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Lisa
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Maggie&lt;cursor&gt; &lt;/cursor&gt;
&lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s mark everything, &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;latex-wrap-region&lt;/code&gt;, and select
&lt;em&gt;center&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;center&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Homer
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Marge
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Bart
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Lisa
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Maggie
  &lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;&lt;cursor&gt; &lt;/cursor&gt;
&lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;center&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I want to make sure that it&amp;#39;s possible to conveniently
continue by always placing the point on the end of the last line of
the inserted environment.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works-with-no-active-region&quot;&gt;How it works with no active region&lt;/h2&gt;

&lt;p&gt;If &lt;code&gt;(looking-back &amp;quot;^ *&amp;quot;)&lt;/code&gt; is true, the current line is used as if it was
the region.  Otherwise, an empty environment is inserted after the
current line.&lt;/p&gt;

&lt;h2 id=&quot;using-the-code&quot;&gt;Using the code&lt;/h2&gt;

&lt;p&gt;If you like the idea, you can check out the code at
&lt;a href=&quot;https://github.com/abo-abo/latex-wrap&quot;&gt;github&lt;/a&gt; and test it out.  If
you know of another package that already does this, do let me know,
otherwise I&amp;#39;ll post the package on MELPA soon.  And if you have some
ideas, or want to add a few environments that I forgot to mention to
the list, just post
&lt;a href=&quot;https://github.com/abo-abo/latex-wrap/issues&quot;&gt;an issue&lt;/a&gt;, I don&amp;#39;t
bite.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three ansi-term tips</title>
   <link href="http://oremacs.com/2015/01/01/three-ansi-term-tips/"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/01/three-ansi-term-tips</id>
   <content type="html">&lt;h2 id=&quot;tip-#1&quot;&gt;Tip #1&lt;/h2&gt;

&lt;p&gt;There&amp;#39;s no reason not to have &lt;code&gt;/bin/bash&lt;/code&gt; instead of &lt;code&gt;/bin/sh&lt;/code&gt; as the
default choice when you &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;term&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;explicit-shell-file-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;tip-#2&quot;&gt;Tip #2&lt;/h2&gt;

&lt;p&gt;After you close the terminal, you get a useless buffer with no
process. It&amp;#39;s probably left there for you to have a history of what
you did. I find it not useful, so here&amp;#39;s a way to kill that buffer
automatically:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-term-exec-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-process-sentinel&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;finished\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kill-buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;term-exec-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-term-exec-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;tip-#3&quot;&gt;Tip #3&lt;/h2&gt;

&lt;p&gt;By default, &lt;kbd&gt;C-y&lt;/kbd&gt; calls term&amp;#39;s own &lt;code&gt;yank&lt;/code&gt;, which is different
from Emacs&amp;#39;s &lt;code&gt;yank&lt;/code&gt;.  So, until recently, I was using
&lt;kbd&gt;S-&amp;lt;insert&amp;gt;&lt;/kbd&gt; to paste stuff into &lt;code&gt;*term*&lt;/code&gt;. Here&amp;#39;s a
more ergonomic way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term-raw-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;term-paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>The keymap arms race</title>
   <link href="http://oremacs.com/2014/12/31/keymap-arms-race/"/>
   <updated>2014-12-31T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/31/keymap-arms-race</id>
   <content type="html">&lt;p&gt;Sometimes new Emacs packages have to fight for their place in the sun,
as all the good bindings and huge keymap areas are already taken by
the older packages. This post will cover some practical problems that
you may encounter when your package needs to be aware of another
active package.&lt;/p&gt;

&lt;h2 id=&quot;ace-window-vs.-helm&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt; vs. &lt;code&gt;helm&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; is a wonderful package,
it&amp;#39;s my goto-package when I need completion. All of the following
packages use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/function-args&quot;&gt;function-args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/helm-make&quot;&gt;helm-make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/worf&quot;&gt;worf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/helm-j-cheatsheet&quot;&gt;helm-j-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But &lt;code&gt;helm&lt;/code&gt; is super-greedy: once you&amp;#39;re in the &lt;code&gt;helm&lt;/code&gt;-minibuffer,
there&amp;#39;s no way out except either a successful completion or a cancel.
But exiting the minibuffer for a short while may be useful. For
instance, you could copy some text and yank it in the
&lt;code&gt;helm&lt;/code&gt;-minibuffer.  The default minibuffer functions, as well as &lt;code&gt;ido&lt;/code&gt;
easily allow it.&lt;/p&gt;

&lt;p&gt;I started to investigate into this when I got
&lt;a href=&quot;https://github.com/abo-abo/ace-window/issues/15&quot;&gt;issue #15: Does not work with helm in minibuffer&lt;/a&gt;
for &lt;code&gt;ace-window&lt;/code&gt;. I checked it, and indeed you could not &lt;code&gt;ace-window&lt;/code&gt;
out of a &lt;code&gt;helm&lt;/code&gt;-minibuffer. In fact, it was not possible to exit with
&lt;code&gt;other-window&lt;/code&gt; either. This looked like good news, since I had an
inkling that it used to work at some point. So I checked out a
year-old version of &lt;code&gt;helm&lt;/code&gt; and it did work.&lt;/p&gt;

&lt;h3 id=&quot;magit-bisect-to-the-rescue!&quot;&gt;&lt;code&gt;magit-bisect&lt;/code&gt; to the rescue!&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s very simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check out the master of &lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;magit-bisect-start&lt;/code&gt; and mark &lt;code&gt;HEAD&lt;/code&gt; as &lt;em&gt;bad&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magit&lt;/code&gt; will automatically check out a revision that is halfway
between a &lt;em&gt;bad&lt;/em&gt; state and the initial commit. Now I exit Emacs and try
&lt;code&gt;helm&lt;/code&gt; again to see if I can exit from the minibuffer.
It&amp;#39;s kind of lame to have to exit Emacs, but somehow I don&amp;#39;t trust
&lt;code&gt;unload-feature&lt;/code&gt; to do the right thing. Anyway, if the thing works,
move to &lt;code&gt;helm&lt;/code&gt;&amp;#39;s repository and call &lt;code&gt;magit-bisect-good&lt;/code&gt;, otherwise
call &lt;code&gt;magit-bisect-bad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Continue this process until termination. I needed 10 iterations
in this case.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The culprit commit was &lt;a href=&quot;https://github.com/emacs-helm/helm/commit/61e85df&quot;&gt;this one&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;diff-context&quot;&gt;&lt;span class=&quot;region&quot;&gt;     (let* ((source (helm-get-current-source))
            (kmap (and (listp source) ; Check if source is empty.
                       (assoc-default 'keymap source))))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-indicator-removed&quot;&gt;&lt;span class=&quot;region&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-removed&quot;&gt;&lt;span class=&quot;region&quot;&gt;      (when kmap (setq overriding-local-map kmap)))))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-indicator-added&quot;&gt;&lt;span class=&quot;region&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-added&quot;&gt;&lt;span class=&quot;region&quot;&gt;      (when kmap (set-transient-map kmap)))))&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-priority-of-maps&quot;&gt;the priority of maps&lt;/h3&gt;

&lt;p&gt;In Emacs, &lt;code&gt;set-transient-map&lt;/code&gt; has priority over
&lt;code&gt;overriding-local-map&lt;/code&gt;, which was exactly what &lt;code&gt;ace-window&lt;/code&gt; was using.
It&amp;#39;s also funny that &lt;code&gt;ace-window&lt;/code&gt; used to work with &lt;code&gt;helm&lt;/code&gt; for a week,
since it was published on &lt;code&gt;Mar 26&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt; switched to
&lt;code&gt;set-transient-map&lt;/code&gt; on &lt;code&gt;Apr 2&lt;/code&gt;. And I found out that it&amp;#39;s not working only
now.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what &lt;code&gt;helm&lt;/code&gt; is using currently:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fboundp&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-transient-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-transient-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-temporary-overlay-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I&amp;#39;ve amended &lt;code&gt;ace-window&lt;/code&gt; with similar code. The way
&lt;code&gt;set-transient-map&lt;/code&gt; works, the last call to it overrides the previous
one, so I thought that it would work out since &lt;code&gt;ace-window&lt;/code&gt; is always
called after &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It didn&amp;#39;t work out, because &lt;code&gt;helm&lt;/code&gt; adds the code that calls
&lt;code&gt;set-transient-map&lt;/code&gt; to &lt;code&gt;post-command-hook&lt;/code&gt;.
In the end, this finally worked:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remove-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;post-command-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm--maybe-update-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;lispy-vs.-slime-and-cider&quot;&gt;&lt;code&gt;lispy&lt;/code&gt; vs. &lt;code&gt;SLIME&lt;/code&gt; and &lt;code&gt;CIDER&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I thought that enabling &lt;code&gt;lispy-mode&lt;/code&gt; for &lt;code&gt;slime-repl-mode&lt;/code&gt; and
&lt;code&gt;cider-repl-mode&lt;/code&gt; might be a good idea.
Extra navigation options are always good, and the ability to
call &lt;code&gt;raise&lt;/code&gt; is just so useful.&lt;/p&gt;

&lt;p&gt;For instance, you start with:&lt;/p&gt;

&lt;pre&gt;
; SLIME 2014-11-28
&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;/span&gt;&lt;span class=&quot;slime-repl-old&quot;&gt;(expt (expt 2 10) 3)&lt;/span&gt;
&lt;span class=&quot;slime-repl-result&quot;&gt;&lt;span class=&quot;slime-repl-inputed-output&quot;&gt;1073741824&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;slime-repl-result&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;cursor&gt; &lt;/cursor&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;lispy-mode&lt;/code&gt; on you can: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt; to get the previous input&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; to move the cursor after &lt;code&gt;(expt 2 10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt; to raise &lt;code&gt;(expt 2 10)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;#39;s the final state:&lt;/p&gt;

&lt;pre&gt;
; SLIME 2014-11-28
&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;/span&gt;&lt;span class=&quot;slime-repl-old&quot;&gt;(expt (expt 2 10) 3)&lt;/span&gt;
&lt;span class=&quot;slime-repl-result&quot;&gt;&lt;span class=&quot;slime-repl-inputed-output&quot;&gt;1073741824&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;slime-repl-result&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; (expt 2 10)&lt;cursor&gt; &lt;/cursor&gt;&lt;/pre&gt;

&lt;p&gt;But the problem was that SLIME has &lt;code&gt;slime-repl-map-mode&lt;/code&gt; minor mode on
that competes for &lt;code&gt;lispy&lt;/code&gt;&amp;#39;s shortcuts, and CIDER has something similar
as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When two minor modes bind the same keys, which one wins?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is the first one on &lt;code&gt;minor-mode-map-alist&lt;/code&gt;.
This function I&amp;#39;ve found on the &lt;a href=&quot;http://www.emacswiki.org/emacs/minor-mode-hack.el&quot;&gt;wiki&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-raise-minor-mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Make MODE the first on `minor-mode-map-alist&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I didn&amp;#39;t want &lt;code&gt;lispy-mode&lt;/code&gt; to mess with &lt;code&gt;minor-mode-map-alist&lt;/code&gt; too
actively, so I went with this approach: if &lt;code&gt;lispy-mode&lt;/code&gt; is called
interactively, i.e. via a key binding or &lt;kbd&gt;M-x&lt;/kbd&gt;, put it ahead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;called-interactively-p&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-raise-minor-mode&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-known-verbs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s still a work in progress, currently only &lt;code&gt;lispy&lt;/code&gt;&amp;#39;s &lt;kbd&gt;RET&lt;/kbd&gt;
properly yields to call &lt;code&gt;cider-repl-return&lt;/code&gt; and &lt;code&gt;slime-repl-return&lt;/code&gt;
respectively. I&amp;#39;ll see if there are more key bindings that need to
yield. Happy coding in the New Year!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Emacs Web Wowser (EWW) got ace-link</title>
   <link href="http://oremacs.com/2014/12/30/ace-link-eww/"/>
   <updated>2014-12-30T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/30/ace-link-eww</id>
   <content type="html">&lt;h2 id=&quot;emacs-goodness-incoming&quot;&gt;Emacs goodness incoming&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve discovered a nice Emacs-related blog -
&lt;a href=&quot;http://mbork.pl/Content_AND_Presentation&quot;&gt;Content AND Presentation&lt;/a&gt;.
Unlike &lt;a href=&quot;http://axisofeval.blogspot.nl&quot;&gt;The Axis of Eval&lt;/a&gt;, the blog
that I mentioned yesterday, this one is pretty self-contained, i.e. it
doesn&amp;#39;t link to many external information sources.  So I thought that
it&amp;#39;s perfect for trying EWW to read it.&lt;/p&gt;

&lt;h2 id=&quot;not-so-fast!-configure-first.&quot;&gt;Not so fast! Configure first.&lt;/h2&gt;

&lt;p&gt;For modes that don&amp;#39;t require to self-insert (and even for some that
do), I like to navigate with
&lt;kbd&gt;h&lt;/kbd&gt;/&lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt;/&lt;kbd&gt;l&lt;/kbd&gt; as arrows.  These
arrows are on the home row, so navigation becomes a pleasant and
relaxed experience.  But for EWW I decided to add a little twist: if
the point is in the first column, &lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt; will move
down/up not by one line, but by one paragraph.  This is great for
concentration: I navigate to a paragraph, read it, navigate to the
next one. The point shows me the paragraph that I&amp;#39;m reading,
everything before the point I&amp;#39;ve already read.  So every time I press
&lt;kbd&gt;j&lt;/kbd&gt;, I get a tiny warm feeling of accomplishment.
I can also pair this with &lt;kbd&gt;v&lt;/kbd&gt;, which I bind to recenter the
current line to the top.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s what my key setup currently looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-eww-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oww-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oww-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-back-url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;recenter-top-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-view-source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-follow-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;move-beginning-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;move-end-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-eww-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, I was careful to re-assign &lt;code&gt;eww-back-url&lt;/code&gt; and
&lt;code&gt;eww-view-source&lt;/code&gt; - the commands that I&amp;#39;ve displaced from &lt;kbd&gt;l&lt;/kbd&gt;
and &lt;kbd&gt;v&lt;/kbd&gt;.  And here&amp;#39;s the implementation of the arrows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oww-down&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-paragraph&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line-move&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oww-up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-paragraph&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;cherry-on-the-top&quot;&gt;Cherry on the top&lt;/h2&gt;

&lt;p&gt;And while I was at it, I&amp;#39;ve added &lt;a href=&quot;https://github.com/abo-abo/ace-link&quot;&gt;ace-link&lt;/a&gt; support for EWW.  It was
pretty easy, basically the same routine as for &lt;code&gt;help-mode&lt;/code&gt; and
&lt;code&gt;info-mode&lt;/code&gt;. The only hard part was to figure out what part of the
code keeps binding &lt;code&gt;shr-save-contents&lt;/code&gt; to &lt;kbd&gt;o&lt;/kbd&gt;, my preferred
binding for &lt;code&gt;ace-link&lt;/code&gt;. Turns out it was &lt;code&gt;eww-link-keymap&lt;/code&gt;, and not
&lt;code&gt;shr-map&lt;/code&gt;. So here&amp;#39;s the new key binding code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Setup the defualt shortcuts.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;help-mode&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;help-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;eww&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-link-keymap&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you haven&amp;#39;t tried &lt;a href=&quot;https://github.com/abo-abo/ace-link&quot;&gt;ace-link&lt;/a&gt;
before, you can get it from MELPA.  The minimal configuration that you
need is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s the setup that I&amp;#39;m actually using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-link&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:load-path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/ace-link&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m using it from my git folder since when I want to edit a project, I
like to use &lt;a href=&quot;https://github.com/nonsequitur/smex&quot;&gt;smex&lt;/a&gt;&amp;#39;s
jump-to-definition.&lt;/p&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;use-package&lt;/a&gt; is useful
for the cases when my &lt;code&gt;~/git/&lt;/code&gt; happens not to contain &lt;code&gt;ace-link&lt;/code&gt;.  In
that case, instead of getting a debugger error on starting Emacs, I
get only a polite &amp;quot;Could not load package ace-link&amp;quot; in my &lt;code&gt;*Messages*&lt;/code&gt;
buffer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Monkeying around with JavaScript</title>
   <link href="http://oremacs.com/2014/12/29/monkeying-around-with-javascript/"/>
   <updated>2014-12-29T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/29/monkeying-around-with-javascript</id>
   <content type="html">&lt;h2 id=&quot;exciting-encounter&quot;&gt;Exciting encounter&lt;/h2&gt;

&lt;p&gt;Recently, I happened upon a wonderful blog called
&lt;a href=&quot;http://axisofeval.blogspot.nl&quot;&gt;The Axis of Eval&lt;/a&gt;.  I knew that I&amp;#39;d
love it just when I read the name. &lt;a href=&quot;/&quot;&gt;(or emacs&lt;/a&gt; pales in comparison,
but I couldn&amp;#39;t just sit on my hands for months or years while thinking
up a perfect blog name. If you think of a blog name as awesome as &amp;quot;The
Axis of Eval&amp;quot; and are willing to let me use it, I&amp;#39;ll probably make the
switch.&lt;/p&gt;

&lt;p&gt;The blog did not disappoint, featuring gems like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the Lisp world, new languages are built by combining large,
battle-tested building blocks, and polishing or updating them when
needed, instead of starting over from toothpicks and double-sided
duct tape. A large Lisp like Common Lisp is like a toolchain of
decades-old tools that have proven their worth, and have been
codified in standards, folklore, and implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing in the way of extracting information and enjoyment from
this blog was the horrendous theme of black background, white
foreground and magenta links. Plus the RSS was kind of quirky, and I
couldn&amp;#39;t just feed all of it into
&lt;a href=&quot;https://github.com/skeeto/elfeed&quot;&gt;Elfeed&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;greasemonkey-to-the-rescue!&quot;&gt;Greasemonkey to the rescue!&lt;/h2&gt;

&lt;p&gt;In the previous post I&amp;#39;ve mentioned that, in addition to using
&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;the best editor&lt;/a&gt;, I&amp;#39;m using
&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;the best browser&lt;/a&gt;.  Well,
this particular best browser has an extension called
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/&quot;&gt;Greasemonkey&lt;/a&gt;
that allows you to automatically run your own JavaScript on certain
websites.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not very proficient in JavaScript, the following code I just found
by searching around. The part to note is the &lt;code&gt;@include&lt;/code&gt; - the pattern
of website names for which this script should be run automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @name        background&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @namespace   abo-abo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @include     http://axisofeval.blogspot.nl/*&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @version     1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @grant       none&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&amp;quot;background-color: #ffffff; color:#000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can barely stand to look at it. How could you take Scheme and turn
it into this monstrosity? Such a shame. But it works, so I guess
everyone should learn JavaScript. All hail the mighty
&lt;s&gt;HypnoToad&lt;/s&gt; JavaScript!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Throwing abbrevs into the mix</title>
   <link href="http://oremacs.com/2014/12/28/trying-abbrevs/"/>
   <updated>2014-12-28T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/28/trying-abbrevs</id>
   <content type="html">&lt;p&gt;Currently, I&amp;#39;m using two methods for completing Elisp: &lt;code&gt;company-mode&lt;/code&gt;
and &lt;code&gt;helm-lisp-completion-at-point&lt;/code&gt;. The latter is the cannon, the big
gun: it always gets the job done, but I don&amp;#39;t want to shoot at
sparrows with it. So I only bring it out for hairy cases, like for
stuff that starts with &lt;code&gt;LaTeX-&lt;/code&gt;. Hence, the &lt;code&gt;company-mode&lt;/code&gt;.  But too
often have I typed &lt;code&gt;region-&lt;/code&gt; only to find 7 candidates staring at me,
4 of them useless. Which prompted me to look for an additional
completion method.&lt;/p&gt;

&lt;h2 id=&quot;enter-abbrevs&quot;&gt;Enter abbrevs&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html&quot;&gt;manual&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A defined &amp;quot;abbrev&amp;quot; is a word which &amp;quot;expands&amp;quot;, if you insert it, into
some different text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs can have &amp;quot;mode-specific&amp;quot; definitions, active only in one
major mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like something that could solve my problem with &lt;code&gt;region-&lt;/code&gt; commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rb -&amp;gt; region-beginning
re -&amp;gt; region-end
ra -&amp;gt; region-active-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, obviously,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add it to the mix:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-emacs-lisp-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outline-regexp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; ———&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-local-variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;company-backends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-elisp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-dabbrev-code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yas-minor-mode-on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;auto-compile-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;some-data-acquisition&quot;&gt;Some data acquisition&lt;/h2&gt;

&lt;p&gt;I had the whole abbrev thing in the back of my mind until I saw a link
to the post
&lt;a href=&quot;https://groups.google.com/forum/#!topic/gnu.emacs.help/kHvUcFdiXFM&quot;&gt;Abbrevs for the most frequent elisp symbols&lt;/a&gt;.
That&amp;#39;s when I decided to act.
That post eventually links to a pastebin, where 1600 abbrevs are defined.
With my handy &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/its-all-text/&quot;&gt;best extension&lt;/a&gt;
for &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;best browser&lt;/a&gt; I&amp;#39;ve opened
the paste in &lt;s&gt;Emacs&lt;/s&gt; &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;best editor&lt;/a&gt; by just clicking the &lt;strong&gt;edit&lt;/strong&gt; button
in the &lt;em&gt;RAW Paste Data&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;I had to &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, since the file opened in
&lt;code&gt;text-mode&lt;/code&gt;. And boy, it&amp;#39;s big. In &lt;code&gt;lispy-mode&lt;/code&gt;, I usually use
&lt;kbd&gt;99j&lt;/kbd&gt; to navigate 99 sexps down and therefore to the end of
the list. Well, for this file even &lt;kbd&gt;999j&lt;/kbd&gt; wasn&amp;#39;t enough.
I quickly tired of deleting one-by-one the each individual useless abbrev.
I mean:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ek -&amp;gt; echo-keystrokes,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when is that ever going to be useful? So I wrote this throw-away code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foobar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mark-list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--string-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count-matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-out-backward&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-delete&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After switching to a two-pane window layout, with point in the
pastebin buffer, calling &lt;code&gt;foobar&lt;/code&gt; would count the amount of the abbrev
matches in
&lt;a href=&quot;https://github.com/abo-abo/lispy/commits/master&quot;&gt;my most frequent elisp buffer&lt;/a&gt;.
If it was less than 5, the abbrev was auto-deleted, otherwise the
decision was up to me, as holding &lt;kbd&gt;C-.&lt;/kbd&gt; would no longer
delete. In the end, there were only 56 abbrevs left out of 1600.&lt;/p&gt;

&lt;h2 id=&quot;the-final-result&quot;&gt;The final result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what I have put into my &lt;code&gt;abbrev_defs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-abbrev-table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode-abbrev-table&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;major-mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char-after&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-match-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point-min&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ir&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;indent-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ci&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;call-interactively&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;symbol-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;se&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-excursion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ff&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;find-file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-sexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;prefix-arg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;re&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;this-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;default-directory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;snp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bsnp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lep&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line-end-position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;condition-case&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;up-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bfn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-file-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-back&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tap&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;thing-at-point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;declare-function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ntr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;narrow-to-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wcb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with-current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ie&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ignore-errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jos&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;just-one-space&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;la&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;other-window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dk&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;define-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;deactivate-mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bod&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beginning-of-defun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sic&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self-insert-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eol&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;end-of-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nai&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;newline-and-indent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add-to-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rris&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-regexp-in-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Mmm... minty</title>
   <link href="http://oremacs.com/2014/12/27/mmm-minty/"/>
   <updated>2014-12-27T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/27/mmm-minty</id>
   <content type="html">&lt;h2 id=&quot;the-backstory&quot;&gt;The backstory&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2014/12/24/light-it-up/&quot;&gt;one of the earlier posts&lt;/a&gt;,
I was discussing the implementation of an Emacs Lisp lexer for
&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;. Here, I&amp;#39;ll show how to install the
update and get nicely highlighted code in a pdf via the
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; LaTeX package.&lt;/p&gt;

&lt;h2 id=&quot;the-install&quot;&gt;The install&lt;/h2&gt;

&lt;p&gt;Assuming that you are on a Debian-related system:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install mercurial
mkdir ~/git &amp;amp;&amp;amp; cd ~/git
hg clone https://bitbucket.org/abo-abo/pygments-main
cd pygments-main
make mapfiles
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, of course, I&amp;#39;m assuming that you already have TeX Live installed.
I&amp;#39;m not too sophisticated about it, so I just install everything:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install texlive-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;So here I took some code from
&lt;a href=&quot;/2014/12/25/ode-to-toggle/&quot;&gt;a previous post&lt;/a&gt; and
copy-pasted it into &lt;a href=&quot;/download/minty.org&quot;&gt;minty.org&lt;/a&gt; file.
And here&amp;#39;s the result of the PDF export (&lt;kbd&gt;C-c C-e lo&lt;/kbd&gt;):
&lt;a href=&quot;/download/minty.pdf&quot;&gt;minty.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-red-tape&quot;&gt;The red tape&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; had trouble exporting on my laptop until I did this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /usr/bin/
sudo ln -s /usr/local/texlive/2013/bin/x86_64-linux/pdflatex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also be mindful of the &lt;code&gt;-shell-escape&lt;/code&gt; flag to &lt;code&gt;pdflatex&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-latex-pdf-process&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>tiny.el - the little package that could</title>
   <link href="http://oremacs.com/2014/12/26/the-little-package-that-could/"/>
   <updated>2014-12-26T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/26/the-little-package-that-could</id>
   <content type="html">&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;It all started with a heated discussion with the author of
&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;yasnippet&lt;/a&gt; over some minor
nonsense. In the end, we agreed to disagree, but not before he suggested:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So I hereby challenge you to create this stripped down, no-crap,
version of yasnippet. Dub it &amp;quot; tiny is not yasnippet &amp;quot; after your
grandiose views and in the glorious unix tradition of recursive
acronyms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-thought-process&quot;&gt;The Thought Process&lt;/h2&gt;

&lt;p&gt;Well, doing exactly that would probably be lame, but I really loved
the acronym. Somewhere around that time I saw some post about using
eval-and-replace, i.e. inserting some Elisp in your non-Elisp buffer
and then replacing that code in-place with the result of the eval.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the type of code that I was playing around with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I realized that the code should probably produce a string.
Here&amp;#39;s a more refined version:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Loops are a useful thing to have, they are a blind spot of
&lt;code&gt;yasnippet&lt;/code&gt;, and looping is exactly what the code above does.  The
parameters for this loop expansion are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integer range start: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;integer range end: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;separator to join the expressions: &lt;code&gt;&amp;quot;;\n&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elisp expression to transform the linear range: &lt;code&gt;(* x x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; expression for the result: &lt;code&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So ideally, in order to have a package called &lt;code&gt;tiny&lt;/code&gt;, I&amp;#39;d like to
keep only the parameters and throw away everything else.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s the final result of the shortening, and what &lt;code&gt;tiny-expand&lt;/code&gt; would produce:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#demo-1&quot;&gt;&lt;code&gt;m1;\n7*xx|hex: 0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-1&quot; class=&quot;collapse&quot;&gt;
&lt;pre&gt;&lt;code&gt;
hex: 0x1;
hex: 0x4;
hex: 0x9;
hex: 0x10;
hex: 0x19;
hex: 0x24;
hex: 0x31
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;As you see, it&amp;#39;s pretty compact, with only two characters which are not
actually the parameters of the template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; signifies the start of the template. I think this way is much
better than something like having to mark the template body with a
region before expanding. &lt;code&gt;tiny-expand&lt;/code&gt; should be called from the end
of the snippet, so there&amp;#39;s no need to mark the end position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; signifies the end of the Elisp expression and the start of the format string.
It can be omitted if your format string starts with a &lt;code&gt;%&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note also the use of shortened Elisp. You can still use the full thing
if you want.  Or just use only the closing parens to resolve the
ambiguities.&lt;/p&gt;

&lt;h2 id=&quot;the-demos&quot;&gt;The Demos&lt;/h2&gt;

&lt;p&gt;Here are some more snippets, you can click on them to see what they
expand to. You can also find them and more in the comments section of
the source code:
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-2&quot;&gt; &lt;code&gt;m10&lt;/code&gt;
&lt;/button&gt; &lt;div id=&quot;demo-2&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 1 2 3 4 5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-3&quot;&gt;&lt;code&gt;m5 10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-3&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-4&quot;&gt;&lt;code&gt;m5,10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-4&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5,6,7,8,9,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-5&quot;&gt;&lt;code&gt;m5 10*xx&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-5&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;25 36 49 64 81 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-6&quot;&gt;&lt;code&gt;m5 10*xx%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-6&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;19 24 31 40 51 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-7&quot;&gt;&lt;code&gt;m5 10*xx|0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-7&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x19 0x24 0x31 0x40 0x51 0x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-8&quot;&gt;
&lt;code&gt;m25+x?a%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-8&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-9&quot;&gt;
&lt;code&gt;m25+x?A%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-9&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-10&quot;&gt;
&lt;code&gt;m97,122(string x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-10&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-11&quot;&gt;
&lt;code&gt;m97,122stringxx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-11&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp,qq,rr,ss,tt,uu,vv,ww,xx,yy,zz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-12&quot;&gt;
&lt;code&gt;m97,120stringxupcasex&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-12&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aA,bB,cC,dD,eE,fF,gG,hH,iI,jJ,kK,lL,mM,nN,oO,pP,qQ,rR,sS,tT,uU,vV,wW,xX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-13&quot;&gt;
&lt;code&gt;m97,120stringxupcasex)x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-13&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aAa,bBb,cCc,dDd,eEe,fFf,gGg,hHh,iIi,jJj,kKk,lLl,mMm,nNn,oOo,pPp,qQq,rRr,sSs,tTt,uUu,vVv,wWw,xXx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-14&quot;&gt;
&lt;code&gt;m\n10|%(+ x x) and %(* x x) and %s&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-14&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 and 0 and 0
2 and 1 and 1
4 and 4 and 2
6 and 9 and 3
8 and 16 and 4
10 and 25 and 5
12 and 36 and 6
14 and 49 and 7
16 and 64 and 8
18 and 81 and 9
20 and 100 and 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-15&quot;&gt;
&lt;code&gt;m10*2+3x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-15&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;6 8 10 12 14 16 18 20 22 24 26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-16&quot;&gt;
&lt;code&gt;m\n10expx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-16&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1.0
2.718281828459045
7.38905609893065
20.085536923187668
54.598150033144236
148.4131591025766
403.4287934927351
1096.6331584284585
2980.9579870417283
8103.083927575384
22026.465794806718
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-17&quot;&gt;
&lt;code&gt;m1\n20expx%014.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-17&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;00000000002.72
00000000007.39
00000000020.09
00000000054.60
00000000148.41
00000000403.43
00000001096.63
00000002980.96
00000008103.08
00000022026.47
00000059874.14
00000162754.79
00000442413.39
00001202604.28
00003269017.37
00008886110.52
00024154952.75
00065659969.14
00178482300.96
00485165195.41
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-18&quot;&gt;
&lt;code&gt;m7|%(expt 2 x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-18&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 2 4 8 16 32 64 128
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-19&quot;&gt;
&lt;code&gt;m, 7|0x%02x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-19&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-20&quot;&gt;
&lt;code&gt;m10|%0.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-20&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0.00 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00 10.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-21&quot;&gt;
&lt;code&gt;m1\n14|* TODO http://emacsrocks.com/e%02d.html&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-21&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO http://emacsrocks.com/e01.html
* TODO http://emacsrocks.com/e02.html
* TODO http://emacsrocks.com/e03.html
* TODO http://emacsrocks.com/e04.html
* TODO http://emacsrocks.com/e05.html
* TODO http://emacsrocks.com/e06.html
* TODO http://emacsrocks.com/e07.html
* TODO http://emacsrocks.com/e08.html
* TODO http://emacsrocks.com/e09.html
* TODO http://emacsrocks.com/e10.html
* TODO http://emacsrocks.com/e11.html
* TODO http://emacsrocks.com/e12.html
* TODO http://emacsrocks.com/e13.html
* TODO http://emacsrocks.com/e14.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-22&quot;&gt;
&lt;code&gt;m\n8|* TODO Wash dog %(+ x 2) \nDEADLINE: &amp;lt;%(date &amp;quot;Jan 1&amp;quot; (* x 5))&amp;gt;&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-22&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO Wash dog 2
DEADLINE: &amp;lt;2015-01-01 Thu&amp;gt;
* TODO Wash dog 3
DEADLINE: &amp;lt;2015-01-06 Tue&amp;gt;
* TODO Wash dog 4
DEADLINE: &amp;lt;2015-01-11 Sun&amp;gt;
* TODO Wash dog 5
DEADLINE: &amp;lt;2015-01-16 Fri&amp;gt;
* TODO Wash dog 6
DEADLINE: &amp;lt;2015-01-21 Wed&amp;gt;
* TODO Wash dog 7
DEADLINE: &amp;lt;2015-01-26 Mon&amp;gt;
* TODO Wash dog 8
DEADLINE: &amp;lt;2015-01-31 Sat&amp;gt;
* TODO Wash dog 9
DEADLINE: &amp;lt;2015-02-05 Thu&amp;gt;
* TODO Wash dog 10
DEADLINE: &amp;lt;2015-02-10 Tue&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You can expand them one-by-one to see what they do.  As you can see,
Ruby-style interpolation is available in the format string.  There&amp;#39;s
also one special function called &lt;code&gt;date&lt;/code&gt; that you can use there.  It
takes the start date as a string (&lt;code&gt;&amp;quot;Jan 1&amp;quot;&lt;/code&gt; in the example) and an
integer shift and prints an &lt;code&gt;org&lt;/code&gt;-style date.&lt;/p&gt;

&lt;h2 id=&quot;the-full-syntax&quot;&gt;The full syntax&lt;/h2&gt;

&lt;p&gt;The full syntax for the snippet is:&lt;/p&gt;

&lt;pre style=&quot;font-size: 0.6em&quot;&gt;&lt;code&gt;m{range start:=0}{separator:= }{range end}{Lisp expr:=indentity}|{format expr:=%d}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You always start with &lt;code&gt;m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;range start&lt;/code&gt; that defaults to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;separator&lt;/code&gt; that defaults to a single space.&lt;/li&gt;
&lt;li&gt;Then mandatory &lt;code&gt;range end&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;Lisp expr&lt;/code&gt;, that defaults to &lt;code&gt;identity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;format&lt;/code&gt;-style string, that defaults to &lt;code&gt;%d&lt;/code&gt;. You have
to separate it with &lt;code&gt;|&lt;/code&gt; if the format string does not start with
&lt;code&gt;%&lt;/code&gt;. You can also Ruby-style interpolation here, e.g. &lt;code&gt;%(* x x)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;With the point at the end of the snippet, &lt;kbd&gt;M-x&lt;/kbd&gt;&lt;code&gt;tiny-expand&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-summary&quot;&gt;The Summary&lt;/h2&gt;

&lt;p&gt;In the end, &lt;a href=&quot;https://github.com/abo-abo/tiny&quot;&gt;tiny&lt;/a&gt; lives up to the name,
implementing only one snippet that can be used in a variety of ways.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tiny is not yasnippet&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ode to the toggle</title>
   <link href="http://oremacs.com/2014/12/25/ode-to-toggle/"/>
   <updated>2014-12-25T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/25/ode-to-toggle</id>
   <content type="html">&lt;p&gt;Man, I just love toggles: the light switches, the
&lt;kbd&gt;f&lt;/kbd&gt; - full-screen key in &lt;code&gt;vlc&lt;/code&gt;, and the clicky pens (ooh, those
are the best). So I try to model some of my Emacs key bindings as
toggles.&lt;/p&gt;

&lt;p&gt;Let me just quantify the two features that make a good toggle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only two states: &lt;em&gt;on&lt;/em&gt; and &lt;em&gt;off&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the state is visible at a glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One could argue that with &lt;code&gt;undo&lt;/code&gt; most editing commands become toggles.
But they&amp;#39;re not, since each time you call &lt;code&gt;undo&lt;/code&gt;, you mess with
Emacs&amp;#39;s undo state. And the undo state isn&amp;#39;t visible at a glance, so
both requirements for a good toggle aren&amp;#39;t fulfilled.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll demonstrate the two editing commands that I use every day,
&lt;code&gt;capitalize-word-toggle&lt;/code&gt; and &lt;code&gt;upcase-word-toggle&lt;/code&gt;, that are good
toggles.&lt;/p&gt;

&lt;h2 id=&quot;capitalize-word-toggle&quot;&gt;&lt;code&gt;capitalize-word-toggle&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;capitalize-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I may not have mentioned this before, but you should for the most part
ignore the key bindings mentioned on this blog. I&amp;#39;m actually using
them, they work for me because of my non-standard layout, but you
should assign what works for you.&lt;/p&gt;

&lt;p&gt;Anyway, &lt;code&gt;capitalize-word-toggle&lt;/code&gt; clearly has a state that&amp;#39;s visible at
a glance: the first char of the current symbol. Also, there are only
two possible states: the char can either be upper-case or lower-case.
Hence, I can toggle this state with &lt;kbd&gt;C-z&lt;/kbd&gt; for fun and profit.&lt;/p&gt;

&lt;p&gt;Maybe some background on how this command is useful for me. I write a bunch of C++,
and the code features a lot of lines like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Triangulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triangulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// duh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So when I&amp;#39;m using &lt;code&gt;auto-complete&lt;/code&gt;, it often eagerly expands to
&lt;code&gt;Triangulation&lt;/code&gt; when I want &lt;code&gt;triangulation&lt;/code&gt;, and the other way around.
So &lt;code&gt;capitalize-word-toggle&lt;/code&gt; is super-useful there.&lt;/p&gt;

&lt;h2 id=&quot;upcase-word-toggle&quot;&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[A-Za-z]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
                      &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&amp;#39;s state becomes binary after you call it once,
since initially the thing at point could have mixed case.
But afterwards, it&amp;#39;s either all lowercase or all uppercase.
So again, a clearly visible binary state is a good thing.&lt;/p&gt;

&lt;p&gt;This command works either on &lt;code&gt;(bounds-of-thing-at-point &amp;#39;symbol)&lt;/code&gt; or
on the active region. Since &lt;code&gt;region-active-p&lt;/code&gt; is deactivated after you
call the command once, there&amp;#39;s some machinery to remember the state
and to toggle when called again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Light it up! Pygments for Emacs Lisp.</title>
   <link href="http://oremacs.com/2014/12/24/light-it-up/"/>
   <updated>2014-12-24T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/24/light-it-up</id>
   <content type="html">&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;More than 2 years ago, the formidable @bbatsov of &lt;a href=&quot;http://emacsredux.com&quot;&gt;Emacs Redux&lt;/a&gt; had this to say:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;After so many years pygments (a popular syntax highlighting library used by GitHub &amp;amp; others) still lacks proper support for Emacs Lisp &lt;a href=&quot;https://twitter.com/hashtag/fail?src=hash&quot;&gt;#fail&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bozhidar Batsov (@bbatsov) &lt;a href=&quot;https://twitter.com/bbatsov/status/246929917546221568&quot;&gt;September 15, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Well, let&amp;#39;s turn that #fail-frown upside down!&lt;/p&gt;

&lt;h2 id=&quot;the-python&quot;&gt;The Python&lt;/h2&gt;

&lt;p&gt;A quick search brought me to this page:
&lt;a href=&quot;http://pygments.org/docs/lexerdevelopment/&quot;&gt;Write your own lexer -- Pygments&lt;/a&gt;.
Turns out that the Pygments development takes place on
&lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main&quot;&gt;Bitbucket&lt;/a&gt;, so I had
to start an account there. I shortly cloned the repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;hg clone https://abo-abo@bitbucket.org/birkenfeld/pygments-main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I quickly copy-pasted some starting code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;SchemeLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;CommonLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;HyLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;RacketLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;NewLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;EmacsLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmacsLispLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegexLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    An ELisp lexer, parsing a stream and outputting the tokens&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    needed to highlight elisp code.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ELisp&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emacs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*.el&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mimetypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text/x-elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MULTILINE&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# the rest of the code was copied from CommonLispLexer for now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, infrastructure-wise, I only need to know two commands.
The first one needs to be run just once, so that Pygments is aware of the new lexer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/git/pygments-main &amp;amp;&amp;amp; make mapfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second command is to (re-)generate &lt;code&gt;/tmp/example.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cp ~/git/emacs/lisp/vc/ediff.el \
  ~/git/pygments-main/tests/examplefiles/
$ ./pygmentize -O full -f html -o /tmp/example.html \
  tests/examplefiles/ediff.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would repeat the last line with each update to the code, and then
refresh the page in Firefox to see the result.&lt;/p&gt;

&lt;h2 id=&quot;the-elisp&quot;&gt;The Elisp&lt;/h2&gt;

&lt;p&gt;To finalize the lexer, the following tasks ensued:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get a list of built-in macros&lt;/li&gt;
&lt;li&gt;get a list of special forms&lt;/li&gt;
&lt;li&gt;get a list of built-in functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the process, I&amp;#39;ve added two more lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions that are highlighted with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;defvaralias&amp;#39;, &amp;#39;provide&amp;#39;, &amp;#39;require&amp;#39;,
&amp;#39;with-no-warnings&amp;#39;, &amp;#39;define-widget&amp;#39;, &amp;#39;with-electric-help&amp;#39;,
&amp;#39;throw&amp;#39;, &amp;#39;defalias&amp;#39;, &amp;#39;featurep&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions and macros that are highlighted with &lt;code&gt;font-lock-warning-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;cl-assert&amp;#39;, &amp;#39;cl-check-type&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;signal&amp;#39;,
&amp;#39;user-error&amp;#39;, &amp;#39;warn&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To generate the other three lists, I started off writing things in
&lt;code&gt;*scratch*&lt;/code&gt;, but after a while my compulsion to &lt;kbd&gt;C-x C-s&lt;/kbd&gt;
kicked in and I&amp;#39;ve saved the work to &lt;code&gt;research.el&lt;/code&gt;.  At least,
&lt;a href=&quot;http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/&quot;&gt;thanks to @bbatsov&lt;/a&gt;,
I&amp;#39;m not &lt;kbd&gt;C-x C-s&lt;/kbd&gt;-ing that much since I&amp;#39;ve added this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-and-switch-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bound-and-true-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;archive-subfile-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;save-and-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it&amp;#39;s time for the student to one-up the master, so here&amp;#39;s a tip to
improve even further:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-buffer-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-next-match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way I can cycle the buffers with the same shortcut that invokes
&lt;code&gt;save-and-switch-buffer&lt;/code&gt;. The defaults are &lt;kbd&gt;C-s&lt;/kbd&gt; and
&lt;kbd&gt;C-r&lt;/kbd&gt;, in case you didn&amp;#39;t know.&lt;/p&gt;

&lt;h2 id=&quot;the-c&quot;&gt;The C&lt;/h2&gt;

&lt;p&gt;Getting the list of built-in C functions and special forms, obviously
involved browsing the C source code. In case you don&amp;#39;t (yet) have the Emacs sources,
they&amp;#39;re here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git://git.savannah.gnu.org/emacs.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I switched to the &lt;code&gt;./src&lt;/code&gt; directory and called &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;find-name-dired&lt;/code&gt; with
&lt;code&gt;*.c&lt;/code&gt; to build a list of all the sources.
Then I ran the following code from &lt;code&gt;research.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c-research&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;incf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file-noselect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^DEFUN (&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-substring-no-properties&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UNEVALLED&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was beautiful, by the way, to just generate this sort of
documentation from such well-formatted and documented C sources.  Free
Software FTW.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested, there are 1294 built-in functions.
Here&amp;#39;s a list of 23 special forms that I found:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-current-buffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-restriction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq-default&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unwind-protect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can read up on the special forms in the
&lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3&quot;&gt;SICP&lt;/a&gt;.
There&amp;#39;s no node for them, so just use isearch.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;You can see it here: &lt;a href=&quot;/download/ediff.html&quot;&gt;ediff.html&lt;/a&gt;, as well as on
the rest of the site, since I&amp;#39;ve switched it on everywhere.&lt;/p&gt;

&lt;h2 id=&quot;the-impact&quot;&gt;The Impact&lt;/h2&gt;

&lt;p&gt;Unfortunately this won&amp;#39;t have impact on the Github source code
highlighter, since
&lt;a href=&quot;http://www.greghendershott.com/2014/11/github-dropped-pygments.html&quot;&gt;Github dropped Pygments&lt;/a&gt;
recently.&lt;/p&gt;

&lt;p&gt;But people that use the static blog generator
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; or the LaTeX package
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; (that&amp;#39;s the package that
&lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s PDF Export uses by default) will be able to get better
Elisp highlighting. In fact, this blog is already using the new highlighter.&lt;/p&gt;

&lt;p&gt;See the rest of projects that use Pygments
&lt;a href=&quot;http://pygments.org/faq/#who-uses-pygments&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-bitbucket&quot;&gt;The Bitbucket&lt;/h2&gt;

&lt;p&gt;So now, to share the new lexer with the world I just have to learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stage and commit in Mercurial&lt;/li&gt;
&lt;li&gt;push Mercurial to Bitbucket&lt;/li&gt;
&lt;li&gt;open a pull request on Bitbucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;#39;t &lt;em&gt;want&lt;/em&gt; to become a &lt;a href=&quot;http://xkcd.com/1220/&quot;&gt;hipster&lt;/a&gt;, these things just happen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>upcase-word, you so silly</title>
   <link href="http://oremacs.com/2014/12/23/upcase-word-you-silly/"/>
   <updated>2014-12-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/23/upcase-word-you-silly</id>
   <content type="html">&lt;p&gt;Do you know what the
&lt;a href=&quot;http://ergoemacs.org/emacs/command-frequency.html&quot;&gt;most frequently used&lt;/a&gt;
Emacs commands are? I can confirm by my own experience that they are
&lt;code&gt;next-line&lt;/code&gt; and &lt;code&gt;previous-line&lt;/code&gt; (in that order).
So why do &lt;kbd&gt;M-u&lt;/kbd&gt; - &lt;code&gt;upcase-word&lt;/code&gt;, &lt;kbd&gt;M-l&lt;/kbd&gt; - &lt;code&gt;downcase-word&lt;/code&gt;, and
&lt;kbd&gt;M-c&lt;/kbd&gt; - &lt;code&gt;capitalize-word&lt;/code&gt; have such terrible synergy with Emacs&amp;#39;s best commands?&lt;/p&gt;

&lt;p&gt;No, &lt;code&gt;upcase-word&lt;/code&gt;, this is not what I had in mind:&lt;/p&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic key&lt;cursor&gt;s&lt;/cursor&gt;troke commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;td&gt;
&lt;kbd&gt;M-u&lt;/kbd&gt;
&lt;/td&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic keySTROKE&lt;cursor&gt; &lt;/cursor&gt;commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;If you say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But how did you get the cursor in such a crazy position in the first
place? You should have used &lt;kbd&gt;M-b&lt;/kbd&gt;/&lt;kbd&gt;M-f&lt;/kbd&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I got there with &lt;code&gt;previous-line&lt;/code&gt; - one of the best Emacs commands!&lt;/p&gt;

&lt;h2 id=&quot;resolve-the-*-word-malarkey-with-defadvice&quot;&gt;Resolve the &lt;code&gt;*-word&lt;/code&gt; malarkey with &lt;code&gt;defadvice&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Here are some simple advice commands that I&amp;#39;ve just rolled:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;downcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Small explanation to the Elisp novices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;before &lt;code&gt;upcase-word&lt;/code&gt; is called, execute the body of &lt;code&gt;upcase-word-advice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unless&lt;/code&gt; we are at the beginning of the word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backward-word&lt;/code&gt; once to move to the beginning of the word&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;#39;m intentionally not using the newest advice system here, since not everyone
has yet upgraded to Emacs 24.4.
In fact, I saw this gem today at Stack Overflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am using Emacs 23 and cedet 1.0.1 ...&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Sometimes things break</title>
   <link href="http://oremacs.com/2014/12/22/sometimes-things-break/"/>
   <updated>2014-12-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/22/sometimes-things-break</id>
   <content type="html">&lt;p&gt;I was very surprised to find the
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt; build broken after I pushed
some minor update, like a change to README.md.  I mean, how in the
world would a few words in README.md break the Elisp tests?  Upon
investigation, it turned out that only one test was broken &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  This
one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ert-deftest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;clojure-thread-macro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&amp;quot;|(map sqr (filter odd? [1 2 3 4 5]))&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2(-&amp;gt;&amp;gt;]&amp;lt;]&amp;lt;]wwlM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;(-&amp;gt;&amp;gt; [1 2 3 4 5]\n  (map sqr)\n  (filter odd?))|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The culprit was an update in &lt;code&gt;clojure-mode&lt;/code&gt;&amp;#39;s indentation.
The previous behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is now replaced with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thankfully, the &lt;a href=&quot;https://travis-ci.com/&quot;&gt;Travis CI&lt;/a&gt; in combination
with &lt;a href=&quot;https://github.com/cask/cask&quot;&gt;cask&lt;/a&gt; is keeping me up to date.
Apparently, there were some
&lt;a href=&quot;https://github.com/clojure-emacs/clojure-mode/issues/265&quot;&gt;heated discussions&lt;/a&gt;
accompanying the change, and there was some reverting going on.
Anyway, it looks to me that both approaches have merit: the first one
is more logical, since &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; is an operation akin to Elisp&amp;#39;s
&lt;code&gt;with-current-buffer&lt;/code&gt;, where the first argument is different from the
others, while the second one is more aesthetically pleasing.  Fine
with me either way, I&amp;#39;m not complaining:)&lt;/p&gt;

&lt;p&gt;Also, the key sequence in the test is pretty ancient.  These days I&amp;#39;d
probably use:
&lt;kbd&gt;2(-&amp;gt;&amp;gt;&lt;/kbd&gt;&lt;kbd&gt;C-f&lt;/kbd&gt;&lt;kbd&gt;d&amp;lt;j&amp;lt;skwAM&lt;/kbd&gt;.  I&amp;#39;ve
recently done a more complex Elisp refactoring screencast, check it
out &lt;a href=&quot;https://www.youtube.com/watch?v=Djn6dXzXp_E&quot;&gt;here&lt;/a&gt;.  Later on, I
plan to do more Emacs-related screencasts (not just &lt;code&gt;lispy&lt;/code&gt;-related)
on my &lt;a href=&quot;https://www.youtube.com/user/abo5abo/videos&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t tried &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;&lt;code&gt;lispy&lt;/code&gt;&lt;/a&gt; yet, you&amp;#39;re missing out -
doing this refactor operation feels like you&amp;#39;re doing the 15-number puzzle:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/15-puzzle.png&quot; alt=&quot;15puzzle&quot;&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s fun in my book. But let me get back to the short overview
of the Emacs testing tools that lead me to this post, mainly &lt;code&gt;cask&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cask:-what-does-it-do?&quot;&gt;&lt;code&gt;cask&lt;/code&gt;: what does it do?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;http://cask.readthedocs.org/en/latest/&quot;&gt;its own documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cask is a project management tool for Emacs Lisp to automate the
package development cycle; development, dependencies, testing,
building, packaging and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, please, I&amp;#39;d like to do that! But after the exciting intro
sentence, there&amp;#39;s very little followup documentation-wise.  It took me
ages to figure out how &lt;code&gt;cask&lt;/code&gt; can actually give me some tangible
benefits, since I thought that &lt;code&gt;package.el&lt;/code&gt; is enough to maintain my
own config (it still is).&lt;/p&gt;

&lt;h2 id=&quot;tangible-benefits-of-cask&quot;&gt;tangible benefits of &lt;code&gt;cask&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d like to be sure that my packages work across recent Emacs
versions.  I&amp;#39;m using the
&lt;a href=&quot;http://savannah.gnu.org/git/?group=emacs&quot;&gt;bleeding edge&lt;/a&gt; myself, but
people who download my packages from MELPA might be using something
older, like &lt;code&gt;emacs-24.3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So I want to run my tests on both versions. Also, even for just one
version, the tests need to be run in a minimum environment, i.e. with
only the dependencies loaded, so that my personal configuration does
not interfere with the tests.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;cask&lt;/code&gt; actually shines: it can bootstrap a whole new
&lt;code&gt;.emacs.d&lt;/code&gt;, separate from your own, just for running tests.  It can do
it on your machine as well as on Travis CI.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my &lt;code&gt;Cask&lt;/code&gt; file for &lt;code&gt;lispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(source gnu)
(source melpa)

(package-file &amp;quot;lispy.el&amp;quot;)

(files &amp;quot;*.el&amp;quot; (:exclude &amp;quot;init.el&amp;quot; &amp;quot;lispy-test.el&amp;quot;))

(development
 (depends-on &amp;quot;helm&amp;quot;)
 (depends-on &amp;quot;ace-jump-mode&amp;quot;)
 (depends-on &amp;quot;noflet&amp;quot;)
 (depends-on &amp;quot;iedit&amp;quot;)
 (depends-on &amp;quot;multiple-cursors&amp;quot;)
 (depends-on &amp;quot;cider&amp;quot;)
 (depends-on &amp;quot;slime&amp;quot;)
 (depends-on &amp;quot;geiser&amp;quot;)
 (depends-on &amp;quot;projectile&amp;quot;)
 (depends-on &amp;quot;s&amp;quot;)
 (depends-on &amp;quot;highlight&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s the &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; emacs
&lt;span class=&quot;c&quot;&gt;# EMACS = emacs-24.3&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~/.cask/bin/cask
&lt;span class=&quot;nv&quot;&gt;CASKEMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -l lispy-inline.el -l lispy.el -l lispy-test.el

&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell &lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -q  &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; lispy.el &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --eval &lt;span class=&quot;s2&quot;&gt;&amp;quot;(progn (mapc #&amp;#39;byte-compile-file &amp;#39;(\&amp;quot;lispy.el\&amp;quot; \&amp;quot;lispy-inline.el\&amp;quot; \&amp;quot;le-clojure.el\&amp;quot; \&amp;quot;le-scheme.el\&amp;quot; \&amp;quot;le-lisp.el\&amp;quot;)) (switch-to-buffer \&amp;quot;*Compile-Log*\&amp;quot;) (ert t))&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -f ert-run-tests-batch-and-exit

&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    rm -f *.elc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Makefile&lt;/code&gt; has two separate testing targets: an
interactive one (&lt;code&gt;compile&lt;/code&gt;) and a non-interactive one (&lt;code&gt;test&lt;/code&gt;).
There&amp;#39;s actually some validity to this, since it happened once that
the same tests we failing in non-interactive mode, but passing in
interactive mode. Also, &lt;code&gt;compile&lt;/code&gt; obviously compiles, testing for
compilation warnings/errors.  I can change the Emacs version at the
top, although I don&amp;#39;t have to do it too often.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;language: emacs-lisp
env:
  matrix:
    - EMACS=emacs24

before_install:
  - sudo add-apt-repository -y ppa:cassou/emacs
  - sudo apt-get update -qq
  - sudo apt-get install -qq $EMACS
  - curl -fsSkL --max-time 10 --retry 10 --retry-delay 10 https://raw.github.com/cask/cask/master/go | python

script:
  - make cask
  - make test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So each time I push a change to github, Travis CI will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install emacs24&lt;/li&gt;
&lt;li&gt;install cask&lt;/li&gt;
&lt;li&gt;install the packages from MELPA:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ace-jump-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noflet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iedit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiple-cursors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geiser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;projectile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;load Emacs with these packages&lt;/li&gt;
&lt;li&gt;load &lt;code&gt;lispy-test.el&lt;/code&gt; and run it&lt;/li&gt;
&lt;li&gt;show up green if &lt;code&gt;make test&lt;/code&gt; returned &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems a bit wasteful, but it&amp;#39;s &lt;a href=&quot;http://xkcd.com/908/&quot;&gt;the Cloud&lt;/a&gt; - what can you do?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;upon even further investigation, the test itself was broken for almost a year, since &lt;code&gt;lispy-with-clojure&lt;/code&gt; should have been used instead of &lt;code&gt;lispy-with&lt;/code&gt;, but &lt;code&gt;cider&lt;/code&gt; was changing the indentation of &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; also for &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, so things were kind of working out&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Easy helm improvement</title>
   <link href="http://oremacs.com/2014/12/21/helm-backspace/"/>
   <updated>2014-12-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/21/helm-backspace</id>
   <content type="html">&lt;p&gt;When you press &lt;kbd&gt;DEL&lt;/kbd&gt; (also known as backspace) in a &lt;code&gt;helm&lt;/code&gt;
buffer, and there isn&amp;#39;t any input to delete, it only errors at you
with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Text is read only&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why not make it do something useful instead, for instance close &lt;code&gt;helm&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Easy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-backspace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Forward to `backward-delete-char&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;On error (read-only), quit without selecting.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-delete-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;helm-keyboard-quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Poyekhali!</title>
   <link href="http://oremacs.com/2014/12/20/poyekhali!/"/>
   <updated>2014-12-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/20/poyekhali!</id>
   <content type="html">&lt;p&gt;Welcome to &lt;b&gt;&lt;code&gt;(or emacs&lt;/code&gt;&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;My name is Oleh and I&amp;#39;ve been using Emacs for about 3 years now.  I
think that it&amp;#39;s an awesome editor, and I&amp;#39;ve accumulated some know-how
to make it even better (at least for me and people who think like me).
Sharing is caring, so here we go.&lt;/p&gt;

&lt;h2 id=&quot;ace-window-update&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt; update&lt;/h2&gt;

&lt;p&gt;On this weekend I&amp;#39;ve made a major update to my package
&lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; that allows it to
be used as a library. Luckily the change went smoothly, as there are
no complaints in the github issues so far.  In case you don&amp;#39;t know
what the package does in the first place, a short blurb follows.&lt;/p&gt;

&lt;h2 id=&quot;ace-window&amp;#39;s-&amp;quot;what-and-why&amp;quot;&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt;&amp;#39;s &amp;quot;what and why&amp;quot;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re aware of the &lt;code&gt;other-window&lt;/code&gt; command. While it&amp;#39;s great for
two windows, it quickly loses its value when there are more windows:
you need to call it many times, and since it&amp;#39;s not easily predictable,
you have to check each time if you&amp;#39;re in the window that you wanted.&lt;/p&gt;

&lt;p&gt;Another approach is to use &lt;code&gt;windmove-left&lt;/code&gt;, &lt;code&gt;windmove-up&lt;/code&gt; etc.  These
are fast and predictable. Their disadvantage is that they need 4 key
bindings.  The default ones are shift+arrows, which are hard to reach.&lt;/p&gt;

&lt;p&gt;This package aims to take the speed and predictability of &lt;code&gt;windmove&lt;/code&gt;
and pack it into a single key binding, similar to &lt;code&gt;other-window&lt;/code&gt;.  To
achieve this, I&amp;#39;m using the excellent
&lt;a href=&quot;https://github.com/winterTTr/ace-jump-mode&quot;&gt;ace-jump-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how the package looks in action: &lt;a href=&quot;/download/ace-window.gif&quot;&gt;ace-window.gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since switching windows is a frequently used operation, I recommend
binding &lt;code&gt;ace-window&lt;/code&gt; to something short, like &lt;kbd&gt;M-p&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;By default, three actions are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt; - select window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u M-p&lt;/kbd&gt; - swap the current window with the selected window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u C-u M-p&lt;/kbd&gt; - delete the selected window&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finally,-the-library-part&quot;&gt;finally, the library part&lt;/h2&gt;

&lt;p&gt;So now, what if you want to select a window to maximize with &lt;code&gt;ace-window&lt;/code&gt;?
After the change that I&amp;#39;ve mentioned, the code to do this is dirt simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Ace maximize window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw--current-op&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj-position-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw--doit&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; Ace - Maximize Window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-maximize-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
