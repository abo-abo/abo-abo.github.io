<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>(or emacs</title>
 <link href="http://oremacs.com/atom.xml" rel="self"/>
 <link href="http://oremacs.com/"/>
 <updated>2014-12-29T09:42:04+01:00</updated>
 <id>http://oremacs.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Monkeying around with JavaScript</title>
   <link href="http://oremacs.com/2014/12/29/monkeying-around-with-javascript/"/>
   <updated>2014-12-29T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/29/monkeying-around-with-javascript</id>
   <content type="html">&lt;h2&gt;Exciting encounter&lt;/h2&gt;

&lt;p&gt;Recently, I happened upon a wonderful blog called
&lt;a href=&quot;http://axisofeval.blogspot.nl&quot;&gt;The Axis of Eval&lt;/a&gt;.  I knew that I&amp;#39;d
love it just when I read the name. &lt;a href=&quot;/&quot;&gt;(or emacs&lt;/a&gt; pales in comparison,
but I couldn&amp;#39;t just sit on my hands for months or years while thinking
up a perfect blog name. If you think of a blog name as awesome as &amp;quot;The
Axis of Eval&amp;quot; and are willing to let me use it, I&amp;#39;ll probably make the
switch.&lt;/p&gt;

&lt;p&gt;The blog did not disappoint, featuring gems like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the Lisp world, new languages are built by combining large,
battle-tested building blocks, and polishing or updating them when
needed, instead of starting over from toothpicks and double-sided
duct tape. A large Lisp like Common Lisp is like a toolchain of
decades-old tools that have proven their worth, and have been
codified in standards, folklore, and implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing in the way of extracting information and enjoyment from
this blog was the horrendous theme of black background, white
foreground and magenta links. Plus the RSS was kind of quirky, and I
couldn&amp;#39;t just feed all of it into
&lt;a href=&quot;https://github.com/skeeto/elfeed&quot;&gt;Elfeed&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Greasemonkey to the rescue!&lt;/h2&gt;

&lt;p&gt;In the previous post I&amp;#39;ve mentioned that, in addition to using
&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;the best editor&lt;/a&gt;, I&amp;#39;m using
&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;the best browser&lt;/a&gt;.  Well,
this particular best browser has an extension called
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/&quot;&gt;Greasemonkey&lt;/a&gt;
that allows you to automatically run your own JavaScript on certain
websites.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not very proficient in JavaScript, the following code I just found
by searching around. The part to note is the &lt;code&gt;@include&lt;/code&gt; - the pattern
of website names for which this script should be run automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @name        background&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @namespace   abo-abo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @include     http://axisofeval.blogspot.nl/*&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @version     1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @grant       none&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&amp;quot;background-color: #ffffff; color:#000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can barely stand to look at it. How could you take Scheme and turn
it into this monstrosity? Such a shame. But it works, so I guess
everyone should learn JavaScript. All hail the mighty
&lt;s&gt;HypnoToad&lt;/s&gt; JavaScript!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Throwing abbrevs into the mix</title>
   <link href="http://oremacs.com/2014/12/28/trying-abbrevs/"/>
   <updated>2014-12-28T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/28/trying-abbrevs</id>
   <content type="html">&lt;p&gt;Currently, I&amp;#39;m using two methods for completing Elisp: &lt;code&gt;company-mode&lt;/code&gt;
and &lt;code&gt;helm-lisp-completion-at-point&lt;/code&gt;. The latter is the cannon, the big
gun: it always gets the job done, but I don&amp;#39;t want to shoot at
sparrows with it. So I only bring it out for hairy cases, like for
stuff that starts with &lt;code&gt;LaTeX-&lt;/code&gt;. Hence, the &lt;code&gt;company-mode&lt;/code&gt;.  But too
often have I typed &lt;code&gt;region-&lt;/code&gt; only to find 7 candidates staring at me,
4 of them useless. Which prompted me to look for an additional
completion method.&lt;/p&gt;

&lt;h2&gt;Enter abbrevs&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html&quot;&gt;manual&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A defined &amp;quot;abbrev&amp;quot; is a word which &amp;quot;expands&amp;quot;, if you insert it, into
some different text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs can have &amp;quot;mode-specific&amp;quot; definitions, active only in one
major mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like something that could solve my problem with &lt;code&gt;region-&lt;/code&gt; commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rb -&amp;gt; region-beginning
re -&amp;gt; region-end
ra -&amp;gt; region-active-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, obviously,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add it to the mix:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-emacs-lisp-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outline-regexp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; ———&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-local-variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;company-backends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-elisp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-dabbrev-code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yas-minor-mode-on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;auto-compile-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Some data acquisition&lt;/h2&gt;

&lt;p&gt;I had the whole abbrev thing in the back of my mind until I saw a link
to the post
&lt;a href=&quot;https://groups.google.com/forum/#!topic/gnu.emacs.help/kHvUcFdiXFM&quot;&gt;Abbrevs for the most frequent elisp symbols&lt;/a&gt;.
That&amp;#39;s when I decided to act.
That post eventually links to a pastebin, where 1600 abbrevs are defined.
With my handy &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/its-all-text/&quot;&gt;best extension&lt;/a&gt;
for &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;best browser&lt;/a&gt; I&amp;#39;ve opened
the paste in &lt;s&gt;Emacs&lt;/s&gt; &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;best editor&lt;/a&gt; by just clicking the &lt;strong&gt;edit&lt;/strong&gt; button
in the &lt;em&gt;RAW Paste Data&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;I had to &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, since the file opened in
&lt;code&gt;text-mode&lt;/code&gt;. And boy, it&amp;#39;s big. In &lt;code&gt;lispy-mode&lt;/code&gt;, I usually use
&lt;kbd&gt;99j&lt;/kbd&gt; to navigate 99 sexps down and therefore to the end of
the list. Well, for this file even &lt;kbd&gt;999j&lt;/kbd&gt; wasn&amp;#39;t enough.
I quickly tired of deleting one-by-one the each individual useless abbrev.
I mean:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ek -&amp;gt; echo-keystrokes,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when is that ever going to be useful? So I wrote this throw-away code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foobar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mark-list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--string-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count-matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-out-backward&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-delete&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After switching to a two-pane window layout, with point in the
pastebin buffer, calling &lt;code&gt;foobar&lt;/code&gt; would count the amount of the abbrev
matches in
&lt;a href=&quot;https://github.com/abo-abo/lispy/commits/master&quot;&gt;my most frequent elisp buffer&lt;/a&gt;.
If it was less than 5, the abbrev was auto-deleted, otherwise the
decision was up to me, as holding &lt;kbd&gt;C-.&lt;/kbd&gt; would no longer
delete. In the end, there were only 56 abbrevs left out of 1600.&lt;/p&gt;

&lt;h2&gt;The final result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what I have put into my &lt;code&gt;abbrev_defs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-abbrev-table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode-abbrev-table&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;major-mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char-after&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-match-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point-min&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ir&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;indent-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ci&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;call-interactively&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;symbol-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;se&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-excursion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ff&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;find-file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-sexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;prefix-arg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;re&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;this-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;default-directory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;snp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bsnp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lep&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line-end-position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;condition-case&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;up-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bfn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-file-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-back&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tap&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;thing-at-point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;declare-function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ntr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;narrow-to-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wcb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with-current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ie&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ignore-errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jos&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;just-one-space&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;la&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;other-window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dk&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;define-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;deactivate-mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bod&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beginning-of-defun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sic&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self-insert-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eol&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;end-of-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nai&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;newline-and-indent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add-to-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rris&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-regexp-in-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>mmm... minty</title>
   <link href="http://oremacs.com/2014/12/27/mmm-minty/"/>
   <updated>2014-12-27T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/27/mmm-minty</id>
   <content type="html">&lt;h2&gt;The backstory&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2014/12/24/light-it-up/&quot;&gt;one of the earlier posts&lt;/a&gt;,
I was discussing the implementation of an Emacs Lisp lexer for
&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;. Here, I&amp;#39;ll show how to install the
update and get nicely highlighted code in a pdf via the
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; LaTeX package.&lt;/p&gt;

&lt;h2&gt;The install&lt;/h2&gt;

&lt;p&gt;Assuming that you are on a Debian-related system:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install mercurial
mkdir ~/git &amp;amp;&amp;amp; cd ~/git
hg clone https://bitbucket.org/abo-abo/pygments-main
cd pygments-main
make mapfiles
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, of course, I&amp;#39;m assuming that you already have TeX Live installed.
I&amp;#39;m not too sophisticated about it, so I just install everything:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install texlive-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;The result&lt;/h2&gt;

&lt;p&gt;So here I took some code from
&lt;a href=&quot;/2014/12/25/ode-to-toggle/&quot;&gt;a previous post&lt;/a&gt; and
copy-pasted it into &lt;a href=&quot;/download/minty.org&quot;&gt;minty.org&lt;/a&gt; file.
And here&amp;#39;s the result of the PDF export (&lt;kbd&gt;C-c C-e lo&lt;/kbd&gt;):
&lt;a href=&quot;/download/minty.pdf&quot;&gt;minty.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The red tape&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; had trouble exporting on my laptop until I did this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /usr/bin/
sudo ln -s /usr/local/texlive/2013/bin/x86_64-linux/pdflatex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also be mindful of the &lt;code&gt;-shell-escape&lt;/code&gt; flag to &lt;code&gt;pdflatex&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-latex-pdf-process&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>tiny.el - the little package that could</title>
   <link href="http://oremacs.com/2014/12/26/the-little-package-that-could/"/>
   <updated>2014-12-26T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/26/the-little-package-that-could</id>
   <content type="html">&lt;h2&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;It all started with a heated discussion with the author of
&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;yasnippet&lt;/a&gt; over some minor
nonsense. In the end, we agreed to disagree, but not before he suggested:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So I hereby challenge you to create this stripped down, no-crap,
version of yasnippet. Dub it &amp;quot; tiny is not yasnippet &amp;quot; after your
grandiose views and in the glorious unix tradition of recursive
acronyms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;The Thought Process&lt;/h2&gt;

&lt;p&gt;Well, doing exactly that would probably be lame, but I really loved
the acronym. Somewhere around that time I saw some post about using
eval-and-replace, i.e. inserting some Elisp in your non-Elisp buffer
and then replacing that code in-place with the result of the eval.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the type of code that I was playing around with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I realized that the code should probably produce a string.
Here&amp;#39;s a more refined version:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Loops are a useful thing to have, they are a blind spot of
&lt;code&gt;yasnippet&lt;/code&gt;, and looping is exactly what the code above does.  The
parameters for this loop expansion are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integer range start: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;integer range end: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;separator to join the expressions: &lt;code&gt;&amp;quot;;\n&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elisp expression to transform the linear range: &lt;code&gt;(* x x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; expression for the result: &lt;code&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So ideally, in order to have a package called &lt;code&gt;tiny&lt;/code&gt;, I&amp;#39;d like to
keep only the parameters and throw away everything else.&lt;/p&gt;

&lt;h2&gt;The Result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s the final result of the shortening, and what &lt;code&gt;tiny-expand&lt;/code&gt; would produce:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#demo-1&quot;&gt;&lt;code&gt;m1;\n7*xx|hex: 0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-1&quot; class=&quot;collapse&quot;&gt;
&lt;pre&gt;&lt;code&gt;
hex: 0x1;
hex: 0x4;
hex: 0x9;
hex: 0x10;
hex: 0x19;
hex: 0x24;
hex: 0x31
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;As you see, it&amp;#39;s pretty compact, with only two characters which are not
actually the parameters of the template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; signifies the start of the template. I think this way is much
better than something like having to mark the template body with a
region before expanding. &lt;code&gt;tiny-expand&lt;/code&gt; should be called from the end
of the snippet, so there&amp;#39;s no need to mark the end position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; signifies the end of the Elisp expression and the start of the format string.
It can be omitted if your format string starts with a &lt;code&gt;%&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note also the use of shortened Elisp. You can still use the full thing
if you want.  Or just use only the closing parens to resolve the
ambiguities.&lt;/p&gt;

&lt;h2&gt;The Demos&lt;/h2&gt;

&lt;p&gt;Here are some more snippets, you can click on them to see what they
expand to. You can also find them and more in the comments section of
the source code:
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-2&quot;&gt; &lt;code&gt;m10&lt;/code&gt;
&lt;/button&gt; &lt;div id=&quot;demo-2&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 1 2 3 4 5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-3&quot;&gt;&lt;code&gt;m5 10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-3&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-4&quot;&gt;&lt;code&gt;m5,10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-4&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5,6,7,8,9,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-5&quot;&gt;&lt;code&gt;m5 10*xx&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-5&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;25 36 49 64 81 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-6&quot;&gt;&lt;code&gt;m5 10*xx%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-6&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;19 24 31 40 51 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-7&quot;&gt;&lt;code&gt;m5 10*xx|0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-7&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x19 0x24 0x31 0x40 0x51 0x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-8&quot;&gt;
&lt;code&gt;m25+x?a%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-8&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-9&quot;&gt;
&lt;code&gt;m25+x?A%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-9&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-10&quot;&gt;
&lt;code&gt;m97,122(string x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-10&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-11&quot;&gt;
&lt;code&gt;m97,122stringxx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-11&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp,qq,rr,ss,tt,uu,vv,ww,xx,yy,zz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-12&quot;&gt;
&lt;code&gt;m97,120stringxupcasex&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-12&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aA,bB,cC,dD,eE,fF,gG,hH,iI,jJ,kK,lL,mM,nN,oO,pP,qQ,rR,sS,tT,uU,vV,wW,xX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-13&quot;&gt;
&lt;code&gt;m97,120stringxupcasex)x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-13&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aAa,bBb,cCc,dDd,eEe,fFf,gGg,hHh,iIi,jJj,kKk,lLl,mMm,nNn,oOo,pPp,qQq,rRr,sSs,tTt,uUu,vVv,wWw,xXx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-14&quot;&gt;
&lt;code&gt;m\n10|%(+ x x) and %(* x x) and %s&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-14&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 and 0 and 0
2 and 1 and 1
4 and 4 and 2
6 and 9 and 3
8 and 16 and 4
10 and 25 and 5
12 and 36 and 6
14 and 49 and 7
16 and 64 and 8
18 and 81 and 9
20 and 100 and 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-15&quot;&gt;
&lt;code&gt;m10*2+3x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-15&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;6 8 10 12 14 16 18 20 22 24 26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-16&quot;&gt;
&lt;code&gt;m\n10expx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-16&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1.0
2.718281828459045
7.38905609893065
20.085536923187668
54.598150033144236
148.4131591025766
403.4287934927351
1096.6331584284585
2980.9579870417283
8103.083927575384
22026.465794806718
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-17&quot;&gt;
&lt;code&gt;m1\n20expx%014.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-17&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;00000000002.72
00000000007.39
00000000020.09
00000000054.60
00000000148.41
00000000403.43
00000001096.63
00000002980.96
00000008103.08
00000022026.47
00000059874.14
00000162754.79
00000442413.39
00001202604.28
00003269017.37
00008886110.52
00024154952.75
00065659969.14
00178482300.96
00485165195.41
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-18&quot;&gt;
&lt;code&gt;m7|%(expt 2 x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-18&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 2 4 8 16 32 64 128
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-19&quot;&gt;
&lt;code&gt;m, 7|0x%02x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-19&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-20&quot;&gt;
&lt;code&gt;m10|%0.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-20&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0.00 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00 10.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-21&quot;&gt;
&lt;code&gt;m1\n14|* TODO http://emacsrocks.com/e%02d.html&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-21&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO http://emacsrocks.com/e01.html
* TODO http://emacsrocks.com/e02.html
* TODO http://emacsrocks.com/e03.html
* TODO http://emacsrocks.com/e04.html
* TODO http://emacsrocks.com/e05.html
* TODO http://emacsrocks.com/e06.html
* TODO http://emacsrocks.com/e07.html
* TODO http://emacsrocks.com/e08.html
* TODO http://emacsrocks.com/e09.html
* TODO http://emacsrocks.com/e10.html
* TODO http://emacsrocks.com/e11.html
* TODO http://emacsrocks.com/e12.html
* TODO http://emacsrocks.com/e13.html
* TODO http://emacsrocks.com/e14.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-22&quot;&gt;
&lt;code&gt;m\n8|* TODO Wash dog %(+ x 2) \nDEADLINE: &amp;lt;%(date &amp;quot;Jan 1&amp;quot; (* x 5))&amp;gt;&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-22&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO Wash dog 2
DEADLINE: &amp;lt;2015-01-01 Thu&amp;gt;
* TODO Wash dog 3
DEADLINE: &amp;lt;2015-01-06 Tue&amp;gt;
* TODO Wash dog 4
DEADLINE: &amp;lt;2015-01-11 Sun&amp;gt;
* TODO Wash dog 5
DEADLINE: &amp;lt;2015-01-16 Fri&amp;gt;
* TODO Wash dog 6
DEADLINE: &amp;lt;2015-01-21 Wed&amp;gt;
* TODO Wash dog 7
DEADLINE: &amp;lt;2015-01-26 Mon&amp;gt;
* TODO Wash dog 8
DEADLINE: &amp;lt;2015-01-31 Sat&amp;gt;
* TODO Wash dog 9
DEADLINE: &amp;lt;2015-02-05 Thu&amp;gt;
* TODO Wash dog 10
DEADLINE: &amp;lt;2015-02-10 Tue&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You can expand them one-by-one to see what they do.  As you can see,
Ruby-style interpolation is available in the format string.  There&amp;#39;s
also one special function called &lt;code&gt;date&lt;/code&gt; that you can use there.  It
takes the start date as a string (&lt;code&gt;&amp;quot;Jan 1&amp;quot;&lt;/code&gt; in the example) and an
integer shift and prints an &lt;code&gt;org&lt;/code&gt;-style date.&lt;/p&gt;

&lt;h2&gt;The full syntax&lt;/h2&gt;

&lt;p&gt;The full syntax for the snippet is:&lt;/p&gt;

&lt;pre style=&quot;font-size: 0.6em&quot;&gt;&lt;code&gt;m{range start:=0}{separator:= }{range end}{Lisp expr:=indentity}|{format expr:=%d}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You always start with &lt;code&gt;m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;range start&lt;/code&gt; that defaults to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;separator&lt;/code&gt; that defaults to a single space.&lt;/li&gt;
&lt;li&gt;Then mandatory &lt;code&gt;range end&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;Lisp expr&lt;/code&gt;, that defaults to &lt;code&gt;identity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;format&lt;/code&gt;-style string, that defaults to &lt;code&gt;%d&lt;/code&gt;. You have
to separate it with &lt;code&gt;|&lt;/code&gt; if the format string does not start with
&lt;code&gt;%&lt;/code&gt;. You can also Ruby-style interpolation here, e.g. &lt;code&gt;%(* x x)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;With the point at the end of the snippet, &lt;kbd&gt;M-x&lt;/kbd&gt;&lt;code&gt;tiny-expand&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;The Summary&lt;/h2&gt;

&lt;p&gt;In the end, &lt;a href=&quot;https://github.com/abo-abo/tiny&quot;&gt;tiny&lt;/a&gt; lives up to the name,
implementing only one snippet that can be used in a variety of ways.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tiny is not yasnippet&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ode to the toggle</title>
   <link href="http://oremacs.com/2014/12/25/ode-to-toggle/"/>
   <updated>2014-12-25T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/25/ode-to-toggle</id>
   <content type="html">&lt;p&gt;Man, I just love toggles: the light switches, the
&lt;kbd&gt;f&lt;/kbd&gt; - full-screen key in &lt;code&gt;vlc&lt;/code&gt;, and the clicky pens (ooh, those
are the best). So I try to model some of my Emacs key bindings as
toggles.&lt;/p&gt;

&lt;p&gt;Let me just quantify the two features that make a good toggle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only two states: &lt;em&gt;on&lt;/em&gt; and &lt;em&gt;off&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the state is visible at a glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One could argue that with &lt;code&gt;undo&lt;/code&gt; most editing commands become toggles.
But they&amp;#39;re not, since each time you call &lt;code&gt;undo&lt;/code&gt;, you mess with
Emacs&amp;#39;s undo state. And the undo state isn&amp;#39;t visible at a glance, so
both requirements for a good toggle aren&amp;#39;t fulfilled.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll demonstrate the two editing commands that I use every day,
&lt;code&gt;capitalize-word-toggle&lt;/code&gt; and &lt;code&gt;upcase-word-toggle&lt;/code&gt;, that are good
toggles.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;capitalize-word-toggle&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;capitalize-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I may not have mentioned this before, but you should for the most part
ignore the key bindings mentioned on this blog. I&amp;#39;m actually using
them, they work for me because of my non-standard layout, but you
should assign what works for you.&lt;/p&gt;

&lt;p&gt;Anyway, &lt;code&gt;capitalize-word-toggle&lt;/code&gt; clearly has a state that&amp;#39;s visible at
a glance: the first char of the current symbol. Also, there are only
two possible states: the char can either be upper-case or lower-case.
Hence, I can toggle this state with &lt;kbd&gt;C-z&lt;/kbd&gt; for fun and profit.&lt;/p&gt;

&lt;p&gt;Maybe some background on how this command is useful for me. I write a bunch of C++,
and the code features a lot of lines like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Triangulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triangulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// duh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So when I&amp;#39;m using &lt;code&gt;auto-complete&lt;/code&gt;, it often eagerly expands to
&lt;code&gt;Triangulation&lt;/code&gt; when I want &lt;code&gt;triangulation&lt;/code&gt;, and the other way around.
So &lt;code&gt;capitalize-word-toggle&lt;/code&gt; is super-useful there.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[A-Za-z]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
                      &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&amp;#39;s state becomes binary after you call it once,
since initially the thing at point could have mixed case.
But afterwards, it&amp;#39;s either all lowercase or all uppercase.
So again, a clearly visible binary state is a good thing.&lt;/p&gt;

&lt;p&gt;This command works either on &lt;code&gt;(bounds-of-thing-at-point &amp;#39;symbol)&lt;/code&gt; or
on the active region. Since &lt;code&gt;region-active-p&lt;/code&gt; is deactivated after you
call the command once, there&amp;#39;s some machinery to remember the state
and to toggle when called again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Light it up! Pygments for Emacs Lisp.</title>
   <link href="http://oremacs.com/2014/12/24/light-it-up/"/>
   <updated>2014-12-24T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/24/light-it-up</id>
   <content type="html">&lt;h2&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;More than 2 years ago, the formidable @bbatsov of &lt;a href=&quot;http://emacsredux.com&quot;&gt;Emacs Redux&lt;/a&gt; had this to say:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;After so many years pygments (a popular syntax highlighting library used by GitHub &amp;amp; others) still lacks proper support for Emacs Lisp &lt;a href=&quot;https://twitter.com/hashtag/fail?src=hash&quot;&gt;#fail&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bozhidar Batsov (@bbatsov) &lt;a href=&quot;https://twitter.com/bbatsov/status/246929917546221568&quot;&gt;September 15, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Well, let&amp;#39;s turn that #fail-frown upside down!&lt;/p&gt;

&lt;h2&gt;The Python&lt;/h2&gt;

&lt;p&gt;A quick search brought me to this page:
&lt;a href=&quot;http://pygments.org/docs/lexerdevelopment/&quot;&gt;Write your own lexer -- Pygments&lt;/a&gt;.
Turns out that the Pygments development takes place on
&lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main&quot;&gt;Bitbucket&lt;/a&gt;, so I had
to start an account there. I shortly cloned the repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;hg clone https://abo-abo@bitbucket.org/birkenfeld/pygments-main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I quickly copy-pasted some starting code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;SchemeLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;CommonLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;HyLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;RacketLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;NewLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;EmacsLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmacsLispLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegexLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    An ELisp lexer, parsing a stream and outputting the tokens&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    needed to highlight elisp code.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ELisp&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emacs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*.el&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mimetypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text/x-elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MULTILINE&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# the rest of the code was copied from CommonLispLexer for now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, infrastructure-wise, I only need to know two commands.
The first one needs to be run just once, so that Pygments is aware of the new lexer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/git/pygments-main &amp;amp;&amp;amp; make mapfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second command is to (re-)generate &lt;code&gt;/tmp/example.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cp ~/git/emacs/lisp/vc/ediff.el \
  ~/git/pygments-main/tests/examplefiles/
$ ./pygmentize -O full -f html -o /tmp/example.html \
  tests/examplefiles/ediff.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would repeat the last line with each update to the code, and then
refresh the page in Firefox to see the result.&lt;/p&gt;

&lt;h2&gt;The Elisp&lt;/h2&gt;

&lt;p&gt;To finalize the lexer, the following tasks ensued:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get a list of built-in macros&lt;/li&gt;
&lt;li&gt;get a list of special forms&lt;/li&gt;
&lt;li&gt;get a list of built-in functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the process, I&amp;#39;ve added two more lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions that are highlighted with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;defvaralias&amp;#39;, &amp;#39;provide&amp;#39;, &amp;#39;require&amp;#39;,
&amp;#39;with-no-warnings&amp;#39;, &amp;#39;define-widget&amp;#39;, &amp;#39;with-electric-help&amp;#39;,
&amp;#39;throw&amp;#39;, &amp;#39;defalias&amp;#39;, &amp;#39;featurep&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions and macros that are highlighted with &lt;code&gt;font-lock-warning-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;cl-assert&amp;#39;, &amp;#39;cl-check-type&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;signal&amp;#39;,
&amp;#39;user-error&amp;#39;, &amp;#39;warn&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To generate the other three lists, I started off writing things in
&lt;code&gt;*scratch*&lt;/code&gt;, but after a while my compulsion to &lt;kbd&gt;C-x C-s&lt;/kbd&gt;
kicked in and I&amp;#39;ve saved the work to &lt;code&gt;research.el&lt;/code&gt;.  At least,
&lt;a href=&quot;http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/&quot;&gt;thanks to @bbatsov&lt;/a&gt;,
I&amp;#39;m not &lt;kbd&gt;C-x C-s&lt;/kbd&gt;-ing that much since I&amp;#39;ve added this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-and-switch-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bound-and-true-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;archive-subfile-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;save-and-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it&amp;#39;s time for the student to one-up the master, so here&amp;#39;s a tip to
improve even further:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-buffer-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-next-match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way I can cycle the buffers with the same shortcut that invokes
&lt;code&gt;save-and-switch-buffer&lt;/code&gt;. The defaults are &lt;kbd&gt;C-s&lt;/kbd&gt; and
&lt;kbd&gt;C-r&lt;/kbd&gt;, in case you didn&amp;#39;t know.&lt;/p&gt;

&lt;h2&gt;The C&lt;/h2&gt;

&lt;p&gt;Getting the list of built-in C functions and special forms, obviously
involved browsing the C source code. In case you don&amp;#39;t (yet) have the Emacs sources,
they&amp;#39;re here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git://git.savannah.gnu.org/emacs.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I switched to the &lt;code&gt;./src&lt;/code&gt; directory and called &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;find-name-dired&lt;/code&gt; with
&lt;code&gt;*.c&lt;/code&gt; to build a list of all the sources.
Then I ran the following code from &lt;code&gt;research.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c-research&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;incf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file-noselect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^DEFUN (&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-substring-no-properties&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UNEVALLED&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was beautiful, by the way, to just generate this sort of
documentation from such well-formatted and documented C sources.  Free
Software FTW.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested, there are 1294 built-in functions.
Here&amp;#39;s a list of 23 special forms that I found:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-current-buffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-restriction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq-default&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unwind-protect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can read up on the special forms in the
&lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3&quot;&gt;SICP&lt;/a&gt;.
There&amp;#39;s no node for them, so just use isearch.&lt;/p&gt;

&lt;h2&gt;The Result&lt;/h2&gt;

&lt;p&gt;You can see it here: &lt;a href=&quot;/download/ediff.html&quot;&gt;ediff.html&lt;/a&gt;, as well as on
the rest of the site, since I&amp;#39;ve switched it on everywhere.&lt;/p&gt;

&lt;h2&gt;The Impact&lt;/h2&gt;

&lt;p&gt;Unfortunately this won&amp;#39;t have impact on the Github source code
highlighter, since
&lt;a href=&quot;http://www.greghendershott.com/2014/11/github-dropped-pygments.html&quot;&gt;Github dropped Pygments&lt;/a&gt;
recently.&lt;/p&gt;

&lt;p&gt;But people that use the static blog generator
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; or the LaTeX package
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; (that&amp;#39;s the package that
&lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s PDF Export uses by default) will be able to get better
Elisp highlighting. In fact, this blog is already using the new highlighter.&lt;/p&gt;

&lt;p&gt;See the rest of projects that use Pygments
&lt;a href=&quot;http://pygments.org/faq/#who-uses-pygments&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;The Bitbucket&lt;/h2&gt;

&lt;p&gt;So now, to share the new lexer with the world I just have to learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stage and commit in Mercurial&lt;/li&gt;
&lt;li&gt;push Mercurial to Bitbucket&lt;/li&gt;
&lt;li&gt;open a pull request on Bitbucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;#39;t &lt;em&gt;want&lt;/em&gt; to become a &lt;a href=&quot;http://xkcd.com/1220/&quot;&gt;hipster&lt;/a&gt;, these things just happen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>upcase-word, you so silly</title>
   <link href="http://oremacs.com/2014/12/23/upcase-word-you-silly/"/>
   <updated>2014-12-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/23/upcase-word-you-silly</id>
   <content type="html">&lt;p&gt;Do you know what the
&lt;a href=&quot;http://ergoemacs.org/emacs/command-frequency.html&quot;&gt;most frequently used&lt;/a&gt;
Emacs commands are? I can confirm by my own experience that they are
&lt;code&gt;next-line&lt;/code&gt; and &lt;code&gt;previous-line&lt;/code&gt; (in that order).
So why do &lt;kbd&gt;M-u&lt;/kbd&gt; - &lt;code&gt;upcase-word&lt;/code&gt;, &lt;kbd&gt;M-l&lt;/kbd&gt; - &lt;code&gt;downcase-word&lt;/code&gt;, and
&lt;kbd&gt;M-c&lt;/kbd&gt; - &lt;code&gt;capitalize-word&lt;/code&gt; have such terrible synergy with Emacs&amp;#39;s best commands?&lt;/p&gt;

&lt;p&gt;No, &lt;code&gt;upcase-word&lt;/code&gt;, this is not what I had in mind:&lt;/p&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic key&lt;cursor&gt;s&lt;/cursor&gt;troke commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;td&gt;
&lt;kbd&gt;M-u&lt;/kbd&gt;
&lt;/td&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic keySTROKE&lt;cursor&gt; &lt;/cursor&gt;commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;If you say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But how did you get the cursor in such a crazy position in the first
place? You should have used &lt;kbd&gt;M-b&lt;/kbd&gt;/&lt;kbd&gt;M-f&lt;/kbd&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I got there with &lt;code&gt;previous-line&lt;/code&gt; - one of the best Emacs commands!&lt;/p&gt;

&lt;h2&gt;Resolve the &lt;code&gt;*-word&lt;/code&gt; malarkey with &lt;code&gt;defadvice&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Here are some simple advice commands that I&amp;#39;ve just rolled:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;downcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Small explanation to the Elisp novices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;before &lt;code&gt;upcase-word&lt;/code&gt; is called, execute the body of &lt;code&gt;upcase-word-advice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unless&lt;/code&gt; we are at the beginning of the word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backward-word&lt;/code&gt; once to move to the beginning of the word&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;#39;m intentionally not using the newest advice system here, since not everyone
has yet upgraded to Emacs 24.4.
In fact, I saw this gem today at Stack Overflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am using Emacs 23 and cedet 1.0.1 ...&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Sometimes things break</title>
   <link href="http://oremacs.com/2014/12/22/sometimes-things-break/"/>
   <updated>2014-12-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/22/sometimes-things-break</id>
   <content type="html">&lt;p&gt;I was very surprised to find the
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt; build broken after I pushed
some minor update, like a change to README.md.  I mean, how in the
world would a few words in README.md break the Elisp tests?  Upon
investigation, it turned out that only one test was broken &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  This
one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ert-deftest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;clojure-thread-macro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&amp;quot;|(map sqr (filter odd? [1 2 3 4 5]))&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2(-&amp;gt;&amp;gt;]&amp;lt;]&amp;lt;]wwlM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;(-&amp;gt;&amp;gt; [1 2 3 4 5]\n  (map sqr)\n  (filter odd?))|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The culprit was an update in &lt;code&gt;clojure-mode&lt;/code&gt;&amp;#39;s indentation.
The previous behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is now replaced with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thankfully, the &lt;a href=&quot;https://travis-ci.com/&quot;&gt;Travis CI&lt;/a&gt; in combination
with &lt;a href=&quot;https://github.com/cask/cask&quot;&gt;cask&lt;/a&gt; is keeping me up to date.
Apparently, there were some
&lt;a href=&quot;https://github.com/clojure-emacs/clojure-mode/issues/265&quot;&gt;heated discussions&lt;/a&gt;
accompanying the change, and there was some reverting going on.
Anyway, it looks to me that both approaches have merit: the first one
is more logical, since &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; is an operation akin to Elisp&amp;#39;s
&lt;code&gt;with-current-buffer&lt;/code&gt;, where the first argument is different from the
others, while the second one is more aesthetically pleasing.  Fine
with me either way, I&amp;#39;m not complaining:)&lt;/p&gt;

&lt;p&gt;Also, the key sequence in the test is pretty ancient.  These days I&amp;#39;d
probably use:
&lt;kbd&gt;2(-&amp;gt;&amp;gt;&lt;/kbd&gt;&lt;kbd&gt;C-f&lt;/kbd&gt;&lt;kbd&gt;d&amp;lt;j&amp;lt;skwAM&lt;/kbd&gt;.  I&amp;#39;ve
recently done a more complex Elisp refactoring screencast, check it
out &lt;a href=&quot;https://www.youtube.com/watch?v=Djn6dXzXp_E&quot;&gt;here&lt;/a&gt;.  Later on, I
plan to do more Emacs-related screencasts (not just &lt;code&gt;lispy&lt;/code&gt;-related)
on my &lt;a href=&quot;https://www.youtube.com/user/abo5abo/videos&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t tried &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;&lt;code&gt;lispy&lt;/code&gt;&lt;/a&gt; yet, you&amp;#39;re missing out -
doing this refactor operation feels like you&amp;#39;re doing the 15-number puzzle:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/15-puzzle.png&quot; alt=&quot;15puzzle&quot;&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s fun in my book. But let me get back to the short overview
of the Emacs testing tools that lead me to this post, mainly &lt;code&gt;cask&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;cask&lt;/code&gt;: what does it do?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;http://cask.readthedocs.org/en/latest/&quot;&gt;its own documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cask is a project management tool for Emacs Lisp to automate the
package development cycle; development, dependencies, testing,
building, packaging and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, please, I&amp;#39;d like to do that! But after the exciting intro
sentence, there&amp;#39;s very little followup documentation-wise.  It took me
ages to figure out how &lt;code&gt;cask&lt;/code&gt; can actually give me some tangible
benefits, since I thought that &lt;code&gt;package.el&lt;/code&gt; is enough to maintain my
own config (it still is).&lt;/p&gt;

&lt;h2&gt;tangible benefits of &lt;code&gt;cask&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d like to be sure that my packages work across recent Emacs
versions.  I&amp;#39;m using the
&lt;a href=&quot;http://savannah.gnu.org/git/?group=emacs&quot;&gt;bleeding edge&lt;/a&gt; myself, but
people who download my packages from MELPA might be using something
older, like &lt;code&gt;emacs-24.3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So I want to run my tests on both versions. Also, even for just one
version, the tests need to be run in a minimum environment, i.e. with
only the dependencies loaded, so that my personal configuration does
not interfere with the tests.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;cask&lt;/code&gt; actually shines: it can bootstrap a whole new
&lt;code&gt;.emacs.d&lt;/code&gt;, separate from your own, just for running tests.  It can do
it on your machine as well as on Travis CI.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my &lt;code&gt;Cask&lt;/code&gt; file for &lt;code&gt;lispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(source gnu)
(source melpa)

(package-file &amp;quot;lispy.el&amp;quot;)

(files &amp;quot;*.el&amp;quot; (:exclude &amp;quot;init.el&amp;quot; &amp;quot;lispy-test.el&amp;quot;))

(development
 (depends-on &amp;quot;helm&amp;quot;)
 (depends-on &amp;quot;ace-jump-mode&amp;quot;)
 (depends-on &amp;quot;noflet&amp;quot;)
 (depends-on &amp;quot;iedit&amp;quot;)
 (depends-on &amp;quot;multiple-cursors&amp;quot;)
 (depends-on &amp;quot;cider&amp;quot;)
 (depends-on &amp;quot;slime&amp;quot;)
 (depends-on &amp;quot;geiser&amp;quot;)
 (depends-on &amp;quot;projectile&amp;quot;)
 (depends-on &amp;quot;s&amp;quot;)
 (depends-on &amp;quot;highlight&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s the &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; emacs
&lt;span class=&quot;c&quot;&gt;# EMACS = emacs-24.3&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~/.cask/bin/cask
&lt;span class=&quot;nv&quot;&gt;CASKEMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -l lispy-inline.el -l lispy.el -l lispy-test.el

&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell &lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -q  &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; lispy.el &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --eval &lt;span class=&quot;s2&quot;&gt;&amp;quot;(progn (mapc #&amp;#39;byte-compile-file &amp;#39;(\&amp;quot;lispy.el\&amp;quot; \&amp;quot;lispy-inline.el\&amp;quot; \&amp;quot;le-clojure.el\&amp;quot; \&amp;quot;le-scheme.el\&amp;quot; \&amp;quot;le-lisp.el\&amp;quot;)) (switch-to-buffer \&amp;quot;*Compile-Log*\&amp;quot;) (ert t))&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -f ert-run-tests-batch-and-exit

&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    rm -f *.elc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Makefile&lt;/code&gt; has two separate testing targets: an
interactive one (&lt;code&gt;compile&lt;/code&gt;) and a non-interactive one (&lt;code&gt;test&lt;/code&gt;).
There&amp;#39;s actually some validity to this, since it happened once that
the same tests we failing in non-interactive mode, but passing in
interactive mode. Also, &lt;code&gt;compile&lt;/code&gt; obviously compiles, testing for
compilation warnings/errors.  I can change the Emacs version at the
top, although I don&amp;#39;t have to do it too often.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;language: emacs-lisp
env:
  matrix:
    - EMACS=emacs24

before_install:
  - sudo add-apt-repository -y ppa:cassou/emacs
  - sudo apt-get update -qq
  - sudo apt-get install -qq $EMACS
  - curl -fsSkL --max-time 10 --retry 10 --retry-delay 10 https://raw.github.com/cask/cask/master/go | python

script:
  - make cask
  - make test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So each time I push a change to github, Travis CI will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install emacs24&lt;/li&gt;
&lt;li&gt;install cask&lt;/li&gt;
&lt;li&gt;install the packages from MELPA:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ace-jump-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noflet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iedit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiple-cursors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geiser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;projectile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;load Emacs with these packages&lt;/li&gt;
&lt;li&gt;load &lt;code&gt;lispy-test.el&lt;/code&gt; and run it&lt;/li&gt;
&lt;li&gt;show up green if &lt;code&gt;make test&lt;/code&gt; returned &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems a bit wasteful, but it&amp;#39;s &lt;a href=&quot;http://xkcd.com/908/&quot;&gt;the Cloud&lt;/a&gt; - what can you do?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;upon even further investigation, the test itself was broken for almost a year, since &lt;code&gt;lispy-with-clojure&lt;/code&gt; should have been used instead of &lt;code&gt;lispy-with&lt;/code&gt;, but &lt;code&gt;cider&lt;/code&gt; was changing the indentation of &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; also for &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, so things were kind of working out&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Easy helm improvement</title>
   <link href="http://oremacs.com/2014/12/21/helm-backspace/"/>
   <updated>2014-12-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/21/helm-backspace</id>
   <content type="html">&lt;p&gt;When you press &lt;kbd&gt;DEL&lt;/kbd&gt; (also known as backspace) in a &lt;code&gt;helm&lt;/code&gt;
buffer, and there isn&amp;#39;t any input to delete, it only errors at you
with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Text is read only&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why not make it do something useful instead, for instance close &lt;code&gt;helm&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Easy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-backspace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Forward to `backward-delete-char&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;On error (read-only), quit without selecting.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-delete-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;helm-keyboard-quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Poyekhali!</title>
   <link href="http://oremacs.com/2014/12/20/poyekhali!/"/>
   <updated>2014-12-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/20/poyekhali!</id>
   <content type="html">&lt;p&gt;Welcome to &lt;b&gt;&lt;code&gt;(or emacs&lt;/code&gt;&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;My name is Oleh and I&amp;#39;ve been using Emacs for about 3 years now.  I
think that it&amp;#39;s an awesome editor, and I&amp;#39;ve accumulated some know-how
to make it even better (at least for me and people who think like me).
Sharing is caring, so here we go.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;ace-window&lt;/code&gt; update&lt;/h2&gt;

&lt;p&gt;On this weekend I&amp;#39;ve made a major update to my package
&lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; that allows it to
be used as a library. Luckily the change went smoothly, as there are
no complaints in the github issues so far.  In case you don&amp;#39;t know
what the package does in the first place, a short blurb follows.&lt;/p&gt;

&lt;h2&gt;&lt;code&gt;ace-window&lt;/code&gt;&amp;#39;s &amp;quot;what and why&amp;quot;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re aware of the &lt;code&gt;other-window&lt;/code&gt; command. While it&amp;#39;s great for
two windows, it quickly loses its value when there are more windows:
you need to call it many times, and since it&amp;#39;s not easily predictable,
you have to check each time if you&amp;#39;re in the window that you wanted.&lt;/p&gt;

&lt;p&gt;Another approach is to use &lt;code&gt;windmove-left&lt;/code&gt;, &lt;code&gt;windmove-up&lt;/code&gt; etc.  These
are fast and predictable. Their disadvantage is that they need 4 key
bindings.  The default ones are shift+arrows, which are hard to reach.&lt;/p&gt;

&lt;p&gt;This package aims to take the speed and predictability of &lt;code&gt;windmove&lt;/code&gt;
and pack it into a single key binding, similar to &lt;code&gt;other-window&lt;/code&gt;.  To
achieve this, I&amp;#39;m using the excellent
&lt;a href=&quot;https://github.com/winterTTr/ace-jump-mode&quot;&gt;ace-jump-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how the package looks in action: &lt;a href=&quot;/download/ace-window.gif&quot;&gt;ace-window.gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since switching windows is a frequently used operation, I recommend
binding &lt;code&gt;ace-window&lt;/code&gt; to something short, like &lt;kbd&gt;M-p&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;By default, three actions are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt; - select window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u M-p&lt;/kbd&gt; - swap the current window with the selected window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u C-u M-p&lt;/kbd&gt; - delete the selected window&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;finally, the library part&lt;/h2&gt;

&lt;p&gt;So now, what if you want to select a window to maximize with &lt;code&gt;ace-window&lt;/code&gt;?
After the change that I&amp;#39;ve mentioned, the code to do this is dirt simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Ace maximize window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw--current-op&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj-position-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw--doit&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; Ace - Maximize Window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-maximize-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
