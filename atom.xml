<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>(or emacs</title>
 <link href="http://oremacs.com/atom.xml" rel="self"/>
 <link href="http://oremacs.com/"/>
 <updated>2015-01-20T15:12:19+01:00</updated>
 <id>http://oremacs.com</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>
   <title>Behold The Mighty Hydra!</title>
   <link href="http://oremacs.com/2015/01/20/introducing-hydra/"/>
   <updated>2015-01-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/20/introducing-hydra</id>
   <content type="html">&lt;p&gt;I managed to spike a lot of interest for sticky key bindings in my earlier post,
&lt;a href=&quot;/2015/01/14/repeatable-commands/&quot;&gt;Zoom in/out with style&lt;/a&gt;.
So now, I&amp;#39;ve refactored this method into a convenient library
&lt;a href=&quot;https://github.com/abo-abo/hydra&quot;&gt;hydra.el&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/Hydra.png&quot; alt=&quot;hydra&quot;&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-concept&quot;&gt;The Concept&lt;/h2&gt;

&lt;p&gt;This package can be used to tie related functions into a family of
short bindings with a common prefix - a Hydra.&lt;/p&gt;

&lt;p&gt;Once you summon the Hydra through the prefixed binding (the body + any
one head), all heads can be called in succession with only a short
extension.&lt;/p&gt;

&lt;p&gt;The Hydra is vanquished once Hercules, any binding that isn&amp;#39;t the
Hydra&amp;#39;s head, arrives.  Note that Hercules, besides vanquishing the
Hydra, will still serve his orignal purpose, calling his proper
command.  This makes the Hydra very seamless, it&amp;#39;s like a minor mode
that disables itself auto-magically.&lt;/p&gt;

&lt;h2 id=&quot;an-example&quot;&gt;An Example&lt;/h2&gt;

&lt;p&gt;This code will accomplish the task of the previous post:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt;&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, &lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt; is the Hydra&amp;#39;s body: you need to press it
only once, together with one of the heads (&lt;kbd&gt;g&lt;/kbd&gt; or
&lt;kbd&gt;l&lt;/kbd&gt;), to summon the Hydra.&lt;/p&gt;

&lt;p&gt;Afterwards, you can call the heads in succession without the body
prefix, i.e. &lt;kbd&gt;&amp;lt;f2&amp;gt; g g g l&lt;/kbd&gt; will work.  To vanquish the
Hydra, just call up Hercules: &lt;strong&gt;any&lt;/strong&gt; key binding that&amp;#39;s not
&lt;kbd&gt;g&lt;/kbd&gt; or &lt;kbd&gt;l&lt;/kbd&gt;, e.g. &lt;kbd&gt;C-f&lt;/kbd&gt; or whatever you
wanted to do.&lt;/p&gt;

&lt;p&gt;Note that you can still assign an unrelated binding to
e.g. &lt;kbd&gt;&amp;lt;f2&amp;gt; f&lt;/kbd&gt;: the Hydra &lt;em&gt;does not&lt;/em&gt; take over
&lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt;, only over &lt;kbd&gt;&amp;lt;f2&amp;gt; l&lt;/kbd&gt; and
&lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-infrastructure&quot;&gt;The Infrastructure&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;hydra-create&lt;/code&gt; will create new interactive functions for you with the proper docstrings:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hydra-&amp;lt;f2&amp;gt;-text-scale-increase is an interactive Lisp function.&lt;/p&gt;

&lt;p&gt;It is bound to &amp;lt;f2&amp;gt; g.&lt;/p&gt;

&lt;p&gt;(hydra-&amp;lt;f2&amp;gt;-text-scale-increase)&lt;/p&gt;

&lt;p&gt;Create a hydra with a &amp;quot;&amp;lt;f2&amp;gt;&amp;quot; body and the heads:&lt;/p&gt;

&lt;p&gt;&amp;quot;g&amp;quot;:    &lt;code&gt;text-scale-increase&lt;/code&gt;,&lt;/p&gt;
&amp;quot;l&amp;quot;:    &lt;code&gt;text-scale-decrease&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Call the head: &lt;code&gt;text-scale-increase&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;an-exciting-new-hydra:-move-window-splitter&quot;&gt;An exciting new Hydra: move window splitter&lt;/h2&gt;

&lt;p&gt;Zooming is old news, Hydra bundles a new application:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;hydra-examples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-example-move-window-splitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or in the expanded form (equivalent):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hydra-create&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;hydra-move-splitter-right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will allow you to move the window splitter, after you issue
&lt;kbd&gt;C-x 2&lt;/kbd&gt; or &lt;kbd&gt;C-x 3&lt;/kbd&gt; one or more times, with
e.g. &lt;kbd&gt;C-M-o&lt;/kbd&gt; &lt;kbd&gt;h h j k j l k l h&lt;/kbd&gt;.  You can, of
course, customize both the body and the heads of this Hydra to your
preferences.&lt;/p&gt;

&lt;p&gt;The docstrings for this Hydra look more impressive, too:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;hydra-C-M-o-move-splitter-up is an interactive Lisp function.&lt;/p&gt;

&lt;p&gt;It is bound to C-M-o k.&lt;/p&gt;

&lt;p&gt;(hydra-C-M-o-move-splitter-up)&lt;/p&gt;

&lt;p&gt;Create a hydra with a &amp;quot;C-M-o&amp;quot; body and the heads:&lt;/p&gt;

&lt;p&gt;&amp;quot;h&amp;quot;:    &lt;code&gt;hydra-move-splitter-left&lt;/code&gt;,&lt;/p&gt;
&amp;quot;j&amp;quot;:    &lt;code&gt;hydra-move-splitter-down&lt;/code&gt;,&lt;/p&gt;
&amp;quot;k&amp;quot;:    &lt;code&gt;hydra-move-splitter-up&lt;/code&gt;,&lt;/p&gt;
&amp;quot;l&amp;quot;:    &lt;code&gt;hydra-move-splitter-right&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Call the head: &lt;code&gt;hydra-move-splitter-up&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;I hope that you enjoy the new library and let me know when you invent
some novel and efficient Hydras. Happy hacking!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>lispy 0.21.0 is out</title>
   <link href="http://oremacs.com/2015/01/19/lispy.0.21.0-is-out/"/>
   <updated>2015-01-19T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/19/lispy.0.21.0-is-out</id>
   <content type="html">&lt;p&gt;The last release was more than a month ago, and there have been more
than 130 commits to master since then. Somehow, I&amp;#39;ve been dragging my
feet with this release: the (3 pages of)
&lt;a href=&quot;https://github.com/abo-abo/lispy/releases/tag/0.21.0&quot;&gt;release notes&lt;/a&gt;
were in the draft stage for 10 days now, while I kept committing on
top of them.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This project is my vision of efficient LISP editing. According to
Github, I started it more than a year ago, although the initial commit
already contained around 1000 lines of code. After a year, it&amp;#39;s more
than 100 interactive commands in 5000 lines of code and 1000 lines of
tests.&lt;/p&gt;

&lt;p&gt;Initially, I started the project because, while I wanted to learn
Paredit to get more efficient, I did not want to learn Paredit&amp;#39;s
cumbersome bindings. Having established a skeleton that allows to call
Paredit-like commands with plain letters, over time, I&amp;#39;ve tacked on
anything LISP-related here. In this way, it&amp;#39;s very similar to
&lt;code&gt;org-mode&lt;/code&gt;, which starts with an outline and TODO skeleton, and then
adds everything else in the world on top of that. Heck, I actually
tacked on &lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s outline features on top of &lt;code&gt;lispy&lt;/code&gt;: when at an
outline, &lt;kbd&gt;i&lt;/kbd&gt; is equivalent to &lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s &lt;kbd&gt;TAB&lt;/kbd&gt;, and
&lt;kbd&gt;I&lt;/kbd&gt; is equivalent to &lt;kbd&gt;S-tab&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Among the other packages with which &lt;code&gt;lispy&lt;/code&gt;
integrates/cooperates/coexists are: &lt;code&gt;edebug&lt;/code&gt;, &lt;code&gt;ediff&lt;/code&gt;, &lt;code&gt;eldoc&lt;/code&gt;, &lt;code&gt;ert&lt;/code&gt;,
&lt;code&gt;outline&lt;/code&gt;, &lt;code&gt;semantic&lt;/code&gt;, &lt;code&gt;semantic/db&lt;/code&gt;, &lt;code&gt;ace-jump-mode&lt;/code&gt;, &lt;code&gt;iedit&lt;/code&gt;,
&lt;code&gt;delsel&lt;/code&gt;, &lt;code&gt;helm&lt;/code&gt;, &lt;code&gt;multiple-cursors&lt;/code&gt;, &lt;code&gt;fancy-narrow&lt;/code&gt;, &lt;code&gt;projectile&lt;/code&gt;,
&lt;code&gt;god-mode&lt;/code&gt;, &lt;code&gt;auto-complete&lt;/code&gt;, &lt;code&gt;company&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;main-idea-behind-lispy&quot;&gt;Main idea behind &lt;code&gt;lispy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The idea is to have plain letters, like &lt;kbd&gt;h&lt;/kbd&gt; or &lt;kbd&gt;r&lt;/kbd&gt;,
call commands instead of self-inserting, but &lt;strong&gt;only if the point
position is such that you wouldn&amp;#39;t want to self-insert anyway&lt;/strong&gt;.  When
this situation occurs, I like to say &lt;a href=&quot;#evolution-of-special&quot;&gt;&amp;quot;the point is special&amp;quot;&lt;/a&gt;; this
shortcut is all over the code and the docs.&lt;/p&gt;

&lt;p&gt;This is a bit similar to &lt;code&gt;vi&lt;/code&gt;&amp;#39;s normal/insert states, but instead of
&amp;quot;holding&amp;quot; the current state in your head, it&amp;#39;s visible through &lt;em&gt;just
the point position&lt;/em&gt;.  And instead of having just the
&lt;kbd&gt;Esc&lt;/kbd&gt;/&lt;kbd&gt;i&lt;/kbd&gt; combination to toggle normal/insert state,
you can do it with &lt;strong&gt;any&lt;/strong&gt; command that moves point,
e.g. &lt;kbd&gt;C-f&lt;/kbd&gt;, or &lt;kbd&gt;C-a&lt;/kbd&gt;, or even any custom command
that you write. &lt;code&gt;lispy&lt;/code&gt; does provide &lt;kbd&gt;[&lt;/kbd&gt;, &lt;kbd&gt;]&lt;/kbd&gt;, and
&lt;kbd&gt;C-3&lt;/kbd&gt; key bindings for getting into special, but you are free
to use any other binding or command that you want.&lt;/p&gt;

&lt;p&gt;For instance, starting from this code and point position (which is already special):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you can move to the &lt;code&gt;when&lt;/code&gt; statement with &lt;kbd&gt;h&lt;/kbd&gt; (&lt;code&gt;lispy-right&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or you can remove the &lt;code&gt;when&lt;/code&gt; statement altogether with &lt;kbd&gt;r&lt;/kbd&gt; (&lt;code&gt;lispy-raise&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;cursor&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;/cursor&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;evaluate &lt;code&gt;(setq arg 2000)&lt;/code&gt; statement with &lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;lispy-eval&lt;/code&gt;); the result will be displayed in the echo area; works for multiple LISP dialects&lt;/li&gt;
&lt;li&gt;evaluate and insert with &lt;kbd&gt;E&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-insert&lt;/code&gt;); the actual value &lt;code&gt;2000&lt;/code&gt; will be inserted below the expression&lt;/li&gt;
&lt;li&gt;evaluate and replace with &lt;kbd&gt;xr&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-replace&lt;/code&gt;); the expression will be replaced with &lt;code&gt;2000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;copy the statement to the kill ring with &lt;kbd&gt;n&lt;/kbd&gt; (&lt;code&gt;lispy-new-copy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;delete the statement with &lt;kbd&gt;C-d&lt;/kbd&gt; (&lt;code&gt;lispy-delete&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert a copy of the statement below with &lt;kbd&gt;c&lt;/kbd&gt; (&lt;code&gt;lispy-clone&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;insert 3 copies of the statement below with &lt;kbd&gt;3c&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-clone&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move the statement on the previous line with &lt;kbd&gt;DEL&lt;/kbd&gt; (&lt;code&gt;lispy-delete-backward&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;mark the statement with &lt;kbd&gt;m&lt;/kbd&gt; (&lt;code&gt;lispy-mark-list&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;mark only &lt;code&gt;arg&lt;/code&gt; with &lt;kbd&gt;2m&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;get help for &lt;code&gt;setq&lt;/code&gt; with &lt;kbd&gt;xh&lt;/kbd&gt; (&lt;code&gt;lispy-describe&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;get help for &lt;code&gt;arg&lt;/code&gt; with &lt;kbd&gt;2mxh&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;, &lt;code&gt;lispy-describe&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;copy &lt;code&gt;2000&lt;/code&gt; to kill ring with &lt;kbd&gt;3mn&lt;/kbd&gt; (&lt;code&gt;digit-argument&lt;/code&gt;, &lt;code&gt;lispy-mark-list&lt;/code&gt;, &lt;code&gt;lispy-new-copy&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move the statement outside of &lt;code&gt;when&lt;/code&gt; with &lt;kbd&gt;oh&lt;/kbd&gt; (&lt;code&gt;lispy-other&lt;/code&gt;, &lt;code&gt;lispy-left&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;swap &lt;code&gt;(= arg 0)&lt;/code&gt; with &lt;code&gt;(setq arg 2000)&lt;/code&gt; with &lt;kbd&gt;w&lt;/kbd&gt; (&lt;code&gt;lispy-move-up&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;move it back with &lt;kbd&gt;s&lt;/kbd&gt; (&lt;code&gt;lispy-move-down&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;put the whole &lt;code&gt;when&lt;/code&gt; expression on one line with &lt;kbd&gt;hO&lt;/kbd&gt; (&lt;code&gt;lispy-left&lt;/code&gt;, &lt;code&gt;lispy-oneline&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;narrow the buffer to current sexp with &lt;kbd&gt;N&lt;/kbd&gt; (&lt;code&gt;lispy-narrow&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;widen the buffer with &lt;kbd&gt;W&lt;/kbd&gt; (&lt;code&gt;lispy-widen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a lot of other things, there are 52 plain letters, after all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that in the following code, the point is not special:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;wh&lt;cursor&gt;e&lt;/cursor&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so if you would type &lt;kbd&gt;h&lt;/kbd&gt;, it would not call &lt;code&gt;lispy-left&lt;/code&gt;, but would insert &amp;quot;h&amp;quot; instead, yielding &lt;code&gt;whhen&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to get the point into special before &lt;code&gt;(when&lt;/code&gt;, you can use either &lt;kbd&gt;C-a&lt;/kbd&gt; or &lt;kbd&gt;&amp;#91;&lt;/kbd&gt; or &lt;kbd&gt;C-M-a&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;to get the point into special after &lt;code&gt;arg 0)&lt;/code&gt;, you can use either &lt;kbd&gt;C-e&lt;/kbd&gt; or &lt;kbd&gt;&amp;#93;&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;to get the point into special after &lt;code&gt;2000))&lt;/code&gt;, you can use &lt;kbd&gt;C-3&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;evolution-of-special&quot;&gt;Evolution of special&lt;/h2&gt;

&lt;p&gt;Initially, the special state was only for the point before an open
paren or after a close paren, since you almost never-ever want to
insert characters at those positions. Over time, other point states
were added to special:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;region is active (supersedes
&lt;a href=&quot;https://github.com/magnars/expand-region.el&quot;&gt;expand-region&lt;/a&gt; for LISP
dialects)&lt;/li&gt;
&lt;li&gt;the point is at the start of a comment&lt;/li&gt;
&lt;li&gt;the point is at the start of an outline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Region selection is especially important, since it is super-useful for
manipulating (move, copy, eval, get-help, goto-definition) symbols
inside lists. Since these symbols aren&amp;#39;t delimited with parens, the
only way to get to them with special is though region selection.&lt;/p&gt;

&lt;p&gt;Happily, region selection will fix the largest source of Paredit
unbalanced paren errors: while using &lt;code&gt;lispy&lt;/code&gt; region-manipulating
commands, you can&amp;#39;t copy an unbalanced expression, and thus you can&amp;#39;t
yank an unbalanced expression. You just have to use &lt;kbd&gt;m&lt;/kbd&gt; and
&lt;kbd&gt;M-m&lt;/kbd&gt; instead of &lt;kbd&gt;C-SPC&lt;/kbd&gt;; and &lt;kbd&gt;h&lt;/kbd&gt;,
&lt;kbd&gt;j&lt;/kbd&gt;, &lt;kbd&gt;k&lt;/kbd&gt;, &lt;kbd&gt;l&lt;/kbd&gt;, &lt;kbd&gt;i&lt;/kbd&gt;,
&lt;kbd&gt;&amp;gt;&lt;/kbd&gt;, and &lt;kbd&gt;&amp;lt;&lt;/kbd&gt; instead of e.g. &lt;kbd&gt;C-f&lt;/kbd&gt; and
&lt;kbd&gt;M-f&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Since there are only 26 lower-case letters and 26 upper-case letters,
the state of the command bindings in &lt;code&gt;lispy&lt;/code&gt; quickly turned into
&lt;em&gt;survival of the fittest&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the commands that were used the most got the priority bindings of
lower case letters on the home row&lt;/li&gt;
&lt;li&gt;the second tier got the other lower-case bindings&lt;/li&gt;
&lt;li&gt;the third tier of commands were put on upper-case letters and on
&lt;kbd&gt;x&lt;/kbd&gt; + lower-case letters&lt;/li&gt;
&lt;li&gt;the fourth tier of commands are not bound at all, and I&amp;#39;m
considering to obsolete some of them, just to keep things simpler.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;add:-the-annoyance-driven-development&quot;&gt;ADD: the Annoyance-Driven Development&lt;/h2&gt;

&lt;p&gt;The other part of evolving and refining the commands, consisted of
noticing small annoyances for when some generic command wasn&amp;#39;t working
as intended, or it was working in a sub-optimal way in a certain
situation. After this, I would fix the command and put a test on it,
to make sure that the annoyance does not surface in the future.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-lisp-dialects&quot;&gt;Notes on LISP dialects&lt;/h2&gt;

&lt;p&gt;My priority is Elisp, since that&amp;#39;s what I&amp;#39;m using to implement
&lt;code&gt;lispy&lt;/code&gt;, but the following dialects are also supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clojure, via &lt;a href=&quot;https://github.com/clojure-emacs/cider&quot;&gt;CIDER&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Common Lisp, via &lt;a href=&quot;https://github.com/slime/slime&quot;&gt;SLIME&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Scheme, via &lt;a href=&quot;https://github.com/jaor/geiser&quot;&gt;Geiser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To be supported, all a LISP dialect needs is just to use &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;{&lt;/code&gt; or
&lt;code&gt;[&lt;/code&gt; as the opening delimiter; and &lt;code&gt;)&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; or &lt;code&gt;]&lt;/code&gt; as the closing
delimiter, no actual adaptations in the &lt;code&gt;lispy&lt;/code&gt; code are necessary.&lt;/p&gt;

&lt;p&gt;The only thing that needs to be implemented on a per-dialect basis is
the language-specific eval:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;lispy-eval&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;E&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-insert&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;xr&lt;/kbd&gt; (&lt;code&gt;lispy-eval-and-replace&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;xj&lt;/kbd&gt; (&lt;code&gt;lispy-debug-step-in&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, though the jump-to-definition functionality could be implemented
via CEDET, environments like SLIME can do it much better, so
&lt;kbd&gt;F&lt;/kbd&gt; (&lt;code&gt;lispy-follow&lt;/code&gt;) and &lt;kbd&gt;M-.&lt;/kbd&gt; (&lt;code&gt;lispy-goto-symbol&lt;/code&gt;) use the
appropriate environment&amp;#39;s facilities. Somehow, I still haven&amp;#39;t managed
to implement this for Geiser.&lt;/p&gt;

&lt;h2 id=&quot;drinking-from-the-lispy-fire-hose&quot;&gt;Drinking from the &lt;code&gt;lispy&lt;/code&gt; fire hose&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ll get you started with the most basic and composable commands
below.  You can find the rest in the
&lt;a href=&quot;http://oremacs.com/lispy/&quot;&gt;function reference&lt;/a&gt; or by just calling
&lt;kbd&gt;xv&lt;/kbd&gt; (&lt;code&gt;lispy-view-test&lt;/code&gt;) on &lt;code&gt;should&lt;/code&gt; statements of
&lt;a href=&quot;https://github.com/abo-abo/lispy/blob/master/lispy-test.el&quot;&gt;lispy-test.el&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/lispy-view-test.png&quot; alt=&quot;sample-test&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the screenshot above, I start with the code and point position on
the top. Then, after typing &lt;kbd&gt;miji&lt;/kbd&gt;, I should end up with the
state below: the point and mark position have moved. In this
particular situation, I could follow-up with &lt;kbd&gt;e&lt;/kbd&gt; to see the
value of &lt;code&gt;auto-mode-alist&lt;/code&gt;. Here&amp;#39;s how to decipher &lt;kbd&gt;miji&lt;/kbd&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;m&lt;/kbd&gt; - &lt;code&gt;lispy-mark-list&lt;/code&gt;: marks current expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-tab&lt;/code&gt; (mnemonic for &lt;em&gt;indent&lt;/em&gt; or &lt;em&gt;inner&lt;/em&gt;): marks the &lt;code&gt;car&lt;/code&gt; of current expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; - &lt;code&gt;lispy-down&lt;/code&gt; (vi shortcut to move down): moves the point and mark down by one sexp, selecting the quoted expression&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;i&lt;/kbd&gt; - &lt;code&gt;lispy-tab&lt;/code&gt;: selects the &lt;code&gt;car&lt;/code&gt; of the quoted expression, i.e. &lt;code&gt;auto-mode-alist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you see from the screenshot, I have &lt;code&gt;show-paren-mode&lt;/code&gt; always
on. It&amp;#39;s even on in the tests visualization!&lt;/p&gt;

&lt;h2 id=&quot;the-most-basic-lispy-commands:-the-arrows&quot;&gt;The most basic &lt;code&gt;lispy&lt;/code&gt; commands: the arrows&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;h&lt;/kbd&gt; is left&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;j&lt;/kbd&gt; is down&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;k&lt;/kbd&gt; is up&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;l&lt;/kbd&gt; is right&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The directions are literal only if you have your code properly
indented, with newlines after each sexp. Otherwise, it may be the case
that &lt;kbd&gt;j&lt;/kbd&gt; moves literally right, instead of down; still, it&amp;#39;s
down figuratively.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-digits&quot;&gt;arrows like digits&lt;/h3&gt;

&lt;p&gt;All of them take digit arguments, so that e.g. &lt;kbd&gt;5j&lt;/kbd&gt; is equivalent to &lt;kbd&gt;jjjjj&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;&lt;kbd&gt;h&lt;/kbd&gt; and &lt;kbd&gt;j&lt;/kbd&gt; maintain the guarantee of not exiting the
current list, so you can use e.g. &lt;kbd&gt;99j&lt;/kbd&gt; to move to the last
element, if your list length is smaller than 99.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-regions&quot;&gt;arrows like regions&lt;/h3&gt;

&lt;p&gt;When the region is active, the arrows move the mark appropriately with
the point. You can activate and deactivate the region by repeatedly
pressing &lt;kbd&gt;m&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;You can also mark a symbol with &lt;kbd&gt;M-m&lt;/kbd&gt;
(&lt;code&gt;lispy-mark-symbol&lt;/code&gt;). There&amp;#39;s no need to be in special for this
command to work. I call these type of bindings &lt;em&gt;global&lt;/em&gt;, while the
bindings that only work in special I call &lt;em&gt;local&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;arrows-like-outlines&quot;&gt;arrows like outlines&lt;/h3&gt;

&lt;p&gt;When located at the outline, &lt;kbd&gt;j&lt;/kbd&gt; will call
&lt;code&gt;outline-next-visible-heading&lt;/code&gt;, and &lt;kbd&gt;k&lt;/kbd&gt; will call
&lt;code&gt;outline-previous-visible-heading&lt;/code&gt;. &lt;kbd&gt;l&lt;/kbd&gt; will move to the
first list of the outline, while &lt;kbd&gt;h&lt;/kbd&gt; will jump between the
top-level sexp and the containing outline.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-a-different-side-of-the-expression&quot;&gt;switching to a different side of the expression&lt;/h3&gt;

&lt;p&gt;Arrows can&amp;#39;t do this easily; this can instead be done with
&lt;kbd&gt;d&lt;/kbd&gt; (&lt;code&gt;lispy-different&lt;/code&gt;). Works for lists and regions.&lt;/p&gt;

&lt;h2 id=&quot;moving-the-code-instead-of-moving-around-the-code&quot;&gt;Moving the code instead of moving around the code&lt;/h2&gt;

&lt;p&gt;The most basic commands are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;w&lt;/kbd&gt; is &lt;code&gt;lispy-move-up&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;s&lt;/kbd&gt; is &lt;code&gt;lispy-move-down&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These will &amp;quot;hold on&amp;quot; to the current expression while moving it in the
appropriate direction. There&amp;#39;s no need to worry to mess up with them,
since they cancel each other out perfectly.&lt;/p&gt;

&lt;p&gt;Note that, just like with the arrows, if you don&amp;#39;t have an opening or
closing delimiter to &amp;quot;grab&amp;quot;, you can mark a symbol &lt;kbd&gt;M-m&lt;/kbd&gt; to
be in special and use &lt;kbd&gt;w&lt;/kbd&gt; / &lt;kbd&gt;s&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;modified-arrows-can-move-too&quot;&gt;Modified arrows can move too&lt;/h2&gt;

&lt;p&gt;&lt;kbd&gt;o&lt;/kbd&gt; will modify the arrow keys temporarily, just for one
command, with a minor mode. You can think of it as making the arrows
move the point &lt;strong&gt;and&lt;/strong&gt; the sexp in the usual direction, instead of
moving just the point.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;ol&lt;/kbd&gt;: move current sexp outside of the parent list, forwards&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;oh&lt;/kbd&gt;: move current sexp outside of the parent list, backwards&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;oj&lt;/kbd&gt;: move current sexp inside the next list, making it the first element&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;ok&lt;/kbd&gt;: move current sexp inside the preceding list, making it the last element&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;extending-or-shrinking-the-current-list-or-region&quot;&gt;Extending or shrinking the current list or region&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;&amp;gt;&lt;/kbd&gt; (&lt;code&gt;lispy-slurp&lt;/code&gt;) grows the current list or region in the current direction by one sexp&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;&lt;/kbd&gt; (&lt;code&gt;lispy-barf&lt;/code&gt;) shrinks the current list or region in the current direction by one sexp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Similarly to &lt;kbd&gt;j&lt;/kbd&gt; and &lt;kbd&gt;k&lt;/kbd&gt;, these commands maintain
the guarantee of not exiting the parent list, so you can slurp until
the end of the list with e.g. &lt;kbd&gt;99&amp;gt;&lt;/kbd&gt;.&lt;/p&gt;

&lt;h2 id=&quot;outro&quot;&gt;Outro&lt;/h2&gt;

&lt;p&gt;This project is very far from being final, I&amp;#39;m expecting to reach
&lt;code&gt;0.99.0&lt;/code&gt; before getting to &lt;code&gt;1.0.0&lt;/code&gt;. The reason is that the package
aims to build intuition to the point of automation. For each small
step in that direction, every small bug is two steps back, since it
breaks the process of building intuition. So every possible situation
needs to be tested and bugs fixed until the package is finally ironed
out.&lt;/p&gt;

&lt;p&gt;While I do appreciate the
&lt;a href=&quot;https://github.com/abo-abo/lispy/stargazers&quot;&gt;stars&lt;/a&gt;, actually trying
to do things with &lt;code&gt;lispy&lt;/code&gt; and raising
&lt;a href=&quot;https://github.com/abo-abo/lispy/issues&quot;&gt;issues&lt;/a&gt; would help me a
great deal more. For instance, if you raise an issue like&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How can I generate a function call right after the function definition?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would say to just use &lt;kbd&gt;2mcol(&lt;/kbd&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mark the function name with &lt;kbd&gt;2m&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;clone region with &lt;kbd&gt;c&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;move region outside the function body with &lt;kbd&gt;ol&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;wrap the region with parens while deactivating it with &lt;kbd&gt;(&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this would be a sort of FAQ question / recipe already done there.&lt;/p&gt;

&lt;p&gt;Or you could raise an issue like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why doesn&amp;#39;t &lt;kbd&gt;F&lt;/kbd&gt; work for Racket?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I would say it&amp;#39;s because I haven&amp;#39;t implemented it yet, since it was
tricky.  But I&amp;#39;ll get to it, now that I see that there&amp;#39;s some interest
in &lt;code&gt;lispy&lt;/code&gt; from Racket users.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Sprucing up org-download</title>
   <link href="http://oremacs.com/2015/01/18/sprucing-up-org-download/"/>
   <updated>2015-01-18T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/18/sprucing-up-org-download</id>
   <content type="html">&lt;p&gt;My interest in &lt;a href=&quot;https://github.com/abo-abo/org-download&quot;&gt;org-download&lt;/a&gt;
was renewed today with
&lt;a href=&quot;http://thread.gmane.org/gmane.emacs.orgmode/93964&quot;&gt;this thread&lt;/a&gt; on
&lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s mailing list.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;org-download&lt;/code&gt; allows you to drag-and-drop an image from e.g. Firefox
or your own file system to an &lt;code&gt;org-mode&lt;/code&gt; buffer. When I originally
wrote it, I was taking a Chemistry course on
&lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;, which included homework and exams with a
lot of images. Doing the homework in a literate style with &lt;code&gt;org-mode&lt;/code&gt;,
I wanted the problems to be completely self-contained, and for that I
needed to save all the images from the website, preferably quickly, to
an &lt;code&gt;org-mode&lt;/code&gt; buffer. With a few hacks and some advice and
contributions from more experienced hackers, &lt;code&gt;org-download&lt;/code&gt; came to
be.&lt;/p&gt;

&lt;h2 id=&quot;today&amp;#39;s-commits&quot;&gt;Today&amp;#39;s commits&lt;/h2&gt;

&lt;p&gt;The main contribution from today&amp;#39;s commits was adding the code that
un-aliases images that point to HTML. I see a lot of these from the
people that I&amp;#39;m following on my Twitter,
&lt;a href=&quot;https://twitter.com/_abo_abo&quot;&gt;@&amp;#95;abo&amp;#95;abo&lt;/a&gt;. Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-download-img-regex-list&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;img +src=\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;img +\\(class=\&amp;quot;[^\&amp;quot;]+\&amp;quot;\\)? *src=\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;This regex is used to unalias links that look like images.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The html to which the links points will be searched for these&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;regexes, one by one, until one succeeds.  The found image address&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;will be used.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-download&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in &lt;code&gt;(org-download-image link)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;image-type-from-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;url-retrieve-synchronously&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-download-img-regex-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regexes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lnk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;link %s does not point to an image&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, &lt;code&gt;image-type-from-file-name&lt;/code&gt; is a built-in from &lt;code&gt;image.el&lt;/code&gt; that
decides if &lt;code&gt;link&lt;/code&gt; looks like an image file or not.&lt;/p&gt;

&lt;p&gt;As you can see, since I intend to use &lt;code&gt;link&lt;/code&gt; right after to be
transformed right now, I&amp;#39;m using &lt;code&gt;url-retrieve-synchronously&lt;/code&gt;, instead
of the asynchronous &lt;code&gt;url-retrieve&lt;/code&gt;. The other one is used by default
to download the actual image.&lt;/p&gt;

&lt;p&gt;Note the use of the &lt;code&gt;while&lt;/code&gt; / &lt;code&gt;pop&lt;/code&gt; combination for traversing a list.
I&amp;#39;ve seen it used in some places in the Emacs core, and I think it&amp;#39;s
pretty neat.&lt;/p&gt;

&lt;p&gt;Arranging the regular expressions into a list is necessary to give
priority to some regexes. For instance, the first element of
&lt;code&gt;org-download-img-regex-list&lt;/code&gt; should match e.g. an actual referred
image on Twitter, while the second element will match at least a
profile picture in the case when there is no referred image.&lt;/p&gt;

&lt;h2 id=&quot;visual-demo&quot;&gt;Visual demo&lt;/h2&gt;

&lt;p&gt;I think that I might have over-engineered the custom options of
&lt;code&gt;org-download&lt;/code&gt; a bit. Just to keep you motivated enough to figure them
out, here&amp;#39;s a link to
&lt;a href=&quot;https://www.youtube.com/watch?v=dAojpHR-6Uo&quot;&gt;a Youtube demo&lt;/a&gt; of the
fast clickety-clicking (the mouse usage), that comes after some
clackety-clacking (the customization).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Setting up Ediff</title>
   <link href="http://oremacs.com/2015/01/17/setting-up-ediff/"/>
   <updated>2015-01-17T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/17/setting-up-ediff</id>
   <content type="html">&lt;p&gt;Once you make Ediff bearable, it becomes wonderful.  At least this was
my experience. It&amp;#39;s a very good tool, but some of the defaults look
very poor to me.&lt;/p&gt;

&lt;h2 id=&quot;customizing-the-customize&quot;&gt;Customizing the &lt;code&gt;customize&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;First of all, I&amp;#39;ll list a macro that I&amp;#39;ve started to use for setting
custom variables:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This macro I&amp;#39;ve put together myself after searching though the code
base and not finding something similar; &lt;code&gt;custom-set-variables&lt;/code&gt; comes
close to what I want, or maybe &lt;code&gt;custom-initialize-changed&lt;/code&gt;.  Basically
all I want is a &lt;code&gt;setq&lt;/code&gt; that is aware of the &lt;code&gt;custom-set&lt;/code&gt; property of a
variable. If you know such a macro, please let me know.&lt;/p&gt;

&lt;h2 id=&quot;changing-some-ediff-options&quot;&gt;Changing some Ediff options&lt;/h2&gt;

&lt;p&gt;Now, that I&amp;#39;ve explained the custom setter (by the way, using
&lt;code&gt;custom-set-variables&lt;/code&gt; is absolutely equivalent to &lt;code&gt;csetq&lt;/code&gt;), here are
my changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Don&amp;#39;t use the weird setup with the control panel in a separate
frame.  I can manage windows in Emacs much better than my desktop
(Unity or Gnome Shell) can manage the Emacs frames.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-window-setup-function &amp;#39;ediff-setup-windows-plain)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Split the windows horizontally instead of vertically. This way, it&amp;#39;s
much easier to follow the changes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-split-window-function &amp;#39;split-window-horizontally)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ignore white space. I don&amp;#39;t write a lot of Python, so I don&amp;#39;t care
about the white space in the diffs. At the same time, I re-format any
LISP code that I edit to my liking, and I want to see only the
important changes in the diff, and not the whitespace nonsense.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(csetq ediff-diff-options &amp;quot;-w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;changing-some-ediff-key-bindings&quot;&gt;Changing some Ediff key bindings&lt;/h2&gt;

&lt;p&gt;This is just the standard stuff that I like to do for each mode that
does not self-insert: assign &lt;kbd&gt;j&lt;/kbd&gt; to move down, and
&lt;kbd&gt;k&lt;/kbd&gt; to move up.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ora-ediff-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ediff-setup-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ediff-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-next-difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ediff-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-previous-difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ora-ediff-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;restoring-the-windows-after-ediff-quits&quot;&gt;Restoring the windows after Ediff quits&lt;/h2&gt;

&lt;p&gt;When you quit an Ediff session with &lt;kbd&gt;q&lt;/kbd&gt;, it just leaves the
two diff windows around, instead of restoring the window configuration
from when Ediff was started. Here&amp;#39;s the (slightly hacky) code to
restore the old window configuration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;winner-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ediff-after-quit-hook-internal&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;winner-undo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;list-of-ways-that-i-use-to-invoke-ediff&quot;&gt;List of ways that I use to invoke Ediff&lt;/h2&gt;

&lt;h3 id=&quot;from-magit&quot;&gt;from &lt;code&gt;magit&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In 80% of the cases, I call Ediff with &lt;kbd&gt;e&lt;/kbd&gt; (&lt;code&gt;magit-ediff&lt;/code&gt;) from
&lt;code&gt;magit-status-mode&lt;/code&gt;. This gives me a better overview of the changes,
especially when I want to revert stuff with either &lt;kbd&gt;a&lt;/kbd&gt;
(&lt;code&gt;ediff-copy-A-to-B&lt;/code&gt;) or &lt;kbd&gt;b&lt;/kbd&gt; (&lt;code&gt;ediff-copy-B-to-A&lt;/code&gt;). Probably
with &lt;kbd&gt;a&lt;/kbd&gt;, since &lt;a href=&quot;https://github.com/magit/magit&quot;&gt;magit&lt;/a&gt; seems
to consistently put the &lt;code&gt;@{index}&lt;/code&gt; file into the &lt;code&gt;A&lt;/code&gt; diff window, and
the current file into the &lt;code&gt;B&lt;/code&gt; window.&lt;/p&gt;

&lt;p&gt;So if I&amp;#39;m looking at a diff (to which I navigated with
&lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt;), I can revert it with &lt;kbd&gt;a&lt;/kbd&gt;. At this
point, the diff region in the current file will become equal to that
of the index file. But it will not be saved yet. If I want to save the
current file in the &lt;code&gt;B&lt;/code&gt; window, I can do it with &lt;kbd&gt;wb&lt;/kbd&gt;
(&lt;code&gt;ediff-save-buffer&lt;/code&gt;). After a revert, it&amp;#39;s also useful to call
&lt;kbd&gt;!&lt;/kbd&gt;(&lt;code&gt;ediff-update-diffs&lt;/code&gt;), which will remove the zero-length
diffs and update the diff-count in the mode-line.&lt;/p&gt;

&lt;h3 id=&quot;other-methods&quot;&gt;other methods&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ediff-buffers&lt;/code&gt; will diff two (different) buffers. If you happen to
have only two windows open with the appropriate buffers, you get them
as defaults and can choose them quickly with &lt;kbd&gt;RET&lt;/kbd&gt; &lt;kbd&gt;RET&lt;/kbd&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ediff-files&lt;/code&gt; is similar, but works on files instead. I like to just mark the appropriate files
in &lt;code&gt;dired&lt;/code&gt; with &lt;kbd&gt;m&lt;/kbd&gt;, then they also get auto-selected by &lt;code&gt;ediff-files&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ediff-current-file&lt;/code&gt; is useful to see the unsaved changes to the current file.
I rarely use it, since I have a compulsion to save every file every chance I get. There is little hope
to recover from this addiction, unless someone implements an analogue of &lt;a href=&quot;https://github.com/bbatsov/guru-mode&quot;&gt;guru-mode&lt;/a&gt;
that annoys you when you try to save a file. Actually, it&amp;#39;s not a bad idea - &lt;kbd&gt;C-x C-s&lt;/kbd&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;Oleh, you have saved this file &lt;code&gt;40 times&lt;/code&gt; in the last hour; the last
save was &lt;code&gt;0 minutes 34 seconds ago&lt;/code&gt;; since then, you&amp;#39;ve changed &lt;code&gt;27
bytes&lt;/code&gt; of information. Are you &lt;strong&gt;sure&lt;/strong&gt; you want to save &lt;code&gt;[y/N]&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Save before compile</title>
   <link href="http://oremacs.com/2015/01/16/compile-savely/"/>
   <updated>2015-01-16T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/16/compile-savely</id>
   <content type="html">&lt;p&gt;Here&amp;#39;s a very simplistic function that I was using for a while:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-and-compile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;make -j4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pop-to-buffer&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-error-last-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It will save the current buffer, run &lt;code&gt;compile&lt;/code&gt; and switch to
compilation buffer.&lt;/p&gt;

&lt;h2 id=&quot;compilation-customization&quot;&gt;Compilation customization&lt;/h2&gt;

&lt;p&gt;Turns out that there&amp;#39;s no need to save, since I get away with this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(setq compilation-ask-about-save nil)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The documentation says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Non-nil means M-x &lt;code&gt;compile&lt;/code&gt; asks which buffers to save before
compiling.  Otherwise, it saves all modified buffers without asking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;select-compilation-target&quot;&gt;Select compilation target&lt;/h2&gt;

&lt;p&gt;A year ago, I wrote a package that looks for a &lt;code&gt;Makefile&lt;/code&gt; in the
current directory, parses the available targets and allows you to
choose one with &lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt;.  It&amp;#39;s
called &lt;a href=&quot;https://github.com/abo-abo/helm-make&quot;&gt;helm-make&lt;/a&gt;.  It&amp;#39;s almost
the same as &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;compile&lt;/code&gt; (which also has completion for
targets), and it wraps around &lt;code&gt;compile&lt;/code&gt;, but I just find it to be more
convenient.&lt;/p&gt;

&lt;p&gt;This package is as simple as it sounds, the only customization that
you can do is to set &lt;code&gt;helm-make-do-save&lt;/code&gt; to save all open buffers
visiting the &lt;code&gt;Makefile&lt;/code&gt;&amp;#39;s directory. It also provides, in addition to
the plain &lt;code&gt;helm-make&lt;/code&gt; command, a &lt;code&gt;helm-make-projectile&lt;/code&gt; command, which
is almost the same, except the &lt;code&gt;Makefile&lt;/code&gt; should come not from the
current directory but from &lt;code&gt;projectile-project-root&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;some-error-navigation-to-go-with-your-compilation&quot;&gt;Some error navigation to go with your compilation&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve had these bindings for a very long time, just making sure
that you&amp;#39;re aware of these commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[f6]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;next-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[C-f6]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;previous-error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These bindings work for &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;occur&lt;/code&gt; and &lt;code&gt;rgrep&lt;/code&gt; as well.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>C++ - a dot inserts last var plus dot</title>
   <link href="http://oremacs.com/2015/01/15/c++-smart-dot/"/>
   <updated>2015-01-15T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/15/c++-smart-dot</id>
   <content type="html">&lt;p&gt;It is very much in the spirit of C++ to pull an object into existence
with e.g. a constructor definition and then poke and prod it with
various method calls. Most of the time, the dot will have the object
name on the left. So why not automatically insert the object name each
time I press the dot? Below, I&amp;#39;ll show a code that does exactly that.&lt;/p&gt;

&lt;h2 id=&quot;the-dot-command&quot;&gt;The dot command&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-smart-dot&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Insert a dot or an object name plus dot when appropriate.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c++-get-recent-var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;var-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is pretty simple: if we are at the beginning of the line,
optionally with some spaces or (ugh) tabs before the point, then try
to insert the object name along with a dot.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how to bind it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cc-mode&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;c++-smart-dot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-to-get-the-recent-variable&quot;&gt;How to get the recent variable&lt;/h2&gt;

&lt;p&gt;This code doesn&amp;#39;t aim to be thorough, it&amp;#39;s just a hack that
works reasonably well.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[A-Za-z][A-Za-z0-9_]*&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;The regex for C++ variable name.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-get-recent-var&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return the closest thing that looks like an object.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The search is performed backwards through code.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable dot chain&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; \\(%s\\)\\.%s.*\n[\t ]*&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable constructor init&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*&amp;quot;&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;c1&quot;&gt;;; variable dot, first on line&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*\\(%s\\)\\.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you&amp;#39;re a stickler for performance and you don&amp;#39;t want to call format a bunch of times,
you can amend the code like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defalias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;c++-get-recent-var&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;byte-compile&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable dot chain&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot; \\(%s\\)\\.%s.*\n[\t ]*&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable constructor init&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&amp;quot;[\t ]+\\(%s\\)\\(?:([^)]*)\\)?;[\t\n ]*&amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;c1&quot;&gt;;; variable dot, first on line&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^[ \t]*\\(%s\\)\\.&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c++-var-regex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string-no-properties&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return the closest thing that looks like an object.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;The search is performed backwards through code.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The thing above looks slightly ugly. I&amp;#39;m open to suggestions to make
it look nicer.&lt;/p&gt;

&lt;h2 id=&quot;the-sample-application&quot;&gt;The sample application&lt;/h2&gt;

&lt;p&gt;For the happy people that have never seen C++:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-C++&quot; data-lang=&quot;C++&quot;&gt;&lt;span class=&quot;n&quot;&gt;DataOut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach_dof_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dof_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_data_vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;u&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;data_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, after defining an object &lt;code&gt;data_out&lt;/code&gt;, I insert it subsequently
with just &lt;kbd&gt;.&lt;/kbd&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Zoom in / out with style</title>
   <link href="http://oremacs.com/2015/01/14/repeatable-commands/"/>
   <updated>2015-01-14T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/14/repeatable-commands</id>
   <content type="html">&lt;p&gt;I don&amp;#39;t usually zoom a lot, typically I do it to size up other
people&amp;#39;s functions. Then, I zoom-out a couple times in a row until the
function fits on the screen. Sometimes, I overshoot the zoom-out, and
I have to zoom-in instead. I have &lt;code&gt;text-scale-increase&lt;/code&gt; bound to
&lt;kbd&gt;&amp;lt;f2&amp;gt; g&lt;/kbd&gt; and &lt;code&gt;text-scale-decrease&lt;/code&gt; bound to
&lt;kbd&gt;&amp;lt;f2&amp;gt; l&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;Below, I&amp;#39;ll demonstrate how to call those two commands interchangeably
with e.g. &lt;kbd&gt;&amp;lt;f2&amp;gt; g g g l g g l&lt;/kbd&gt;, i.e. omitting the
&lt;kbd&gt;&amp;lt;f2&amp;gt;&lt;/kbd&gt; prefix.&lt;/p&gt;

&lt;h2 id=&quot;define-repeatable-command&quot;&gt;Define repeatable command&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return a lambda that calls the first function of ALIST.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;It sets the transient map to all functions of ALIST.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lexical-let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-sparse-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cdar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-transient-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;keymap&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a pretty simple function that takes an alist of keys and
commands, and returns a lambda that calls the first command and sets
the transient map to call the first and other commands.  The way the
transient map works, it takes priority over almost all maps, but
disappears as soon as you press something that doesn&amp;#39;t belong to it.&lt;/p&gt;

&lt;h2 id=&quot;the-zoom-in-/-zoom-out-use-case&quot;&gt;The zoom-in / zoom-out use case&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt; g&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;lt;f2&amp;gt; l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;def-rep-command&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-decrease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;g&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;text-scale-increase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And this is it. A nice thing about this setup is that I don&amp;#39;t have to
think about the zoom state and quitting it: I&amp;#39;ll quit it automatically
as soon as I press anything other than &lt;kbd&gt;l&lt;/kbd&gt; or &lt;kbd&gt;g&lt;/kbd&gt;.
Moreover, the command that exited the zoom state will be executed as
usual.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Even more dired options</title>
   <link href="http://oremacs.com/2015/01/13/dired-options/"/>
   <updated>2015-01-13T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/13/dired-options</id>
   <content type="html">&lt;p&gt;I&amp;#39;ve been posting a lot about &lt;code&gt;dired&lt;/code&gt; lately, and with good cause.  A
lot of people say that &lt;code&gt;org-mode&lt;/code&gt; is the killer app of Emacs, but
&lt;code&gt;dired&lt;/code&gt; should be in that group as well, especially if you count
&lt;code&gt;tramp&lt;/code&gt; as part of &lt;code&gt;dired&lt;/code&gt;. Below, I&amp;#39;ll list a few dired options in my
config that deviate from the defaults.&lt;/p&gt;

&lt;h2 id=&quot;dired-listing-switches&quot;&gt;&lt;code&gt;dired-listing-switches&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the essence of what &lt;code&gt;dired&lt;/code&gt; presents and how it presents it.
A great thing about it is that these are just the &lt;code&gt;ls&lt;/code&gt; switches, so
you can look them up with &lt;code&gt;info ls&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-listing-switches&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-laGh1v --group-directories-first&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: Is the only mandatory one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Means to list invisible files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: Don&amp;#39;t show group information. These days, when there are more
laptops than people, the group info is rarely useful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h&lt;/code&gt;: Human readable sizes, such as &lt;strong&gt;M&lt;/strong&gt; for mebibytes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1v&lt;/code&gt;: Affects the sorting of digits, hopefully in a positive way.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--group-directories-first&lt;/code&gt;: self-explanatory, I like to have the directories on the top,
separate from the files.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;on-recursion&quot;&gt;On recursion&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-recursive-copies&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-recursive-deletes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;always&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These settings make dired skip the confirmation when you copy or
delete a directory that contains other directories.  What&amp;#39;s the worse
that could happen, right?&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;diff-indicator-removed&quot;&gt;-  rm -rf /usr /lib/nvidia-current/xorg/xorg&lt;/span&gt;
&lt;span class=&quot;diff-indicator-added&quot;&gt;+  rm -rf /usr/lib/nvidia-current/xorg/xorg&lt;/span&gt;
&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>File sizes in dired</title>
   <link href="http://oremacs.com/2015/01/12/dired-file-size/"/>
   <updated>2015-01-12T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/12/dired-file-size</id>
   <content type="html">&lt;p&gt;Today, I&amp;#39;ll continue with the trend of posting a small piece of my
config when I don&amp;#39;t have the time to post something more substantial.&lt;/p&gt;

&lt;h2 id=&quot;some-code&quot;&gt;Some code&lt;/h2&gt;

&lt;p&gt;This one looks nice, although it only works on systems with &lt;code&gt;/usr/bin/du&lt;/code&gt;,
which actually comprise 100% of the systems that I use:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-get-size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-temp-buffer&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;call-process&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/usr/bin/du&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-sch&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;
       &lt;span class=&quot;s&quot;&gt;&amp;quot;Size of all marked files: %s&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-backward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\(^[0-9.,]+[A-Za-z]+\\).*total$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;match-string&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On doing a search, turns out that I got this code from
&lt;a href=&quot;http://www.emacswiki.org/emacs/DiredGetFileSize&quot;&gt;the wiki&lt;/a&gt; at some
point.  I can confirm that, unlike some of the other code on the wiki,
this one still works as advertised: you can use it on a directory or
on a series of marked files and directories.&lt;/p&gt;

&lt;h2 id=&quot;standard-dired-marking&quot;&gt;Standard &lt;code&gt;dired&lt;/code&gt; marking&lt;/h2&gt;

&lt;p&gt;In &lt;code&gt;dired&lt;/code&gt;, you can:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mark an item with &lt;kbd&gt;m&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;unmark an item with &lt;kbd&gt;DEL&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;inverse selection with &lt;kbd&gt;t&lt;/kbd&gt;&lt;/li&gt;
&lt;li&gt;unmark everything with &lt;kbd&gt;U&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Compared to this, the selection with the mouse and the control and
shift keys that many file browsers use looks like kindergarten.&lt;/p&gt;

&lt;p&gt;This new action, getting the size of marked things, I&amp;#39;ve bound to &lt;kbd&gt;z&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-get-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Making Elisp regex look nicer</title>
   <link href="http://oremacs.com/2015/01/11/pretty-elisp-regex/"/>
   <updated>2015-01-11T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/11/pretty-elisp-regex</id>
   <content type="html">&lt;p&gt;This is just a small improvement to make e.g.  &lt;code&gt;\\(&lt;/code&gt; show up in
regular expressions without the escape chars, but instead fontified
with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;. It doesn&amp;#39;t affect the underlying code
at all, just makes it look nicer. For the &lt;code&gt;\\|&lt;/code&gt; I chose &lt;code&gt;∨&lt;/code&gt; - the
&lt;em&gt;logical or&lt;/em&gt; character.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;glyph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;item&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;font-lock-keyword-face&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compose-region&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-beginning&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match-end&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;glyph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\|&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;∨&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\(&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;font-lock-add-keywords&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fontify-glyph&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\\\\\\\)&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-it-looks-like&quot;&gt;How it looks like&lt;/h2&gt;

&lt;p&gt;At first, I wanted to just inline &lt;a href=&quot;/download/elisp-regex.png&quot;&gt;a picture&lt;/a&gt;,
but then I thought that &lt;code&gt;htmlize-buffer&lt;/code&gt; would be able to handle it.
It didn&amp;#39;t, so I just edited a small snippet by hand:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;[^\n%|]*?&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;|&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;([^\n]*&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;?$&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;[^\n%|]*?&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;(&lt;/span&gt;%[^\n]*&lt;span class=&quot;nb&quot;&gt;)&lt;/span&gt;?$&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;#39;s really satisfying to see those escape chars vanish as I type in
a capture group in the regex, especially with the help of
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy-mode&lt;/a&gt;.
Here are some relevant tests for the regex support:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;a regex \\\\|\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;a regex \\\\(|\\\\)\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(|foo\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|foo\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(foo\\\\)|\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;foo|\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|\\\\(foo\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;|foo\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;\\\\(foo|\\\\)\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\C-d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;foo|\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>dired and ansi-term&#58; BFF</title>
   <link href="http://oremacs.com/2015/01/10/dired-ansi-term/"/>
   <updated>2015-01-10T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/10/dired-ansi-term</id>
   <content type="html">&lt;p&gt;In the comments to
&lt;a href=&quot;/2015/01/01/three-ansi-term-tips/&quot;&gt;my previous post on ansi-term&lt;/a&gt;, I discovered
&lt;a href=&quot;https://github.com/adamrt/sane-term&quot;&gt;sane-term&lt;/a&gt; - a package that
cycles though your terminals in Emacs, as well as implements some of
the tips that I gave. While it&amp;#39;s nice and all, and you should check it
out if you&amp;#39;re looking for something like that, it&amp;#39;s not really for
me. I will describe the system that I&amp;#39;m currently using below.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-best-list-length-for-cycling?&quot;&gt;What is the best list length for cycling?&lt;/h2&gt;

&lt;p&gt;In my opinion, it&amp;#39;s one or two. If it&amp;#39;s one, you&amp;#39;re not really
cycling, if it&amp;#39;s two, it&amp;#39;s fine. Anything more than that causes
stress, since you have to check each time if the outcome of the cycle
ended up being the one that you wanted.&lt;/p&gt;

&lt;p&gt;That&amp;#39;s why I usually have only one &lt;code&gt;*ansi-term*&lt;/code&gt; active in my Emacs
session at all times.  Here&amp;#39;s how it looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;terminal&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Switch to terminal. Launch if nonexistent.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;switch-to-buffer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;*ansi-term*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defalias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;tt&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At one point, I had &lt;code&gt;terminal&lt;/code&gt; bound to &lt;kbd&gt;C-t&lt;/kbd&gt;, until I found
a command even better suited for that binding, which was
&lt;a href=&quot;https://github.com/nonsequitur/smex/&quot;&gt;smex&lt;/a&gt;. The actual &lt;code&gt;terminal&lt;/code&gt;
command isn&amp;#39;t bound right now, I just launch it from &lt;code&gt;smex&lt;/code&gt; on very
rare occasions.&lt;/p&gt;

&lt;h2 id=&quot;how-i-launch-terminal-95%-of-the-time&quot;&gt;How I launch terminal 95% of the time&lt;/h2&gt;

&lt;p&gt;From &lt;code&gt;dired&lt;/code&gt; of course. The shell&amp;#39;s natural way of switching the
directory with &lt;code&gt;cd&lt;/code&gt; is extremely inefficient compared to &lt;code&gt;dired&lt;/code&gt;.  So
any time I want to have a shell in a specific directory, I first
navigate there with &lt;code&gt;dired&lt;/code&gt;, sometimes combined with
&lt;code&gt;ido-find-file&lt;/code&gt;. Then I get my current &lt;code&gt;*ansi-term*&lt;/code&gt; and tell it to
switch to the current &lt;code&gt;dired&lt;/code&gt; buffer&amp;#39;s directory with &lt;kbd&gt;`&lt;/kbd&gt;
binding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;`&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-open-term&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-open-term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Open an `ansi-term&amp;#39; that corresponds to current directory.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-current-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-string&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-remote-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tramp-dissect-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ssh %s@%s\n&amp;quot;&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;aref&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd &amp;#39;%s&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also have a similar &lt;code&gt;eshell&lt;/code&gt; setup, although I have yet to
comprehend why &lt;code&gt;eshell&lt;/code&gt; is great and am using &lt;code&gt;*ansi-term*&lt;/code&gt; most of the
time instead.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eshell-cmd&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd %s&amp;quot;&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt;
              &lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;how-i-launch-dired-100%-of-the-time&quot;&gt;How I launch &lt;code&gt;dired&lt;/code&gt; 100% of the time&lt;/h2&gt;

&lt;p&gt;With &lt;code&gt;dired-jump&lt;/code&gt;, of course. This command will examine your current
buffer&amp;#39;s &lt;code&gt;default-directory&lt;/code&gt; and open a &lt;code&gt;dired&lt;/code&gt; buffer there. All you
need is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;dired-jump&lt;/code&gt; command will be bound automatically to &lt;kbd&gt;C-x
C-j&lt;/kbd&gt;.  I have it also bound to &lt;kbd&gt;C-:&lt;/kbd&gt;, since that&amp;#39;s more
convenient to press with my keyboard layout.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also better in the common situation when I want to jump to a
&lt;code&gt;dired&lt;/code&gt; buffer from &lt;code&gt;*ansi-term*&lt;/code&gt;. In that situation, &lt;kbd&gt;C-x
C-j&lt;/kbd&gt; will not work by default, and will call &lt;code&gt;term-line-mode&lt;/code&gt;
instead. But it will work once you are in &lt;code&gt;term-line-mode&lt;/code&gt;.  You can
go back to the default &lt;code&gt;term-char-mode&lt;/code&gt; with &lt;kbd&gt;C-x C-k&lt;/kbd&gt;.  To
avoid this nonsense, just bind &lt;code&gt;dired-jump&lt;/code&gt; to some binding that&amp;#39;s
convenient for you and works from &lt;code&gt;*ansi-term*&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-i-do-when-i-need-more-than-one-terminal&quot;&gt;What I do when I need more than one terminal&lt;/h2&gt;

&lt;p&gt;Then I just name one: since the default one is supposed to be named
&lt;code&gt;*ansi-term*&lt;/code&gt;, if I create one named e.g. &lt;code&gt;*jekyll*&lt;/code&gt;, it will be
ignored by &lt;code&gt;dired-open-term&lt;/code&gt;. This is exactly what I want, since I just
create named terminals for long running processes like &lt;code&gt;jekyll serve&lt;/code&gt;.
And I can switch to the named terminals with just &lt;code&gt;ido-switch-buffer&lt;/code&gt;.
Here is the very simple code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;named-term&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;sName: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>tilde in ido-find-file</title>
   <link href="http://oremacs.com/2015/01/09/ido-find-file-tilde/"/>
   <updated>2015-01-09T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/09/ido-find-file-tilde</id>
   <content type="html">&lt;p&gt;On seeing
&lt;a href=&quot;http://emacs.stackexchange.com/questions/7193/how-to-replicate-the-to-home-to-root-behaviour-in-ido-find-file-but&quot;&gt;this Emacs Stack Exchange question&lt;/a&gt;,
it occurred to me that if some config code is old for me, it&amp;#39;s not old
for the new Emacs users. So I&amp;#39;ll share one of the old &lt;code&gt;ido-find-file&lt;/code&gt;
hacks that I&amp;#39;ve been using for ages.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This song is an oldie ...but, uh ... &lt;em&gt;pause&lt;/em&gt;
Well, it&amp;#39;s an oldie where I come from.&lt;/p&gt;

&lt;p&gt;-- &lt;cite&gt;Marty&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt;

&lt;p&gt;This is the original code that I was using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-set-current-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-exit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exit-minibuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-setup-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-ido-setup-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-generalization&quot;&gt;The generalization&lt;/h2&gt;

&lt;p&gt;It wouldn&amp;#39;t be a LISP if I couldn&amp;#39;t generalize the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Return a command that sends DIR to `ido-find-file&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-set-current-directory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-exit&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;exit-minibuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s how to leverage this generalization:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this is pretty ugly, implementation-wise, since
&lt;code&gt;ido-find-file-jump&lt;/code&gt; would be called three times each time you do an
&lt;code&gt;ido&lt;/code&gt; related command, like &lt;code&gt;ido-switch-buffer&lt;/code&gt; etc.
I would have preferred to do it like this instead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ido&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, for some strange reason, &lt;code&gt;ido&lt;/code&gt; keeps overriding
&lt;code&gt;ido-file-dir-completion-map&lt;/code&gt; and I actually have to re-set my
bindings in &lt;code&gt;ido-setup-hook&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-further-generalization&quot;&gt;The further generalization&lt;/h2&gt;

&lt;p&gt;Here is the final iteration of the code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setcar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-file-dir-completion-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
   &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-setup-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-ido-setup-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-customize-tricks&quot;&gt;The customize tricks&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Custom setters?&lt;br&gt;
In &lt;em&gt;my&lt;/em&gt; Elisp?&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s more likely than you think.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that the &lt;code&gt;mapc&lt;/code&gt; statement needs to be evaluated if I dynamically
modify &lt;code&gt;oleh-ido-shortcuts&lt;/code&gt;. This isn&amp;#39;t a problem for me, but if I
wanted to package a code like this, I would define
&lt;code&gt;oleh-ido-shortcuts&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defcustom&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/Dropbox/source/site-lisp/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/lispy/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;A list of directory-shortcut pairs for `ido-find-file&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;:set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-default&lt;/span&gt;
          &lt;span class=&quot;nv&quot;&gt;symbol&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stringp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-find-file-jump&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, this should work:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;setcar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rassoc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/worf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;oleh-ido-shortcuts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here, the appropriate lambda is auto-generated by using the &lt;code&gt;:set&lt;/code&gt;
property of &lt;code&gt;oleh-ido-shortcuts&lt;/code&gt;.
And &lt;code&gt;csetq&lt;/code&gt; is just a &lt;code&gt;customize&lt;/code&gt;-aware version of &lt;code&gt;setq&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defmacro&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;csetq&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;custom-set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;ss&quot;&gt;&amp;#39;,variable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>My org-protocol setup, part 2.</title>
   <link href="http://oremacs.com/2015/01/08/org-protocol-2/"/>
   <updated>2015-01-08T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/08/org-protocol-2</id>
   <content type="html">&lt;p&gt;This continues the code from &lt;a href=&quot;/2015/01/07/org-protocol-1/&quot;&gt;the part 1&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;org-handle-link-youtube&quot;&gt;&lt;code&gt;org-handle-link-youtube&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I tried to make the first call to &lt;code&gt;youtube-dl&lt;/code&gt; asynchronous, but it
wasn&amp;#39;t working out.  So for the current code, there&amp;#39;s still about a 2
second delay before the capture buffer appears.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;async&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link-youtube&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lexical-let*&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-trim&lt;/span&gt;
                   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shell-command-to-string&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;youtube-dl \&amp;quot;&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;
                     &lt;span class=&quot;s&quot;&gt;&amp;quot; -o \&amp;quot;%(title)s.%(ext)s\&amp;quot; --get-filename&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Downloads/Videos&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;expand-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-link-hook&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;
                 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;async-shell-command&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;youtube-dl \&amp;quot;%s\&amp;quot; -o \&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;full-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ent.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Videos&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some notes for people who want to learn more Elisp:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lexical-let*&lt;/code&gt; is needed to have &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;full-name&lt;/code&gt; visible in the &lt;code&gt;lambda&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-make-link-string&lt;/code&gt; is a nice utility command that escapes all sorts of
characters that &lt;code&gt;org-mode&lt;/code&gt; doesn&amp;#39;t like, e.g. brackets etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see my full &lt;code&gt;org-capture&lt;/code&gt; and &lt;code&gt;org-protocol&lt;/code&gt; setup
&lt;a href=&quot;https://github.com/abo-abo/org-fu&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>My org-protocol setup, part 1.</title>
   <link href="http://oremacs.com/2015/01/07/org-protocol-1/"/>
   <updated>2015-01-07T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/07/org-protocol-1</id>
   <content type="html">&lt;p&gt;I&amp;#39;m quite busy with a project today, so I can&amp;#39;t compose many words.
However, pasting and explaining some code is fine.  The basic idea is
creating TODO tasks in certain &lt;code&gt;org-mode&lt;/code&gt; files by clicking a link in
Firefox, thanks to
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/&quot;&gt;org-mode capture&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;org-protocol-starter&quot;&gt;&lt;code&gt;org-protocol&lt;/code&gt; starter&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-capture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;org-protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-protocol-default-template-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Link&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;* TODO %(org-wash-link)\nAdded: %U\n%(org-link-hooks)\n%?&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;org-capture-templates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org-wash-link&lt;/code&gt; should clear up some redundancies in the TODO&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-handle-link&lt;/code&gt; should open the appropriate file and heading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org-link-hooks&lt;/code&gt; should insert some extra information&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;org-wash-link&quot;&gt;&lt;code&gt;org-wash-link&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Basically, when I capture a question on
&lt;a href=&quot;http://stackoverflow.com/questions/tagged/emacs&quot;&gt;Stack Overflow&lt;/a&gt;, I
don&amp;#39;t want to see &lt;code&gt;- Stack Overflow -&lt;/code&gt; as part of the TODO string,
since the TODO itself is stored in &lt;code&gt;wiki/stack.org/* Questions&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-wash-link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;replace-regexp-in-string&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot; - Stack Overflow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-make-link-string&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;org-link-hooks&quot;&gt;&lt;code&gt;org-link-hooks&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is just a hack for passing information around that
functions from &lt;code&gt;org-handle-link&lt;/code&gt; can use.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hooks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;funcall&lt;/span&gt;
                 &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt;
                 &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-link-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;org-handle-link&quot;&gt;&lt;code&gt;org-handle-link&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is the heart of the setup.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-emacs&quot; data-lang=&quot;emacs&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-handle-link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;caar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-stored-links&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^https://www.youtube.com/&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-handle-link-youtube&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;string-match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;regexp-quote&lt;/span&gt;
                          &lt;span class=&quot;s&quot;&gt;&amp;quot;http://stackoverflow.com/&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;wiki/stack.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Questions&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;org-expand&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ent.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^\\*+ +Articles&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Youtube links will be handled with &lt;code&gt;org-handle-link-youtube&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Stack Overflow links will be stored in &lt;code&gt;wiki/stack.org/* Questions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;all other links will be stored in &lt;code&gt;ent.org/* Articles&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;#39;ll write down &lt;code&gt;org-handle-link-youtube&lt;/code&gt; in a later post, since I
would still like to sort out a few kinks with it. The main issue is
that I&amp;#39;m sending two requests to Youtube: one to download the video,
which is fine, since &lt;code&gt;async&lt;/code&gt; handles it; and other to get the title of
the video and put it in the heading. And this other request causes a
perceptible delay when capturing.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Rushing headlong</title>
   <link href="http://oremacs.com/2015/01/06/rushing-headlong/"/>
   <updated>2015-01-06T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/06/rushing-headlong</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;And you&amp;#39;re rushing headlong out of control...&lt;/p&gt;

&lt;p&gt;-- &lt;cite&gt;Brian May&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;#39;ve finally wrapped a piece of config that I was using for a while in
a package called &lt;a href=&quot;https://github.com/abo-abo/headlong&quot;&gt;headlong&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-does-it-do?&quot;&gt;What does it do?&lt;/h2&gt;

&lt;p&gt;It provides a macro called &lt;code&gt;headlong-with&lt;/code&gt; that modifies minibuffer
completion for the forms within it, making it faster in some
situations.  For instance:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headlong-with&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;completing-read&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Jump to bookmark: &amp;quot;&lt;/span&gt;
                  &lt;span class=&quot;nv&quot;&gt;bookmark-alist&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;headlong-with&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;read-extended-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But more importantly, it provides two commands that can use it
efficiently: &lt;code&gt;headlong-bookmark-jump&lt;/code&gt; and
&lt;code&gt;headlong-bookmark-jump-other&lt;/code&gt;. The second one is basically the same
as the first one, except it opens the bookmark with &lt;code&gt;pop-to-buffer&lt;/code&gt;,
i.e. in other window.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-completion-work?&quot;&gt;How does this completion work?&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s nothing fancy, you will just exit the minibuffer automatically as
soon as there is only one completion candidate left.
So it saves you &lt;strong&gt;one&lt;/strong&gt; keystroke, namely &lt;kbd&gt;RET&lt;/kbd&gt;.
How much is &lt;em&gt;one&lt;/em&gt; keystroke worth? It depends.&lt;/p&gt;

&lt;p&gt;If you arrange your bookmarks in a way that I do, with each one
starting with a different letter, it saves you 33% of the total
keystrokes.  For example, suppose I have:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;bookmark-jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;headlong-bookmark-jump&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I can jump to my bookmarked directory named &lt;code&gt;&amp;quot;s: sources&amp;quot;&lt;/code&gt; with
two methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;kbd&gt;RET&lt;/kbd&gt; &lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-o&lt;/kbd&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second method looks like it&amp;#39;s 33% shorter, but it feels like it&amp;#39;s
even more, since pressing &lt;kbd&gt;RET&lt;/kbd&gt; is harder than it should be
on most keyboards.&lt;/p&gt;

&lt;h2 id=&quot;why-is-this-cool?&quot;&gt;Why is this cool?&lt;/h2&gt;

&lt;p&gt;This is cool because you can implement your bookmarks as efficiently
as you would with just wrapping stuff with a &lt;code&gt;lambda&lt;/code&gt; and using
&lt;code&gt;global-set-key&lt;/code&gt;, except that you can view and edit the bindings with
&lt;code&gt;bookmark-bmenu-list&lt;/code&gt;, and quickly the update bookmark positions with
&lt;code&gt;bookmark-set&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I get when I call &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;bookmark-bmenu-list&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/bookmarks.png&quot; alt=&quot;bookmarks&quot;&gt;&lt;/p&gt;

&lt;p&gt;In the list above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;black bookmarks are files&lt;/li&gt;
&lt;li&gt;blue bookmarks are directories&lt;/li&gt;
&lt;li&gt;pink bookmarks are functions (you need &lt;code&gt;bookmark+&lt;/code&gt; for them)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The package should be available in MELPA soon.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Yet another youtube-dl interface for Emacs</title>
   <link href="http://oremacs.com/2015/01/05/youtube-dl/"/>
   <updated>2015-01-05T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/05/youtube-dl</id>
   <content type="html">&lt;p&gt;If you haven&amp;#39;t been living under a rock, you already know what
&lt;a href=&quot;https://www.youtube.com/&quot;&gt;Youtube&lt;/a&gt; is.  It&amp;#39;s a repository with videos of
varying degree of usefulness with a terrible media player tacked on.
Instead, I like to watch my videos in
&lt;a href=&quot;http://www.videolan.org/vlc/index.html&quot;&gt;VLC&lt;/a&gt;, which comes closest to
providing an Emacs-like experience among video players.&lt;/p&gt;

&lt;h2 id=&quot;useful-vlc-shortcuts&quot;&gt;Useful VLC shortcuts&lt;/h2&gt;

&lt;p&gt;Here is a list of shortcuts that really make me stick with VLC:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; - toggle full-screen&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;b&lt;/kbd&gt; - toggle audio track&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;n&lt;/kbd&gt; - toggle subtitle track&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;#93;&lt;/kbd&gt; - speed up play by &lt;code&gt;0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;#91;&lt;/kbd&gt; - slow down play by &lt;code&gt;0.1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-right&lt;/kbd&gt; - forward by 15 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-left&lt;/kbd&gt; - backward by 15 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-right&lt;/kbd&gt; - forward by 60 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-left&lt;/kbd&gt; - backward by 60 seconds&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-1&lt;/kbd&gt; - quarter of video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-2&lt;/kbd&gt; - half of video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-3&lt;/kbd&gt; - full video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-4&lt;/kbd&gt; - double video size&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-h&lt;/kbd&gt; - toggle mouse buttons&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So if you&amp;#39;re not watching instructional videos at &lt;code&gt;1.6&lt;/code&gt; speed,
or skipping the Simpsons intro sequence with &lt;kbd&gt;M-right&lt;/kbd&gt;, you&amp;#39;re missing out.&lt;/p&gt;

&lt;h2 id=&quot;from-youtube-to-vlc&quot;&gt;From Youtube to VLC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/rg3/youtube-dl/&quot;&gt;youtube-dl&lt;/a&gt; is an excellent command-line tool
for saving the videos from Youtube. It downloads the highest resolution at a usually
higher speed than Youtube&amp;#39;s player buffers. I&amp;#39;ve discovered it when I had to download
a bunch of lecture videos from &lt;a href=&quot;https://www.edx.org/&quot;&gt;edX&lt;/a&gt;.
You can install it with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo pip install youtube-dl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;one-emacs-script-to-rule-them-all&quot;&gt;One Emacs script to rule them all&lt;/h2&gt;

&lt;p&gt;I quickly tired of opening a shell, setting the directory, entering
the command, and pasting the link. So I wrote some Elisp code that does it for me.
It&amp;#39;s nothing too sophisticated, but I&amp;#39;ve been using this version for a couple months:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;youtube-dl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;current-kill&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;default-directory&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/Downloads&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ansi-term&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;term-send-string&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;concat&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;cd ~/Downloads &amp;amp;&amp;amp; youtube-dl &amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How it works:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Copy the link in Firefox&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;youtube-dl&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;#39;s it. A new &lt;code&gt;*ansi-term*&lt;/code&gt; will open with the task of downloading the video from the link
in the clipboard to &lt;code&gt;~/Downloads&lt;/code&gt;.
I don&amp;#39;t have to wait for the download to finish and can immediately open the video from &lt;code&gt;dired&lt;/code&gt;.
See &lt;a href=&quot;/2015/01/04/dired-nohup/&quot;&gt;the previous post&lt;/a&gt; for the description of
&lt;code&gt;dired&lt;/code&gt; process-starting setup. I can stack up multiple downloads at once if I wish in different
&lt;code&gt;*ansi-term*&lt;/code&gt;s.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is my script. There are many like it, but this one is mine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did an internet search before writing this post. Apparently many
others had the same idea of integrating &lt;code&gt;youtube-dl&lt;/code&gt; into Emacs.  You
can use mine or any other code to generate a setup that works for you.
For instance, for a while, instead of copy-pasting the URL and calling
&lt;code&gt;youtube-dl&lt;/code&gt; I used to just click the
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/&quot;&gt;org-mode capture&lt;/a&gt;
button in Firefox, and it would automatically create a &lt;code&gt;TODO&lt;/code&gt; item,
download the video, and put the link to the downloaded video in the
&lt;code&gt;TODO&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve dropped this workflow when
&lt;a href=&quot;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16737&quot;&gt;the yank bug&lt;/a&gt;
surfaced. I don&amp;#39;t yet have enough experience of working with Emacs&amp;#39;s C
code to fix it.  Although, according to this
&lt;a href=&quot;https://plus.google.com/u/0/+JorgenSch%C3%A4fer/posts/ZaZcunihGqc&quot;&gt;excellent rant&lt;/a&gt;,
fixing the bug is only half of the problem: getting it merged is hard.
I&amp;#39;ll see how it goes with &lt;a href=&quot;http://debbugs.gnu.org/cgi/bugreport.cgi?bug=19493&quot;&gt;my latest tiny patch&lt;/a&gt;.
So far it has been ignored, but it is only two days old as of now.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Start a process from dired</title>
   <link href="http://oremacs.com/2015/01/04/dired-nohup/"/>
   <updated>2015-01-04T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/04/dired-nohup</id>
   <content type="html">&lt;p&gt;Here are the standard &lt;code&gt;dired&lt;/code&gt; functions for starting processes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;!&lt;/kbd&gt; calls &lt;code&gt;dired-do-shell-command&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;amp;&lt;/kbd&gt; calls &lt;code&gt;dired-do-async-shell-command&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the second one is usually better than the first one, having the
benefit of not locking up Emacs, it&amp;#39;s still not convenient enough for
me. The reason is pretty simple: I want to keep the processes that I
started even when I close Emacs (like opened PDFs or videos).  This is
a non-issue for people with months-long &lt;code&gt;emacs-uptime&lt;/code&gt;, but for me an
Emacs session lasts on the order of hours, since I mess about with
Elisp a lot. Below, I&amp;#39;ll share some of my &lt;code&gt;dired&lt;/code&gt; process-related
customizations.&lt;/p&gt;

&lt;h2 id=&quot;ignore-running-processes-when-closing-emacs&quot;&gt;Ignore running processes when closing Emacs&lt;/h2&gt;

&lt;p&gt;Usually there&amp;#39;s nothing wrong with just killing a spawned process,
like an &lt;code&gt;ipython&lt;/code&gt; shell or something.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; add `flet&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-buffers-kill-emacs&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;around&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;no-query-kill-emacs&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Prevent \&amp;quot;Active processes exist\&amp;quot; query on exit.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;flet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;process-list&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ad-do-it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;guess-programs-by-file-extension&quot;&gt;Guess programs by file extension&lt;/h2&gt;

&lt;p&gt;With this setup, usually there&amp;#39;s no need to manually type in the
command name.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-guess-shell-alist-user&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.pdf\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;evince&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;okular&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:djvu\\|eps\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;evince&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;eog&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:xcf\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;gimp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.csv\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;libreoffice&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.tex\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;latex&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\&amp;#39;&amp;quot;&lt;/span&gt;
         &lt;span class=&quot;s&quot;&gt;&amp;quot;vlc&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.\\(?:mp3\\|flac\\)\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;rhythmbox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.html?\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;firefox&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;\\.cue?\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;audacious&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;add-nohup&quot;&gt;Add nohup&lt;/h2&gt;

&lt;p&gt;According to &lt;code&gt;info nohup&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;`nohup&amp;#39; runs the given COMMAND with hangup signals ignored, so that
the command can continue running in the background after you log
out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my case, it means that the processes started by Emacs can
continue running even when Emacs is closed.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-aux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-filelist-cmd&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vlc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;-L&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-start-process&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;&amp;amp;optional&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;
                 &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;current-prefix-arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-read-shell-command&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;amp; on %s: &amp;quot;&lt;/span&gt;
                                &lt;span class=&quot;nv&quot;&gt;current-prefix-arg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;start-process&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;shell-file-name&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;shell-command-switch&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;&amp;quot;nohup 1&amp;gt;/dev/null 2&amp;gt;/dev/null %s \&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;
                     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cadr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assoc&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-filelist-cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;list-switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;expand-file-name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file-list&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot; \&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;dired-filelist-cmd&lt;/code&gt; is necessary because &lt;code&gt;vlc&lt;/code&gt; weirdly
doesn&amp;#39;t make a playlist when given a list of files.&lt;/p&gt;

&lt;p&gt;Then I bind it to &lt;kbd&gt;r&lt;/kbd&gt; - a nice shortcut not bound
by default in &lt;code&gt;dired&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;dired-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;dired-start-process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Time flies</title>
   <link href="http://oremacs.com/2015/01/03/time-flies/"/>
   <updated>2015-01-03T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/03/time-flies</id>
   <content type="html">&lt;p&gt;This is the 15th post on this blog. Thankfully, no heart attacks after
the 13th one or anything.  So I&amp;#39;ll commemorate it with a post on
dealing with dates in &lt;code&gt;calc&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-much-time-has-passed-since-i-started-this-blog?&quot;&gt;How much time has passed since I started this blog?&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open &lt;code&gt;calc&lt;/code&gt; with &lt;kbd&gt;C-x **&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter &lt;code&gt;20 Dec 2014&lt;/code&gt; with &lt;kbd&gt;&amp;#39;&amp;lt;12 20 14&lt;/kbd&gt;&lt;kbd&gt;RET&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
1:  &amp;lt;Sat Dec 20, 2014&amp;gt;
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter current time with &lt;kbd&gt;tN&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  &amp;lt;Sat Dec 20, 2014&amp;gt;
1:  &amp;lt;11:56:27am Sat Jan 3, 2015&amp;gt;
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Subtract with &lt;kbd&gt;-&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
1:  -14.498044
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means that, if I want to maintain my one-post-per-day streak, I
still have half of a day to post this. Unfortunately, I have only an
old version of the blog repository on this machine, and the current
one is on a laptop at home. So I&amp;#39;ll post this in the evening.&lt;/p&gt;

&lt;h2 id=&quot;did-you-know-what-2015-looks-like-in-binary?&quot;&gt;Did you know what 2015 looks like in binary?&lt;/h2&gt;

&lt;p&gt;In your current &lt;code&gt;calc&lt;/code&gt; session,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter &lt;kbd&gt;2015&lt;/kbd&gt; &lt;kbd&gt;SPC&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -14.498044
1:  2015
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Switch to binary with &lt;kbd&gt;d2&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -2#1110.011111110111111111001111110001
1:  2#11111011111
.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wow, a palindrome. It&amp;#39;s too spooky, switch back to decimal with &lt;kbd&gt;d0&lt;/kbd&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- Emacs Calculator Mode ---
2:  -14.498044
1:  2015
    .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you&amp;#39;re new to &lt;code&gt;calc&lt;/code&gt;, you&amp;#39;ll probably wonder why you can&amp;#39;t enter
negative numbers with &lt;kbd&gt;-&lt;/kbd&gt;. It can be done with &lt;kbd&gt;_&lt;/kbd&gt;,
just like in
&lt;a href=&quot;http://www.jsoftware.com/help/primer/negative_number.htm&quot;&gt;J&lt;/a&gt;. Find
out more in the
&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_mono/calc.html&quot;&gt;info&lt;/a&gt;;
the
&lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_mono/calc.html#Tutorial&quot;&gt;interactive tutorial&lt;/a&gt;
is absolutely excellent.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Wrap a region with a LaTeX environment</title>
   <link href="http://oremacs.com/2015/01/02/wrap-with-latex/"/>
   <updated>2015-01-02T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/02/wrap-with-latex</id>
   <content type="html">&lt;p&gt;Prompted by &lt;a href=&quot;http://stackoverflow.com/questions/27736102/wrap-text-around-a-selection-in-emacs&quot;&gt;this StackOverflow question&lt;/a&gt;,
I wrote down a new package called &lt;a href=&quot;https://github.com/abo-abo/latex-wrap&quot;&gt;latex-wrap&lt;/a&gt;.
It&amp;#39;s only a few hours old, but I like it a lot.
I&amp;#39;ve grepped the sources of AUCTeX, and it doesn&amp;#39;t seem to have this functionality.&lt;/p&gt;

&lt;h2 id=&quot;here&amp;#39;s-how-it-works&quot;&gt;Here&amp;#39;s how it works&lt;/h2&gt;

&lt;p&gt;You start with an active region:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;region&gt;Homer
Marge
Bart
Lisa
Maggie&lt;cursor&gt; &lt;/cursor&gt;
&lt;/region&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After calling &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;latex-wrap-region&lt;/code&gt; and selecting
&lt;em&gt;enumerate&lt;/em&gt; from the list of environments (others being &lt;em&gt;itemize&lt;/em&gt;,
&lt;em&gt;center&lt;/em&gt; etc.), you get this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Homer
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Marge
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Bart
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Lisa
&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Maggie&lt;cursor&gt; &lt;/cursor&gt;
&lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;#39;s mark everything, &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;latex-wrap-region&lt;/code&gt;, and select
&lt;em&gt;center&lt;/em&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-latex&quot; data-lang=&quot;latex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;center&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\begin&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Homer
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Marge
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Bart
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Lisa
  &lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt; Maggie
  &lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;enumerate&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;&lt;cursor&gt; &lt;/cursor&gt;
&lt;span class=&quot;k&quot;&gt;\end&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;{&lt;/span&gt;center&lt;span class=&quot;nb&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, I want to make sure that it&amp;#39;s possible to conveniently
continue by always placing the point on the end of the last line of
the inserted environment.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works-with-no-active-region&quot;&gt;How it works with no active region&lt;/h2&gt;

&lt;p&gt;If &lt;code&gt;(looking-back &amp;quot;^ *&amp;quot;)&lt;/code&gt; is true, the current line is used as if it was
the region.  Otherwise, an empty environment is inserted after the
current line.&lt;/p&gt;

&lt;h2 id=&quot;using-the-code&quot;&gt;Using the code&lt;/h2&gt;

&lt;p&gt;If you like the idea, you can check out the code at
&lt;a href=&quot;https://github.com/abo-abo/latex-wrap&quot;&gt;github&lt;/a&gt; and test it out.  If
you know of another package that already does this, do let me know,
otherwise I&amp;#39;ll post the package on MELPA soon.  And if you have some
ideas, or want to add a few environments that I forgot to mention to
the list, just post
&lt;a href=&quot;https://github.com/abo-abo/latex-wrap/issues&quot;&gt;an issue&lt;/a&gt;, I don&amp;#39;t
bite.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three ansi-term tips</title>
   <link href="http://oremacs.com/2015/01/01/three-ansi-term-tips/"/>
   <updated>2015-01-01T00:00:00+01:00</updated>
   <id>http://oremacs.com/2015/01/01/three-ansi-term-tips</id>
   <content type="html">&lt;h2 id=&quot;tip-#1&quot;&gt;Tip #1&lt;/h2&gt;

&lt;p&gt;There&amp;#39;s no reason not to have &lt;code&gt;/bin/bash&lt;/code&gt; instead of &lt;code&gt;/bin/sh&lt;/code&gt; as the
default choice when you &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;term&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;explicit-shell-file-name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;tip-#2&quot;&gt;Tip #2&lt;/h2&gt;

&lt;p&gt;After you close the terminal, you get a useless buffer with no
process. It&amp;#39;s probably left there for you to have a history of what
you did. I find it not useful, so here&amp;#39;s a way to kill that buffer
automatically:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-term-exec-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-buffer-process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set-process-sentinel&lt;/span&gt;
     &lt;span class=&quot;nv&quot;&gt;proc&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;finished\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;kill-buffer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;buff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;term-exec-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-term-exec-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;tip-#3&quot;&gt;Tip #3&lt;/h2&gt;

&lt;p&gt;By default, &lt;kbd&gt;C-y&lt;/kbd&gt; calls term&amp;#39;s own &lt;code&gt;yank&lt;/code&gt;, which is different
from Emacs&amp;#39;s &lt;code&gt;yank&lt;/code&gt;.  So, until recently, I was using
&lt;kbd&gt;S-&amp;lt;insert&amp;gt;&lt;/kbd&gt; to paste stuff into &lt;code&gt;*term*&lt;/code&gt;. Here&amp;#39;s a
more ergonomic way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;term&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;term-raw-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-c C-y&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;term-paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>The keymap arms race</title>
   <link href="http://oremacs.com/2014/12/31/keymap-arms-race/"/>
   <updated>2014-12-31T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/31/keymap-arms-race</id>
   <content type="html">&lt;p&gt;Sometimes new Emacs packages have to fight for their place in the sun,
as all the good bindings and huge keymap areas are already taken by
the older packages. This post will cover some practical problems that
you may encounter when your package needs to be aware of another
active package.&lt;/p&gt;

&lt;h2 id=&quot;ace-window-vs.-helm&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt; vs. &lt;code&gt;helm&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/emacs-helm/helm&quot;&gt;helm&lt;/a&gt; is a wonderful package,
it&amp;#39;s my goto-package when I need completion. All of the following
packages use it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/function-args&quot;&gt;function-args&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/helm-make&quot;&gt;helm-make&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/worf&quot;&gt;worf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abo-abo/helm-j-cheatsheet&quot;&gt;helm-j-cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But &lt;code&gt;helm&lt;/code&gt; is super-greedy: once you&amp;#39;re in the &lt;code&gt;helm&lt;/code&gt;-minibuffer,
there&amp;#39;s no way out except either a successful completion or a cancel.
But exiting the minibuffer for a short while may be useful. For
instance, you could copy some text and yank it in the
&lt;code&gt;helm&lt;/code&gt;-minibuffer.  The default minibuffer functions, as well as &lt;code&gt;ido&lt;/code&gt;
easily allow it.&lt;/p&gt;

&lt;p&gt;I started to investigate into this when I got
&lt;a href=&quot;https://github.com/abo-abo/ace-window/issues/15&quot;&gt;issue #15: Does not work with helm in minibuffer&lt;/a&gt;
for &lt;code&gt;ace-window&lt;/code&gt;. I checked it, and indeed you could not &lt;code&gt;ace-window&lt;/code&gt;
out of a &lt;code&gt;helm&lt;/code&gt;-minibuffer. In fact, it was not possible to exit with
&lt;code&gt;other-window&lt;/code&gt; either. This looked like good news, since I had an
inkling that it used to work at some point. So I checked out a
year-old version of &lt;code&gt;helm&lt;/code&gt; and it did work.&lt;/p&gt;

&lt;h3 id=&quot;magit-bisect-to-the-rescue!&quot;&gt;&lt;code&gt;magit-bisect&lt;/code&gt; to the rescue!&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s very simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Check out the master of &lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Call &lt;code&gt;magit-bisect-start&lt;/code&gt; and mark &lt;code&gt;HEAD&lt;/code&gt; as &lt;em&gt;bad&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;magit&lt;/code&gt; will automatically check out a revision that is halfway
between a &lt;em&gt;bad&lt;/em&gt; state and the initial commit. Now I exit Emacs and try
&lt;code&gt;helm&lt;/code&gt; again to see if I can exit from the minibuffer.
It&amp;#39;s kind of lame to have to exit Emacs, but somehow I don&amp;#39;t trust
&lt;code&gt;unload-feature&lt;/code&gt; to do the right thing. Anyway, if the thing works,
move to &lt;code&gt;helm&lt;/code&gt;&amp;#39;s repository and call &lt;code&gt;magit-bisect-good&lt;/code&gt;, otherwise
call &lt;code&gt;magit-bisect-bad&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Continue this process until termination. I needed 10 iterations
in this case.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The culprit commit was &lt;a href=&quot;https://github.com/emacs-helm/helm/commit/61e85df&quot;&gt;this one&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;
&lt;span class=&quot;diff-context&quot;&gt;&lt;span class=&quot;region&quot;&gt;     (let* ((source (helm-get-current-source))
            (kmap (and (listp source) ; Check if source is empty.
                       (assoc-default 'keymap source))))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-indicator-removed&quot;&gt;&lt;span class=&quot;region&quot;&gt;-&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-removed&quot;&gt;&lt;span class=&quot;region&quot;&gt;      (when kmap (setq overriding-local-map kmap)))))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-indicator-added&quot;&gt;&lt;span class=&quot;region&quot;&gt;+&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;diff-added&quot;&gt;&lt;span class=&quot;region&quot;&gt;      (when kmap (set-transient-map kmap)))))&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-priority-of-maps&quot;&gt;the priority of maps&lt;/h3&gt;

&lt;p&gt;In Emacs, &lt;code&gt;set-transient-map&lt;/code&gt; has priority over
&lt;code&gt;overriding-local-map&lt;/code&gt;, which was exactly what &lt;code&gt;ace-window&lt;/code&gt; was using.
It&amp;#39;s also funny that &lt;code&gt;ace-window&lt;/code&gt; used to work with &lt;code&gt;helm&lt;/code&gt; for a week,
since it was published on &lt;code&gt;Mar 26&lt;/code&gt; and &lt;code&gt;helm&lt;/code&gt; switched to
&lt;code&gt;set-transient-map&lt;/code&gt; on &lt;code&gt;Apr 2&lt;/code&gt;. And I found out that it&amp;#39;s not working only
now.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what &lt;code&gt;helm&lt;/code&gt; is using currently:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fboundp&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;set-transient-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-transient-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set-temporary-overlay-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I&amp;#39;ve amended &lt;code&gt;ace-window&lt;/code&gt; with similar code. The way
&lt;code&gt;set-transient-map&lt;/code&gt; works, the last call to it overrides the previous
one, so I thought that it would work out since &lt;code&gt;ace-window&lt;/code&gt; is always
called after &lt;code&gt;helm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It didn&amp;#39;t work out, because &lt;code&gt;helm&lt;/code&gt; adds the code that calls
&lt;code&gt;set-transient-map&lt;/code&gt; to &lt;code&gt;post-command-hook&lt;/code&gt;.
In the end, this finally worked:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remove-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;post-command-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm--maybe-update-keymap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;lispy-vs.-slime-and-cider&quot;&gt;&lt;code&gt;lispy&lt;/code&gt; vs. &lt;code&gt;SLIME&lt;/code&gt; and &lt;code&gt;CIDER&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I thought that enabling &lt;code&gt;lispy-mode&lt;/code&gt; for &lt;code&gt;slime-repl-mode&lt;/code&gt; and
&lt;code&gt;cider-repl-mode&lt;/code&gt; might be a good idea.
Extra navigation options are always good, and the ability to
call &lt;code&gt;raise&lt;/code&gt; is just so useful.&lt;/p&gt;

&lt;p&gt;For instance, you start with:&lt;/p&gt;

&lt;pre&gt;
; SLIME 2014-11-28
&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;/span&gt;&lt;span class=&quot;slime-repl-old&quot;&gt;(expt (expt 2 10) 3)&lt;/span&gt;
&lt;span class=&quot;slime-repl-result&quot;&gt;&lt;span class=&quot;slime-repl-inputed-output&quot;&gt;1073741824&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;slime-repl-result&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;cursor&gt; &lt;/cursor&gt;&lt;/span&gt;&lt;/pre&gt;

&lt;p&gt;With &lt;code&gt;lispy-mode&lt;/code&gt; on you can: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt; to get the previous input&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;f&lt;/kbd&gt; to move the cursor after &lt;code&gt;(expt 2 10)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;r&lt;/kbd&gt; to raise &lt;code&gt;(expt 2 10)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here&amp;#39;s the final state:&lt;/p&gt;

&lt;pre&gt;
; SLIME 2014-11-28
&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt; &lt;/span&gt;&lt;span class=&quot;slime-repl-old&quot;&gt;(expt (expt 2 10) 3)&lt;/span&gt;
&lt;span class=&quot;slime-repl-result&quot;&gt;&lt;span class=&quot;slime-repl-inputed-output&quot;&gt;1073741824&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;slime-repl-result&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;slime-repl-prompt&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; (expt 2 10)&lt;cursor&gt; &lt;/cursor&gt;&lt;/pre&gt;

&lt;p&gt;But the problem was that SLIME has &lt;code&gt;slime-repl-map-mode&lt;/code&gt; minor mode on
that competes for &lt;code&gt;lispy&lt;/code&gt;&amp;#39;s shortcuts, and CIDER has something similar
as well.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;When two minor modes bind the same keys, which one wins?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The answer is the first one on &lt;code&gt;minor-mode-map-alist&lt;/code&gt;.
This function I&amp;#39;ve found on the &lt;a href=&quot;http://www.emacswiki.org/emacs/minor-mode-hack.el&quot;&gt;wiki&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-raise-minor-mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Make MODE the first on `minor-mode-map-alist&amp;#39;.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;minor-mode-map-alist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I didn&amp;#39;t want &lt;code&gt;lispy-mode&lt;/code&gt; to mess with &lt;code&gt;minor-mode-map-alist&lt;/code&gt; too
actively, so I went with this approach: if &lt;code&gt;lispy-mode&lt;/code&gt; is called
interactively, i.e. via a key binding or &lt;kbd&gt;M-x&lt;/kbd&gt;, put it ahead:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-mode&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;called-interactively-p&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;#&amp;#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-raise-minor-mode&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cons&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;lispy-mode&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;lispy-known-verbs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;#39;s still a work in progress, currently only &lt;code&gt;lispy&lt;/code&gt;&amp;#39;s &lt;kbd&gt;RET&lt;/kbd&gt;
properly yields to call &lt;code&gt;cider-repl-return&lt;/code&gt; and &lt;code&gt;slime-repl-return&lt;/code&gt;
respectively. I&amp;#39;ll see if there are more key bindings that need to
yield. Happy coding in the New Year!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Emacs Web Wowser (EWW) got ace-link</title>
   <link href="http://oremacs.com/2014/12/30/ace-link-eww/"/>
   <updated>2014-12-30T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/30/ace-link-eww</id>
   <content type="html">&lt;h2 id=&quot;emacs-goodness-incoming&quot;&gt;Emacs goodness incoming&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve discovered a nice Emacs-related blog -
&lt;a href=&quot;http://mbork.pl/Content_AND_Presentation&quot;&gt;Content AND Presentation&lt;/a&gt;.
Unlike &lt;a href=&quot;http://axisofeval.blogspot.nl&quot;&gt;The Axis of Eval&lt;/a&gt;, the blog
that I mentioned yesterday, this one is pretty self-contained, i.e. it
doesn&amp;#39;t link to many external information sources.  So I thought that
it&amp;#39;s perfect for trying EWW to read it.&lt;/p&gt;

&lt;h2 id=&quot;not-so-fast!-configure-first.&quot;&gt;Not so fast! Configure first.&lt;/h2&gt;

&lt;p&gt;For modes that don&amp;#39;t require to self-insert (and even for some that
do), I like to navigate with
&lt;kbd&gt;h&lt;/kbd&gt;/&lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt;/&lt;kbd&gt;l&lt;/kbd&gt; as arrows.  These
arrows are on the home row, so navigation becomes a pleasant and
relaxed experience.  But for EWW I decided to add a little twist: if
the point is in the first column, &lt;kbd&gt;j&lt;/kbd&gt;/&lt;kbd&gt;k&lt;/kbd&gt; will move
down/up not by one line, but by one paragraph.  This is great for
concentration: I navigate to a paragraph, read it, navigate to the
next one. The point shows me the paragraph that I&amp;#39;m reading,
everything before the point I&amp;#39;ve already read.  So every time I press
&lt;kbd&gt;j&lt;/kbd&gt;, I get a tiny warm feeling of accomplishment.
I can also pair this with &lt;kbd&gt;v&lt;/kbd&gt;, which I bind to recenter the
current line to the top.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s what my key setup currently looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-eww-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;j&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oww-down&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;k&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oww-up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;l&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;forward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;L&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-back-url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;h&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;backward-char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;v&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;recenter-top-bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-view-source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;m&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-follow-link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;move-beginning-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;e&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;move-end-of-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;y&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;add-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;eww-mode-hook&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;oleh-eww-hook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, I was careful to re-assign &lt;code&gt;eww-back-url&lt;/code&gt; and
&lt;code&gt;eww-view-source&lt;/code&gt; - the commands that I&amp;#39;ve displaced from &lt;kbd&gt;l&lt;/kbd&gt;
and &lt;kbd&gt;v&lt;/kbd&gt;.  And here&amp;#39;s the implementation of the arrows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oww-down&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-paragraph&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line-move&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oww-up&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;bolp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-paragraph&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;line-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;cherry-on-the-top&quot;&gt;Cherry on the top&lt;/h2&gt;

&lt;p&gt;And while I was at it, I&amp;#39;ve added &lt;a href=&quot;https://github.com/abo-abo/ace-link&quot;&gt;ace-link&lt;/a&gt; support for EWW.  It was
pretty easy, basically the same routine as for &lt;code&gt;help-mode&lt;/code&gt; and
&lt;code&gt;info-mode&lt;/code&gt;. The only hard part was to figure out what part of the
code keeps binding &lt;code&gt;shr-save-contents&lt;/code&gt; to &lt;kbd&gt;o&lt;/kbd&gt;, my preferred
binding for &lt;code&gt;ace-link&lt;/code&gt;. Turns out it was &lt;code&gt;eww-link-keymap&lt;/code&gt;, and not
&lt;code&gt;shr-map&lt;/code&gt;. So here&amp;#39;s the new key binding code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Setup the defualt shortcuts.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;info&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Info-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;help-mode&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;help-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-help&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;eval-after-load&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;eww&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-link-keymap&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;eww-mode-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;o&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-link-eww&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you haven&amp;#39;t tried &lt;a href=&quot;https://github.com/abo-abo/ace-link&quot;&gt;ace-link&lt;/a&gt;
before, you can get it from MELPA.  The minimal configuration that you
need is this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s the setup that I&amp;#39;m actually using:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;use-package&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-link&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:load-path&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;~/git/ace-link&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;:init&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ace-link-setup-default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m using it from my git folder since when I want to edit a project, I
like to use &lt;a href=&quot;https://github.com/nonsequitur/smex&quot;&gt;smex&lt;/a&gt;&amp;#39;s
jump-to-definition.&lt;/p&gt;

&lt;p&gt;And &lt;a href=&quot;https://github.com/jwiegley/use-package&quot;&gt;use-package&lt;/a&gt; is useful
for the cases when my &lt;code&gt;~/git/&lt;/code&gt; happens not to contain &lt;code&gt;ace-link&lt;/code&gt;.  In
that case, instead of getting a debugger error on starting Emacs, I
get only a polite &amp;quot;Could not load package ace-link&amp;quot; in my &lt;code&gt;*Messages*&lt;/code&gt;
buffer.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Monkeying around with JavaScript</title>
   <link href="http://oremacs.com/2014/12/29/monkeying-around-with-javascript/"/>
   <updated>2014-12-29T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/29/monkeying-around-with-javascript</id>
   <content type="html">&lt;h2 id=&quot;exciting-encounter&quot;&gt;Exciting encounter&lt;/h2&gt;

&lt;p&gt;Recently, I happened upon a wonderful blog called
&lt;a href=&quot;http://axisofeval.blogspot.nl&quot;&gt;The Axis of Eval&lt;/a&gt;.  I knew that I&amp;#39;d
love it just when I read the name. &lt;a href=&quot;/&quot;&gt;(or emacs&lt;/a&gt; pales in comparison,
but I couldn&amp;#39;t just sit on my hands for months or years while thinking
up a perfect blog name. If you think of a blog name as awesome as &amp;quot;The
Axis of Eval&amp;quot; and are willing to let me use it, I&amp;#39;ll probably make the
switch.&lt;/p&gt;

&lt;p&gt;The blog did not disappoint, featuring gems like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the Lisp world, new languages are built by combining large,
battle-tested building blocks, and polishing or updating them when
needed, instead of starting over from toothpicks and double-sided
duct tape. A large Lisp like Common Lisp is like a toolchain of
decades-old tools that have proven their worth, and have been
codified in standards, folklore, and implementations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The only thing in the way of extracting information and enjoyment from
this blog was the horrendous theme of black background, white
foreground and magenta links. Plus the RSS was kind of quirky, and I
couldn&amp;#39;t just feed all of it into
&lt;a href=&quot;https://github.com/skeeto/elfeed&quot;&gt;Elfeed&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;greasemonkey-to-the-rescue!&quot;&gt;Greasemonkey to the rescue!&lt;/h2&gt;

&lt;p&gt;In the previous post I&amp;#39;ve mentioned that, in addition to using
&lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;the best editor&lt;/a&gt;, I&amp;#39;m using
&lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;the best browser&lt;/a&gt;.  Well,
this particular best browser has an extension called
&lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/greasemonkey/&quot;&gt;Greasemonkey&lt;/a&gt;
that allows you to automatically run your own JavaScript on certain
websites.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not very proficient in JavaScript, the following code I just found
by searching around. The part to note is the &lt;code&gt;@include&lt;/code&gt; - the pattern
of website names for which this script should be run automatically.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @name        background&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @namespace   abo-abo&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @include     http://axisofeval.blogspot.nl/*&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @version     1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// @grant       none&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;style&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;s2&quot;&gt;&amp;quot;background-color: #ffffff; color:#000&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;nodesArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can barely stand to look at it. How could you take Scheme and turn
it into this monstrosity? Such a shame. But it works, so I guess
everyone should learn JavaScript. All hail the mighty
&lt;s&gt;HypnoToad&lt;/s&gt; JavaScript!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Throwing abbrevs into the mix</title>
   <link href="http://oremacs.com/2014/12/28/trying-abbrevs/"/>
   <updated>2014-12-28T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/28/trying-abbrevs</id>
   <content type="html">&lt;p&gt;Currently, I&amp;#39;m using two methods for completing Elisp: &lt;code&gt;company-mode&lt;/code&gt;
and &lt;code&gt;helm-lisp-completion-at-point&lt;/code&gt;. The latter is the cannon, the big
gun: it always gets the job done, but I don&amp;#39;t want to shoot at
sparrows with it. So I only bring it out for hairy cases, like for
stuff that starts with &lt;code&gt;LaTeX-&lt;/code&gt;. Hence, the &lt;code&gt;company-mode&lt;/code&gt;.  But too
often have I typed &lt;code&gt;region-&lt;/code&gt; only to find 7 candidates staring at me,
4 of them useless. Which prompted me to look for an additional
completion method.&lt;/p&gt;

&lt;h2 id=&quot;enter-abbrevs&quot;&gt;Enter abbrevs&lt;/h2&gt;

&lt;p&gt;According to the &lt;a href=&quot;http://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html&quot;&gt;manual&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A defined &amp;quot;abbrev&amp;quot; is a word which &amp;quot;expands&amp;quot;, if you insert it, into
some different text&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs can have &amp;quot;mode-specific&amp;quot; definitions, active only in one
major mode&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sounds like something that could solve my problem with &lt;code&gt;region-&lt;/code&gt; commands:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;rb -&amp;gt; region-beginning
re -&amp;gt; region-end
ra -&amp;gt; region-active-p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, obviously,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Abbrevs expand only when Abbrev mode, a buffer-local minor mode, is
enabled&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Add it to the mix:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-emacs-lisp-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;outline-regexp&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;;; ———&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;abbrev-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;make-local-variable&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;company-backends&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;company-elisp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;company-dabbrev-code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;yas-minor-mode-on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;auto-compile-mode&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;some-data-acquisition&quot;&gt;Some data acquisition&lt;/h2&gt;

&lt;p&gt;I had the whole abbrev thing in the back of my mind until I saw a link
to the post
&lt;a href=&quot;https://groups.google.com/forum/#!topic/gnu.emacs.help/kHvUcFdiXFM&quot;&gt;Abbrevs for the most frequent elisp symbols&lt;/a&gt;.
That&amp;#39;s when I decided to act.
That post eventually links to a pastebin, where 1600 abbrevs are defined.
With my handy &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/its-all-text/&quot;&gt;best extension&lt;/a&gt;
for &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/new/&quot;&gt;best browser&lt;/a&gt; I&amp;#39;ve opened
the paste in &lt;s&gt;Emacs&lt;/s&gt; &lt;a href=&quot;http://www.gnu.org/software/emacs/&quot;&gt;best editor&lt;/a&gt; by just clicking the &lt;strong&gt;edit&lt;/strong&gt; button
in the &lt;em&gt;RAW Paste Data&lt;/em&gt; section.&lt;/p&gt;

&lt;p&gt;I had to &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, since the file opened in
&lt;code&gt;text-mode&lt;/code&gt;. And boy, it&amp;#39;s big. In &lt;code&gt;lispy-mode&lt;/code&gt;, I usually use
&lt;kbd&gt;99j&lt;/kbd&gt; to navigate 99 sexps down and therefore to the end of
the list. Well, for this file even &lt;kbd&gt;999j&lt;/kbd&gt; wasn&amp;#39;t enough.
I quickly tired of deleting one-by-one the each individual useless abbrev.
I mean:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ek -&amp;gt; echo-keystrokes,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;when is that ever going to be useful? So I wrote this throw-away code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foobar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-mark-list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy--string-dwim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;count-matches&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;other-window&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-out-backward&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;deactivate-mark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-delete&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;local-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;foobar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After switching to a two-pane window layout, with point in the
pastebin buffer, calling &lt;code&gt;foobar&lt;/code&gt; would count the amount of the abbrev
matches in
&lt;a href=&quot;https://github.com/abo-abo/lispy/commits/master&quot;&gt;my most frequent elisp buffer&lt;/a&gt;.
If it was less than 5, the abbrev was auto-deleted, otherwise the
decision was up to me, as holding &lt;kbd&gt;C-.&lt;/kbd&gt; would no longer
delete. In the end, there were only 56 abbrevs left out of 1600.&lt;/p&gt;

&lt;h2 id=&quot;the-final-result&quot;&gt;The final result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s what I have put into my &lt;code&gt;abbrev_defs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;define-abbrev-table&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;emacs-lisp-mode-abbrev-table&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;string-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;major-mode&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ca&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;char-after&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;smd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-match-data&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-beginning&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;point-min&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ir&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;indent-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ci&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;call-interactively&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;symbol-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;se&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;save-excursion&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ff&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;find-file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-sexp&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pa&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;prefix-arg&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;re&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;region-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ms&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;this-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;default-directory&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;backward-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;snp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bsnp&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring-no-properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lep&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;line-end-position&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bs&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-substring&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;condition-case&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;up-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bfn&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;buffer-file-name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-back&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tap&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;thing-at-point&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-match&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;fl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;forward-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;df&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;declare-function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ntr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;narrow-to-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dr&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;delete-region&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rsb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;re-search-backward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;scf&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;skip-chars-forward&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wcb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;with-current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ie&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ignore-errors&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;gc&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;goto-char&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jos&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;just-one-space&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;la&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;looking-at&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ow&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;other-window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dk&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;define-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;dm&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;deactivate-mark&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bod&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;beginning-of-defun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sic&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;self-insert-command&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;eol&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;end-of-line&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;me&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;match-end&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nai&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;newline-and-indent&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;cb&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;current-buffer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;add-to-list&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;rris&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;replace-regexp-in-string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Mmm... minty</title>
   <link href="http://oremacs.com/2014/12/27/mmm-minty/"/>
   <updated>2014-12-27T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/27/mmm-minty</id>
   <content type="html">&lt;h2 id=&quot;the-backstory&quot;&gt;The backstory&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2014/12/24/light-it-up/&quot;&gt;one of the earlier posts&lt;/a&gt;,
I was discussing the implementation of an Emacs Lisp lexer for
&lt;a href=&quot;http://pygments.org/&quot;&gt;Pygments&lt;/a&gt;. Here, I&amp;#39;ll show how to install the
update and get nicely highlighted code in a pdf via the
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; LaTeX package.&lt;/p&gt;

&lt;h2 id=&quot;the-install&quot;&gt;The install&lt;/h2&gt;

&lt;p&gt;Assuming that you are on a Debian-related system:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install mercurial
mkdir ~/git &amp;amp;&amp;amp; cd ~/git
hg clone https://bitbucket.org/abo-abo/pygments-main
cd pygments-main
make mapfiles
sudo python setup.py install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, of course, I&amp;#39;m assuming that you already have TeX Live installed.
I&amp;#39;m not too sophisticated about it, so I just install everything:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo apt-get install texlive-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;So here I took some code from
&lt;a href=&quot;/2014/12/25/ode-to-toggle/&quot;&gt;a previous post&lt;/a&gt; and
copy-pasted it into &lt;a href=&quot;/download/minty.org&quot;&gt;minty.org&lt;/a&gt; file.
And here&amp;#39;s the result of the PDF export (&lt;kbd&gt;C-c C-e lo&lt;/kbd&gt;):
&lt;a href=&quot;/download/minty.pdf&quot;&gt;minty.pdf&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-red-tape&quot;&gt;The red tape&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;org-mode&lt;/code&gt; had trouble exporting on my laptop until I did this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd /usr/bin/
sudo ln -s /usr/local/texlive/2013/bin/x86_64-linux/pdflatex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also be mindful of the &lt;code&gt;-shell-escape&lt;/code&gt; flag to &lt;code&gt;pdflatex&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;org-latex-pdf-process&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>tiny.el - the little package that could</title>
   <link href="http://oremacs.com/2014/12/26/the-little-package-that-could/"/>
   <updated>2014-12-26T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/26/the-little-package-that-could</id>
   <content type="html">&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;It all started with a heated discussion with the author of
&lt;a href=&quot;https://github.com/capitaomorte/yasnippet&quot;&gt;yasnippet&lt;/a&gt; over some minor
nonsense. In the end, we agreed to disagree, but not before he suggested:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So I hereby challenge you to create this stripped down, no-crap,
version of yasnippet. Dub it &amp;quot; tiny is not yasnippet &amp;quot; after your
grandiose views and in the glorious unix tradition of recursive
acronyms&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-thought-process&quot;&gt;The Thought Process&lt;/h2&gt;

&lt;p&gt;Well, doing exactly that would probably be lame, but I really loved
the acronym. Somewhere around that time I saw some post about using
eval-and-replace, i.e. inserting some Elisp in your non-Elisp buffer
and then replacing that code in-place with the result of the eval.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the type of code that I was playing around with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapcar&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I realized that the code should probably produce a string.
Here&amp;#39;s a more refined version:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mapconcat&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;number-sequence&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;s&quot;&gt;&amp;quot;;\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Loops are a useful thing to have, they are a blind spot of
&lt;code&gt;yasnippet&lt;/code&gt;, and looping is exactly what the code above does.  The
parameters for this loop expansion are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;integer range start: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;integer range end: &lt;code&gt;7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;separator to join the expressions: &lt;code&gt;&amp;quot;;\n&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Elisp expression to transform the linear range: &lt;code&gt;(* x x)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;format&lt;/code&gt; expression for the result: &lt;code&gt;&amp;quot;hex: 0x%x&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So ideally, in order to have a package called &lt;code&gt;tiny&lt;/code&gt;, I&amp;#39;d like to
keep only the parameters and throw away everything else.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;Here&amp;#39;s the final result of the shortening, and what &lt;code&gt;tiny-expand&lt;/code&gt; would produce:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#demo-1&quot;&gt;&lt;code&gt;m1;\n7*xx|hex: 0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-1&quot; class=&quot;collapse&quot;&gt;
&lt;pre&gt;&lt;code&gt;
hex: 0x1;
hex: 0x4;
hex: 0x9;
hex: 0x10;
hex: 0x19;
hex: 0x24;
hex: 0x31
&lt;/pre&gt;&lt;/code&gt;
&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;As you see, it&amp;#39;s pretty compact, with only two characters which are not
actually the parameters of the template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m&lt;/code&gt; signifies the start of the template. I think this way is much
better than something like having to mark the template body with a
region before expanding. &lt;code&gt;tiny-expand&lt;/code&gt; should be called from the end
of the snippet, so there&amp;#39;s no need to mark the end position.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|&lt;/code&gt; signifies the end of the Elisp expression and the start of the format string.
It can be omitted if your format string starts with a &lt;code&gt;%&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note also the use of shortened Elisp. You can still use the full thing
if you want.  Or just use only the closing parens to resolve the
ambiguities.&lt;/p&gt;

&lt;h2 id=&quot;the-demos&quot;&gt;The Demos&lt;/h2&gt;

&lt;p&gt;Here are some more snippets, you can click on them to see what they
expand to. You can also find them and more in the comments section of
the source code:
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-2&quot;&gt; &lt;code&gt;m10&lt;/code&gt;
&lt;/button&gt; &lt;div id=&quot;demo-2&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 1 2 3 4 5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-3&quot;&gt;&lt;code&gt;m5 10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-3&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5 6 7 8 9 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-4&quot;&gt;&lt;code&gt;m5,10&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-4&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;5,6,7,8,9,10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-5&quot;&gt;&lt;code&gt;m5 10*xx&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-5&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;25 36 49 64 81 100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-6&quot;&gt;&lt;code&gt;m5 10*xx%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-6&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;19 24 31 40 51 64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-7&quot;&gt;&lt;code&gt;m5 10*xx|0x%x&lt;/code&gt;&lt;/button&gt;
&lt;div id=&quot;demo-7&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x19 0x24 0x31 0x40 0x51 0x64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-8&quot;&gt;
&lt;code&gt;m25+x?a%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-8&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-9&quot;&gt;
&lt;code&gt;m25+x?A%c&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-9&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-10&quot;&gt;
&lt;code&gt;m97,122(string x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-10&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-11&quot;&gt;
&lt;code&gt;m97,122stringxx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-11&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aa,bb,cc,dd,ee,ff,gg,hh,ii,jj,kk,ll,mm,nn,oo,pp,qq,rr,ss,tt,uu,vv,ww,xx,yy,zz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-12&quot;&gt;
&lt;code&gt;m97,120stringxupcasex&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-12&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aA,bB,cC,dD,eE,fF,gG,hH,iI,jJ,kK,lL,mM,nN,oO,pP,qQ,rR,sS,tT,uU,vV,wW,xX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-13&quot;&gt;
&lt;code&gt;m97,120stringxupcasex)x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-13&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;aAa,bBb,cCc,dDd,eEe,fFf,gGg,hHh,iIi,jJj,kKk,lLl,mMm,nNn,oOo,pPp,qQq,rRr,sSs,tTt,uUu,vVv,wWw,xXx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-14&quot;&gt;
&lt;code&gt;m\n10|%(+ x x) and %(* x x) and %s&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-14&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 and 0 and 0
2 and 1 and 1
4 and 4 and 2
6 and 9 and 3
8 and 16 and 4
10 and 25 and 5
12 and 36 and 6
14 and 49 and 7
16 and 64 and 8
18 and 81 and 9
20 and 100 and 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-15&quot;&gt;
&lt;code&gt;m10*2+3x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-15&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;6 8 10 12 14 16 18 20 22 24 26
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-16&quot;&gt;
&lt;code&gt;m\n10expx&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-16&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1.0
2.718281828459045
7.38905609893065
20.085536923187668
54.598150033144236
148.4131591025766
403.4287934927351
1096.6331584284585
2980.9579870417283
8103.083927575384
22026.465794806718
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-17&quot;&gt;
&lt;code&gt;m1\n20expx%014.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-17&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;00000000002.72
00000000007.39
00000000020.09
00000000054.60
00000000148.41
00000000403.43
00000001096.63
00000002980.96
00000008103.08
00000022026.47
00000059874.14
00000162754.79
00000442413.39
00001202604.28
00003269017.37
00008886110.52
00024154952.75
00065659969.14
00178482300.96
00485165195.41
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-18&quot;&gt;
&lt;code&gt;m7|%(expt 2 x)&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-18&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;1 2 4 8 16 32 64 128
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-19&quot;&gt;
&lt;code&gt;m, 7|0x%02x&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-19&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-20&quot;&gt;
&lt;code&gt;m10|%0.2f&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-20&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0.00 1.00 2.00 3.00 4.00 5.00 6.00 7.00 8.00 9.00 10.00
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-21&quot;&gt;
&lt;code&gt;m1\n14|* TODO http://emacsrocks.com/e%02d.html&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-21&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO http://emacsrocks.com/e01.html
* TODO http://emacsrocks.com/e02.html
* TODO http://emacsrocks.com/e03.html
* TODO http://emacsrocks.com/e04.html
* TODO http://emacsrocks.com/e05.html
* TODO http://emacsrocks.com/e06.html
* TODO http://emacsrocks.com/e07.html
* TODO http://emacsrocks.com/e08.html
* TODO http://emacsrocks.com/e09.html
* TODO http://emacsrocks.com/e10.html
* TODO http://emacsrocks.com/e11.html
* TODO http://emacsrocks.com/e12.html
* TODO http://emacsrocks.com/e13.html
* TODO http://emacsrocks.com/e14.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-info&quot;
data-toggle=&quot;collapse&quot; data-target=&quot;#demo-22&quot;&gt;
&lt;code&gt;m\n8|* TODO Wash dog %(+ x 2) \nDEADLINE: &amp;lt;%(date &amp;quot;Jan 1&amp;quot; (* x 5))&amp;gt;&lt;/code&gt;
&lt;/button&gt;
&lt;div id=&quot;demo-22&quot; class=&quot;collapse&quot;&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* TODO Wash dog 2
DEADLINE: &amp;lt;2015-01-01 Thu&amp;gt;
* TODO Wash dog 3
DEADLINE: &amp;lt;2015-01-06 Tue&amp;gt;
* TODO Wash dog 4
DEADLINE: &amp;lt;2015-01-11 Sun&amp;gt;
* TODO Wash dog 5
DEADLINE: &amp;lt;2015-01-16 Fri&amp;gt;
* TODO Wash dog 6
DEADLINE: &amp;lt;2015-01-21 Wed&amp;gt;
* TODO Wash dog 7
DEADLINE: &amp;lt;2015-01-26 Mon&amp;gt;
* TODO Wash dog 8
DEADLINE: &amp;lt;2015-01-31 Sat&amp;gt;
* TODO Wash dog 9
DEADLINE: &amp;lt;2015-02-05 Thu&amp;gt;
* TODO Wash dog 10
DEADLINE: &amp;lt;2015-02-10 Tue&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You can expand them one-by-one to see what they do.  As you can see,
Ruby-style interpolation is available in the format string.  There&amp;#39;s
also one special function called &lt;code&gt;date&lt;/code&gt; that you can use there.  It
takes the start date as a string (&lt;code&gt;&amp;quot;Jan 1&amp;quot;&lt;/code&gt; in the example) and an
integer shift and prints an &lt;code&gt;org&lt;/code&gt;-style date.&lt;/p&gt;

&lt;h2 id=&quot;the-full-syntax&quot;&gt;The full syntax&lt;/h2&gt;

&lt;p&gt;The full syntax for the snippet is:&lt;/p&gt;

&lt;pre style=&quot;font-size: 0.6em&quot;&gt;&lt;code&gt;m{range start:=0}{separator:= }{range end}{Lisp expr:=indentity}|{format expr:=%d}&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;You always start with &lt;code&gt;m&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;range start&lt;/code&gt; that defaults to &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;separator&lt;/code&gt; that defaults to a single space.&lt;/li&gt;
&lt;li&gt;Then mandatory &lt;code&gt;range end&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;Lisp expr&lt;/code&gt;, that defaults to &lt;code&gt;identity&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then optional &lt;code&gt;format&lt;/code&gt;-style string, that defaults to &lt;code&gt;%d&lt;/code&gt;. You have
to separate it with &lt;code&gt;|&lt;/code&gt; if the format string does not start with
&lt;code&gt;%&lt;/code&gt;. You can also Ruby-style interpolation here, e.g. &lt;code&gt;%(* x x)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;With the point at the end of the snippet, &lt;kbd&gt;M-x&lt;/kbd&gt;&lt;code&gt;tiny-expand&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-summary&quot;&gt;The Summary&lt;/h2&gt;

&lt;p&gt;In the end, &lt;a href=&quot;https://github.com/abo-abo/tiny&quot;&gt;tiny&lt;/a&gt; lives up to the name,
implementing only one snippet that can be used in a variety of ways.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;tiny is not yasnippet&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Ode to the toggle</title>
   <link href="http://oremacs.com/2014/12/25/ode-to-toggle/"/>
   <updated>2014-12-25T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/25/ode-to-toggle</id>
   <content type="html">&lt;p&gt;Man, I just love toggles: the light switches, the
&lt;kbd&gt;f&lt;/kbd&gt; - full-screen key in &lt;code&gt;vlc&lt;/code&gt;, and the clicky pens (ooh, those
are the best). So I try to model some of my Emacs key bindings as
toggles.&lt;/p&gt;

&lt;p&gt;Let me just quantify the two features that make a good toggle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only two states: &lt;em&gt;on&lt;/em&gt; and &lt;em&gt;off&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;the state is visible at a glance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One could argue that with &lt;code&gt;undo&lt;/code&gt; most editing commands become toggles.
But they&amp;#39;re not, since each time you call &lt;code&gt;undo&lt;/code&gt;, you mess with
Emacs&amp;#39;s undo state. And the undo state isn&amp;#39;t visible at a glance, so
both requirements for a good toggle aren&amp;#39;t fulfilled.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll demonstrate the two editing commands that I use every day,
&lt;code&gt;capitalize-word-toggle&lt;/code&gt; and &lt;code&gt;upcase-word-toggle&lt;/code&gt;, that are good
toggles.&lt;/p&gt;

&lt;h2 id=&quot;capitalize-word-toggle&quot;&gt;&lt;code&gt;capitalize-word-toggle&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;upcase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;letter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-after&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
               &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
             &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;capitalize-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I may not have mentioned this before, but you should for the most part
ignore the key bindings mentioned on this blog. I&amp;#39;m actually using
them, they work for me because of my non-standard layout, but you
should assign what works for you.&lt;/p&gt;

&lt;p&gt;Anyway, &lt;code&gt;capitalize-word-toggle&lt;/code&gt; clearly has a state that&amp;#39;s visible at
a glance: the first char of the current symbol. Also, there are only
two possible states: the char can either be upper-case or lower-case.
Hence, I can toggle this state with &lt;kbd&gt;C-z&lt;/kbd&gt; for fun and profit.&lt;/p&gt;

&lt;p&gt;Maybe some background on how this command is useful for me. I write a bunch of C++,
and the code features a lot of lines like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Triangulation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triangulation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// duh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So when I&amp;#39;m using &lt;code&gt;auto-complete&lt;/code&gt;, it often eagerly expands to
&lt;code&gt;Triangulation&lt;/code&gt; when I want &lt;code&gt;triangulation&lt;/code&gt;, and the other way around.
So &lt;code&gt;capitalize-word-toggle&lt;/code&gt; is super-useful there.&lt;/p&gt;

&lt;h2 id=&quot;upcase-word-toggle&quot;&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-toggle&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds-of-thing-at-point&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;last-command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;region-active-p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;regionp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-beginning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;region-end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;this-command&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;regionp&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cdr&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;[A-Za-z]&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;funcall&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;char-upcasep&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;char-before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                        &lt;span class=&quot;ss&quot;&gt;&amp;#39;downcase-region&lt;/span&gt;
                      &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;upcase-word-toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;upcase-word-toggle&lt;/code&gt;&amp;#39;s state becomes binary after you call it once,
since initially the thing at point could have mixed case.
But afterwards, it&amp;#39;s either all lowercase or all uppercase.
So again, a clearly visible binary state is a good thing.&lt;/p&gt;

&lt;p&gt;This command works either on &lt;code&gt;(bounds-of-thing-at-point &amp;#39;symbol)&lt;/code&gt; or
on the active region. Since &lt;code&gt;region-active-p&lt;/code&gt; is deactivated after you
call the command once, there&amp;#39;s some machinery to remember the state
and to toggle when called again.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Light it up! Pygments for Emacs Lisp.</title>
   <link href="http://oremacs.com/2014/12/24/light-it-up/"/>
   <updated>2014-12-24T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/24/light-it-up</id>
   <content type="html">&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;More than 2 years ago, the formidable @bbatsov of &lt;a href=&quot;http://emacsredux.com&quot;&gt;Emacs Redux&lt;/a&gt; had this to say:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p&gt;After so many years pygments (a popular syntax highlighting library used by GitHub &amp;amp; others) still lacks proper support for Emacs Lisp &lt;a href=&quot;https://twitter.com/hashtag/fail?src=hash&quot;&gt;#fail&lt;/a&gt;&lt;/p&gt;&amp;mdash; Bozhidar Batsov (@bbatsov) &lt;a href=&quot;https://twitter.com/bbatsov/status/246929917546221568&quot;&gt;September 15, 2012&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Well, let&amp;#39;s turn that #fail-frown upside down!&lt;/p&gt;

&lt;h2 id=&quot;the-python&quot;&gt;The Python&lt;/h2&gt;

&lt;p&gt;A quick search brought me to this page:
&lt;a href=&quot;http://pygments.org/docs/lexerdevelopment/&quot;&gt;Write your own lexer -- Pygments&lt;/a&gt;.
Turns out that the Pygments development takes place on
&lt;a href=&quot;https://bitbucket.org/birkenfeld/pygments-main&quot;&gt;Bitbucket&lt;/a&gt;, so I had
to start an account there. I shortly cloned the repository:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;hg clone https://abo-abo@bitbucket.org/birkenfeld/pygments-main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I quickly copy-pasted some starting code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;__all__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;SchemeLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;CommonLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;HyLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;RacketLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s&quot;&gt;&amp;#39;NewLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;EmacsLispLexer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmacsLispLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegexLexer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    An ELisp lexer, parsing a stream and outputting the tokens&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    needed to highlight elisp code.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ELisp&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;aliases&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;emacs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filenames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;*.el&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mimetypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;text/x-elisp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MULTILINE&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# the rest of the code was copied from CommonLispLexer for now&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Apparently, infrastructure-wise, I only need to know two commands.
The first one needs to be run just once, so that Pygments is aware of the new lexer:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cd ~/git/pygments-main &amp;amp;&amp;amp; make mapfiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second command is to (re-)generate &lt;code&gt;/tmp/example.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ cp ~/git/emacs/lisp/vc/ediff.el \
  ~/git/pygments-main/tests/examplefiles/
$ ./pygmentize -O full -f html -o /tmp/example.html \
  tests/examplefiles/ediff.el
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I would repeat the last line with each update to the code, and then
refresh the page in Firefox to see the result.&lt;/p&gt;

&lt;h2 id=&quot;the-elisp&quot;&gt;The Elisp&lt;/h2&gt;

&lt;p&gt;To finalize the lexer, the following tasks ensued:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;get a list of built-in macros&lt;/li&gt;
&lt;li&gt;get a list of special forms&lt;/li&gt;
&lt;li&gt;get a list of built-in functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the process, I&amp;#39;ve added two more lists:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions that are highlighted with &lt;code&gt;font-lock-keyword-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;defvaralias&amp;#39;, &amp;#39;provide&amp;#39;, &amp;#39;require&amp;#39;,
&amp;#39;with-no-warnings&amp;#39;, &amp;#39;define-widget&amp;#39;, &amp;#39;with-electric-help&amp;#39;,
&amp;#39;throw&amp;#39;, &amp;#39;defalias&amp;#39;, &amp;#39;featurep&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a list of built-in functions and macros that are highlighted with &lt;code&gt;font-lock-warning-face&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;#39;cl-assert&amp;#39;, &amp;#39;cl-check-type&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;signal&amp;#39;,
&amp;#39;user-error&amp;#39;, &amp;#39;warn&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To generate the other three lists, I started off writing things in
&lt;code&gt;*scratch*&lt;/code&gt;, but after a while my compulsion to &lt;kbd&gt;C-x C-s&lt;/kbd&gt;
kicked in and I&amp;#39;ve saved the work to &lt;code&gt;research.el&lt;/code&gt;.  At least,
&lt;a href=&quot;http://batsov.com/articles/2012/03/08/emacs-tip-number-5-save-buffers-automatically-on-buffer-or-window-switch/&quot;&gt;thanks to @bbatsov&lt;/a&gt;,
I&amp;#39;m not &lt;kbd&gt;C-x C-s&lt;/kbd&gt;-ing that much since I&amp;#39;ve added this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;save-and-switch-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-file-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bound-and-true-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;archive-subfile-mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;save-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ido-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;save-and-switch-buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But it&amp;#39;s time for the student to one-up the master, so here&amp;#39;s a tip to
improve even further:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;oleh-ido-setup-hook&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ido-buffer-completion-map&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;η&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ido-next-match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This way I can cycle the buffers with the same shortcut that invokes
&lt;code&gt;save-and-switch-buffer&lt;/code&gt;. The defaults are &lt;kbd&gt;C-s&lt;/kbd&gt; and
&lt;kbd&gt;C-r&lt;/kbd&gt;, in case you didn&amp;#39;t know.&lt;/p&gt;

&lt;h2 id=&quot;the-c&quot;&gt;The C&lt;/h2&gt;

&lt;p&gt;Getting the list of built-in C functions and special forms, obviously
involved browsing the C source code. In case you don&amp;#39;t (yet) have the Emacs sources,
they&amp;#39;re here:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ git clone git://git.savannah.gnu.org/emacs.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I switched to the &lt;code&gt;./src&lt;/code&gt; directory and called &lt;kbd&gt;M-x&lt;/kbd&gt; &lt;code&gt;find-name-dired&lt;/code&gt; with
&lt;code&gt;*.c&lt;/code&gt; to build a list of all the sources.
Then I ran the following code from &lt;code&gt;research.el&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c-research&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;dired-get-marked-files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dolist&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;incf&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;find-file-noselect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;goto-char&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point-min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;^DEFUN (&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;backward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;forward-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forward-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;buffer-substring-no-properties&lt;/span&gt;
                             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;beg&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;1-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;re-search-forward&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;UNEVALLED&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-special-forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;foo-c-functions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was beautiful, by the way, to just generate this sort of
documentation from such well-formatted and documented C sources.  Free
Software FTW.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;re interested, there are 1294 built-in functions.
Here&amp;#39;s a list of 23 special forms that I found:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;k&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;defconst&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;defvar&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;prog2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;progn&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;quote&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-current-buffer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;save-excursion&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;save-restriction&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;setq-default&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;unwind-protect&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can read up on the special forms in the
&lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.3&quot;&gt;SICP&lt;/a&gt;.
There&amp;#39;s no node for them, so just use isearch.&lt;/p&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The Result&lt;/h2&gt;

&lt;p&gt;You can see it here: &lt;a href=&quot;/download/ediff.html&quot;&gt;ediff.html&lt;/a&gt;, as well as on
the rest of the site, since I&amp;#39;ve switched it on everywhere.&lt;/p&gt;

&lt;h2 id=&quot;the-impact&quot;&gt;The Impact&lt;/h2&gt;

&lt;p&gt;Unfortunately this won&amp;#39;t have impact on the Github source code
highlighter, since
&lt;a href=&quot;http://www.greghendershott.com/2014/11/github-dropped-pygments.html&quot;&gt;Github dropped Pygments&lt;/a&gt;
recently.&lt;/p&gt;

&lt;p&gt;But people that use the static blog generator
&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; or the LaTeX package
&lt;a href=&quot;http://code.google.com/p/minted&quot;&gt;minted&lt;/a&gt; (that&amp;#39;s the package that
&lt;code&gt;org-mode&lt;/code&gt;&amp;#39;s PDF Export uses by default) will be able to get better
Elisp highlighting. In fact, this blog is already using the new highlighter.&lt;/p&gt;

&lt;p&gt;See the rest of projects that use Pygments
&lt;a href=&quot;http://pygments.org/faq/#who-uses-pygments&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-bitbucket&quot;&gt;The Bitbucket&lt;/h2&gt;

&lt;p&gt;So now, to share the new lexer with the world I just have to learn how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stage and commit in Mercurial&lt;/li&gt;
&lt;li&gt;push Mercurial to Bitbucket&lt;/li&gt;
&lt;li&gt;open a pull request on Bitbucket&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;#39;t &lt;em&gt;want&lt;/em&gt; to become a &lt;a href=&quot;http://xkcd.com/1220/&quot;&gt;hipster&lt;/a&gt;, these things just happen.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>upcase-word, you so silly</title>
   <link href="http://oremacs.com/2014/12/23/upcase-word-you-silly/"/>
   <updated>2014-12-23T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/23/upcase-word-you-silly</id>
   <content type="html">&lt;p&gt;Do you know what the
&lt;a href=&quot;http://ergoemacs.org/emacs/command-frequency.html&quot;&gt;most frequently used&lt;/a&gt;
Emacs commands are? I can confirm by my own experience that they are
&lt;code&gt;next-line&lt;/code&gt; and &lt;code&gt;previous-line&lt;/code&gt; (in that order).
So why do &lt;kbd&gt;M-u&lt;/kbd&gt; - &lt;code&gt;upcase-word&lt;/code&gt;, &lt;kbd&gt;M-l&lt;/kbd&gt; - &lt;code&gt;downcase-word&lt;/code&gt;, and
&lt;kbd&gt;M-c&lt;/kbd&gt; - &lt;code&gt;capitalize-word&lt;/code&gt; have such terrible synergy with Emacs&amp;#39;s best commands?&lt;/p&gt;

&lt;p&gt;No, &lt;code&gt;upcase-word&lt;/code&gt;, this is not what I had in mind:&lt;/p&gt;

&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic key&lt;cursor&gt;s&lt;/cursor&gt;troke commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;td&gt;
&lt;kbd&gt;M-u&lt;/kbd&gt;
&lt;/td&gt;&lt;td&gt;
&lt;pre style=&quot;font-size: 0.6em&quot;&gt;
Learn basic keySTROKE&lt;cursor&gt; &lt;/cursor&gt;commands
Overview of Emacs features at gnu.org
&lt;/pre&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;If you say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But how did you get the cursor in such a crazy position in the first
place? You should have used &lt;kbd&gt;M-b&lt;/kbd&gt;/&lt;kbd&gt;M-f&lt;/kbd&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, I got there with &lt;code&gt;previous-line&lt;/code&gt; - one of the best Emacs commands!&lt;/p&gt;

&lt;h2 id=&quot;resolve-the-*-word-malarkey-with-defadvice&quot;&gt;Resolve the &lt;code&gt;*-word&lt;/code&gt; malarkey with &lt;code&gt;defadvice&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Here are some simple advice commands that I&amp;#39;ve just rolled:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;upcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;downcase-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;downcase-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defadvice&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;capitalize-word&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;capitalize-word-advice&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;activate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;looking-back&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\\b&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Small explanation to the Elisp novices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;before &lt;code&gt;upcase-word&lt;/code&gt; is called, execute the body of &lt;code&gt;upcase-word-advice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unless&lt;/code&gt; we are at the beginning of the word&lt;/li&gt;
&lt;li&gt;&lt;code&gt;backward-word&lt;/code&gt; once to move to the beginning of the word&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;#39;m intentionally not using the newest advice system here, since not everyone
has yet upgraded to Emacs 24.4.
In fact, I saw this gem today at Stack Overflow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I am using Emacs 23 and cedet 1.0.1 ...&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>Sometimes things break</title>
   <link href="http://oremacs.com/2014/12/22/sometimes-things-break/"/>
   <updated>2014-12-22T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/22/sometimes-things-break</id>
   <content type="html">&lt;p&gt;I was very surprised to find the
&lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;lispy&lt;/a&gt; build broken after I pushed
some minor update, like a change to README.md.  I mean, how in the
world would a few words in README.md break the Elisp tests?  Upon
investigation, it turned out that only one test was broken &lt;sup id=&quot;fnref1&quot;&gt;&lt;a href=&quot;#fn1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  This
one:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ert-deftest&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;clojure-thread-macro&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;cider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;should&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string=&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lispy-with&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&amp;quot;|(map sqr (filter odd? [1 2 3 4 5]))&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;2(-&amp;gt;&amp;gt;]&amp;lt;]&amp;lt;]wwlM&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&amp;quot;(-&amp;gt;&amp;gt; [1 2 3 4 5]\n  (map sqr)\n  (filter odd?))|&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The culprit was an update in &lt;code&gt;clojure-mode&lt;/code&gt;&amp;#39;s indentation.
The previous behavior:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is now replaced with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sqr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thankfully, the &lt;a href=&quot;https://travis-ci.com/&quot;&gt;Travis CI&lt;/a&gt; in combination
with &lt;a href=&quot;https://github.com/cask/cask&quot;&gt;cask&lt;/a&gt; is keeping me up to date.
Apparently, there were some
&lt;a href=&quot;https://github.com/clojure-emacs/clojure-mode/issues/265&quot;&gt;heated discussions&lt;/a&gt;
accompanying the change, and there was some reverting going on.
Anyway, it looks to me that both approaches have merit: the first one
is more logical, since &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; is an operation akin to Elisp&amp;#39;s
&lt;code&gt;with-current-buffer&lt;/code&gt;, where the first argument is different from the
others, while the second one is more aesthetically pleasing.  Fine
with me either way, I&amp;#39;m not complaining:)&lt;/p&gt;

&lt;p&gt;Also, the key sequence in the test is pretty ancient.  These days I&amp;#39;d
probably use:
&lt;kbd&gt;2(-&amp;gt;&amp;gt;&lt;/kbd&gt;&lt;kbd&gt;C-f&lt;/kbd&gt;&lt;kbd&gt;d&amp;lt;j&amp;lt;skwAM&lt;/kbd&gt;.  I&amp;#39;ve
recently done a more complex Elisp refactoring screencast, check it
out &lt;a href=&quot;https://www.youtube.com/watch?v=Djn6dXzXp_E&quot;&gt;here&lt;/a&gt;.  Later on, I
plan to do more Emacs-related screencasts (not just &lt;code&gt;lispy&lt;/code&gt;-related)
on my &lt;a href=&quot;https://www.youtube.com/user/abo5abo/videos&quot;&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;#39;t tried &lt;a href=&quot;https://github.com/abo-abo/lispy&quot;&gt;&lt;code&gt;lispy&lt;/code&gt;&lt;/a&gt; yet, you&amp;#39;re missing out -
doing this refactor operation feels like you&amp;#39;re doing the 15-number puzzle:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/download/15-puzzle.png&quot; alt=&quot;15puzzle&quot;&gt;&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s fun in my book. But let me get back to the short overview
of the Emacs testing tools that lead me to this post, mainly &lt;code&gt;cask&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;cask:-what-does-it-do?&quot;&gt;&lt;code&gt;cask&lt;/code&gt;: what does it do?&lt;/h2&gt;

&lt;p&gt;According to &lt;a href=&quot;http://cask.readthedocs.org/en/latest/&quot;&gt;its own documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Cask is a project management tool for Emacs Lisp to automate the
package development cycle; development, dependencies, testing,
building, packaging and more.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yes, please, I&amp;#39;d like to do that! But after the exciting intro
sentence, there&amp;#39;s very little followup documentation-wise.  It took me
ages to figure out how &lt;code&gt;cask&lt;/code&gt; can actually give me some tangible
benefits, since I thought that &lt;code&gt;package.el&lt;/code&gt; is enough to maintain my
own config (it still is).&lt;/p&gt;

&lt;h2 id=&quot;tangible-benefits-of-cask&quot;&gt;tangible benefits of &lt;code&gt;cask&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d like to be sure that my packages work across recent Emacs
versions.  I&amp;#39;m using the
&lt;a href=&quot;http://savannah.gnu.org/git/?group=emacs&quot;&gt;bleeding edge&lt;/a&gt; myself, but
people who download my packages from MELPA might be using something
older, like &lt;code&gt;emacs-24.3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So I want to run my tests on both versions. Also, even for just one
version, the tests need to be run in a minimum environment, i.e. with
only the dependencies loaded, so that my personal configuration does
not interfere with the tests.&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;cask&lt;/code&gt; actually shines: it can bootstrap a whole new
&lt;code&gt;.emacs.d&lt;/code&gt;, separate from your own, just for running tests.  It can do
it on your machine as well as on Travis CI.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s my &lt;code&gt;Cask&lt;/code&gt; file for &lt;code&gt;lispy&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(source gnu)
(source melpa)

(package-file &amp;quot;lispy.el&amp;quot;)

(files &amp;quot;*.el&amp;quot; (:exclude &amp;quot;init.el&amp;quot; &amp;quot;lispy-test.el&amp;quot;))

(development
 (depends-on &amp;quot;helm&amp;quot;)
 (depends-on &amp;quot;ace-jump-mode&amp;quot;)
 (depends-on &amp;quot;noflet&amp;quot;)
 (depends-on &amp;quot;iedit&amp;quot;)
 (depends-on &amp;quot;multiple-cursors&amp;quot;)
 (depends-on &amp;quot;cider&amp;quot;)
 (depends-on &amp;quot;slime&amp;quot;)
 (depends-on &amp;quot;geiser&amp;quot;)
 (depends-on &amp;quot;projectile&amp;quot;)
 (depends-on &amp;quot;s&amp;quot;)
 (depends-on &amp;quot;highlight&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here&amp;#39;s the &lt;code&gt;Makefile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Makefile&quot; data-lang=&quot;Makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; emacs
&lt;span class=&quot;c&quot;&gt;# EMACS = emacs-24.3&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CASK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ~/.cask/bin/cask
&lt;span class=&quot;nv&quot;&gt;CASKEMACS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOAD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; -l lispy-inline.el -l lispy.el -l lispy-test.el

&lt;span class=&quot;nf&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;cask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;shell &lt;span class=&quot;nv&quot;&gt;EMACS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;EMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASK&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -q  &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; lispy.el &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --eval &lt;span class=&quot;s2&quot;&gt;&amp;quot;(progn (mapc #&amp;#39;byte-compile-file &amp;#39;(\&amp;quot;lispy.el\&amp;quot; \&amp;quot;lispy-inline.el\&amp;quot; \&amp;quot;le-clojure.el\&amp;quot; \&amp;quot;le-scheme.el\&amp;quot; \&amp;quot;le-lisp.el\&amp;quot;)) (switch-to-buffer \&amp;quot;*Compile-Log*\&amp;quot;) (ert t))&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;CASKEMACS&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -batch &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;LOAD&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -f ert-run-tests-batch-and-exit

&lt;span class=&quot;nf&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    rm -f *.elc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;code&gt;Makefile&lt;/code&gt; has two separate testing targets: an
interactive one (&lt;code&gt;compile&lt;/code&gt;) and a non-interactive one (&lt;code&gt;test&lt;/code&gt;).
There&amp;#39;s actually some validity to this, since it happened once that
the same tests we failing in non-interactive mode, but passing in
interactive mode. Also, &lt;code&gt;compile&lt;/code&gt; obviously compiles, testing for
compilation warnings/errors.  I can change the Emacs version at the
top, although I don&amp;#39;t have to do it too often.&lt;/p&gt;

&lt;p&gt;Finally, here&amp;#39;s &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;language: emacs-lisp
env:
  matrix:
    - EMACS=emacs24

before_install:
  - sudo add-apt-repository -y ppa:cassou/emacs
  - sudo apt-get update -qq
  - sudo apt-get install -qq $EMACS
  - curl -fsSkL --max-time 10 --retry 10 --retry-delay 10 https://raw.github.com/cask/cask/master/go | python

script:
  - make cask
  - make test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So each time I push a change to github, Travis CI will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;install emacs24&lt;/li&gt;
&lt;li&gt;install cask&lt;/li&gt;
&lt;li&gt;install the packages from MELPA:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;helm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ace-jump-mode&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noflet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;iedit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multiple-cursors&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cider&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;slime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;geiser&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;projectile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highlight&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;load Emacs with these packages&lt;/li&gt;
&lt;li&gt;load &lt;code&gt;lispy-test.el&lt;/code&gt; and run it&lt;/li&gt;
&lt;li&gt;show up green if &lt;code&gt;make test&lt;/code&gt; returned &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Seems a bit wasteful, but it&amp;#39;s &lt;a href=&quot;http://xkcd.com/908/&quot;&gt;the Cloud&lt;/a&gt; - what can you do?&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id=&quot;fn1&quot;&gt;
&lt;p&gt;upon even further investigation, the test itself was broken for almost a year, since &lt;code&gt;lispy-with-clojure&lt;/code&gt; should have been used instead of &lt;code&gt;lispy-with&lt;/code&gt;, but &lt;code&gt;cider&lt;/code&gt; was changing the indentation of &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt; also for &lt;code&gt;emacs-lisp-mode&lt;/code&gt;, so things were kind of working out&amp;nbsp;&lt;a href=&quot;#fnref1&quot; rev=&quot;footnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Easy helm improvement</title>
   <link href="http://oremacs.com/2014/12/21/helm-backspace/"/>
   <updated>2014-12-21T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/21/helm-backspace</id>
   <content type="html">&lt;p&gt;When you press &lt;kbd&gt;DEL&lt;/kbd&gt; (also known as backspace) in a &lt;code&gt;helm&lt;/code&gt;
buffer, and there isn&amp;#39;t any input to delete, it only errors at you
with:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Text is read only&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why not make it do something useful instead, for instance close &lt;code&gt;helm&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Easy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-backspace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Forward to `backward-delete-char&amp;#39;.&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;On error (read-only), quit without selecting.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;condition-case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;backward-delete-char&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ne&quot;&gt;error&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;helm-keyboard-quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;helm-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;DEL&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;helm-backspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Poyekhali!</title>
   <link href="http://oremacs.com/2014/12/20/poyekhali!/"/>
   <updated>2014-12-20T00:00:00+01:00</updated>
   <id>http://oremacs.com/2014/12/20/poyekhali!</id>
   <content type="html">&lt;p&gt;Welcome to &lt;b&gt;&lt;code&gt;(or emacs&lt;/code&gt;&lt;/b&gt;!&lt;/p&gt;

&lt;p&gt;My name is Oleh and I&amp;#39;ve been using Emacs for about 3 years now.  I
think that it&amp;#39;s an awesome editor, and I&amp;#39;ve accumulated some know-how
to make it even better (at least for me and people who think like me).
Sharing is caring, so here we go.&lt;/p&gt;

&lt;h2 id=&quot;ace-window-update&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt; update&lt;/h2&gt;

&lt;p&gt;On this weekend I&amp;#39;ve made a major update to my package
&lt;a href=&quot;https://github.com/abo-abo/ace-window&quot;&gt;ace-window&lt;/a&gt; that allows it to
be used as a library. Luckily the change went smoothly, as there are
no complaints in the github issues so far.  In case you don&amp;#39;t know
what the package does in the first place, a short blurb follows.&lt;/p&gt;

&lt;h2 id=&quot;ace-window&amp;#39;s-&amp;quot;what-and-why&amp;quot;&quot;&gt;&lt;code&gt;ace-window&lt;/code&gt;&amp;#39;s &amp;quot;what and why&amp;quot;&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m sure you&amp;#39;re aware of the &lt;code&gt;other-window&lt;/code&gt; command. While it&amp;#39;s great for
two windows, it quickly loses its value when there are more windows:
you need to call it many times, and since it&amp;#39;s not easily predictable,
you have to check each time if you&amp;#39;re in the window that you wanted.&lt;/p&gt;

&lt;p&gt;Another approach is to use &lt;code&gt;windmove-left&lt;/code&gt;, &lt;code&gt;windmove-up&lt;/code&gt; etc.  These
are fast and predictable. Their disadvantage is that they need 4 key
bindings.  The default ones are shift+arrows, which are hard to reach.&lt;/p&gt;

&lt;p&gt;This package aims to take the speed and predictability of &lt;code&gt;windmove&lt;/code&gt;
and pack it into a single key binding, similar to &lt;code&gt;other-window&lt;/code&gt;.  To
achieve this, I&amp;#39;m using the excellent
&lt;a href=&quot;https://github.com/winterTTr/ace-jump-mode&quot;&gt;ace-jump-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how the package looks in action: &lt;a href=&quot;/download/ace-window.gif&quot;&gt;ace-window.gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since switching windows is a frequently used operation, I recommend
binding &lt;code&gt;ace-window&lt;/code&gt; to something short, like &lt;kbd&gt;M-p&lt;/kbd&gt;.&lt;/p&gt;

&lt;p&gt;By default, three actions are available:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;M-p&lt;/kbd&gt; - select window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u M-p&lt;/kbd&gt; - swap the current window with the selected window&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;C-u C-u M-p&lt;/kbd&gt; - delete the selected window&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finally,-the-library-part&quot;&gt;finally, the library part&lt;/h2&gt;

&lt;p&gt;So now, what if you want to select a window to maximize with &lt;code&gt;ace-window&lt;/code&gt;?
After the change that I&amp;#39;ve mentioned, the code to do this is dirt simple:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-elisp&quot; data-lang=&quot;elisp&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ace-maximize-window&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Ace maximize window.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;setq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aw--current-op&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aj-position-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;aj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;select-window&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;wnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;delete-other-windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aw--doit&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; Ace - Maximize Window&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kbd&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C-M-o&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;ace-maximize-window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 

</feed>
